{
  "address": "0xF032987Bd3E4397d5E0DeB9cC87187Bdd1fE55e9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "buyOrderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "sellOrderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeFraction",
          "type": "uint256"
        }
      ],
      "name": "changeProtocolFeeFraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeFractionFromSelling",
          "type": "uint256"
        }
      ],
      "name": "changeProtocolFeeFractionFromSelling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "name": "changeProtocolFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minConsensusForSellingOverBuyPrice",
          "type": "uint256"
        }
      ],
      "name": "changeminConsensusForSellingOverBuyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minConsensusForSellingUnderOrEqualBuyPrice",
          "type": "uint256"
        }
      ],
      "name": "changeminConsensusForSellingUnderOrEqualBuyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "executionIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "executionIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "buyOrders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "executeOnPassiveBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        }
      ],
      "name": "executeOnPassiveSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "executions",
      "outputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sellPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "openSeaOrderHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "looksRareOrderHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isUsedBuyNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isUsedSellNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minConsensusForSellingOverBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minConsensusForSellingUnderOrEqualBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeFractionFromSelling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "realContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x92c035969dc63e8dfd8d3e1def06598cc01e16140da3382c234ae44286f81e43",
  "receipt": {
    "to": null,
    "from": "0xC103d1b071AFA925714eE55b2F4869300C4331C4",
    "contractAddress": "0xF032987Bd3E4397d5E0DeB9cC87187Bdd1fE55e9",
    "transactionIndex": 0,
    "gasUsed": "41499915",
    "logsBloom": "0x
    "blockHash": "0xf302c91555d1f777aa1996a318a04bd955f40843f52d725e6f852f4a7b9aa068",
    "transactionHash": "0x92c035969dc63e8dfd8d3e1def06598cc01e16140da3382c234ae44286f81e43",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14093180,
        "transactionHash": "0x92c035969dc63e8dfd8d3e1def06598cc01e16140da3382c234ae44286f81e43",
        "address": "0xF032987Bd3E4397d5E0DeB9cC87187Bdd1fE55e9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c103d1b071afa925714ee55b2f4869300c4331c4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf302c91555d1f777aa1996a318a04bd955f40843f52d725e6f852f4a7b9aa068"
      }
    ],
    "blockNumber": 14093180,
    "cumulativeGasUsed": "19099295",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
    "0xC103d1b071AFA925714eE55b2F4869300C4331C4"
  ],
  "numDeployments": 1,
  "solcInputHash": "961b5b9b4a0c1b9e8a265bc47f4c1afb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyOrderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sellOrderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeFraction\",\"type\":\"uint256\"}],\"name\":\"changeProtocolFeeFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeFractionFromSelling\",\"type\":\"uint256\"}],\"name\":\"changeProtocolFeeFractionFromSelling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"changeProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minConsensusForSellingOverBuyPrice\",\"type\":\"uint256\"}],\"name\":\"changeminConsensusForSellingOverBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minConsensusForSellingUnderOrEqualBuyPrice\",\"type\":\"uint256\"}],\"name\":\"changeminConsensusForSellingUnderOrEqualBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"executionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"executionIds\",\"type\":\"uint256[]\"}],\"name\":\"claimProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"executeOnPassiveBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"}],\"name\":\"executeOnPassiveSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"openSeaOrderHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"looksRareOrderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUsedBuyNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUsedSellNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minConsensusForSellingOverBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minConsensusForSellingUnderOrEqualBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeFractionFromSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFeeFraction(uint256)\":{\"params\":{\"_protocolFeeFraction\":\"new fee fraction (out of 10_000)\"}},\"changeProtocolFeeFractionFromSelling(uint256)\":{\"params\":{\"_protocolFeeFractionFromSelling\":\"new fee fraction (out of 10_000)\"}},\"changeProtocolFeeReceiver(address)\":{\"params\":{\"_protocolFeeReceiver\":\"new receiver\"}},\"changeminConsensusForSellingOverBuyPrice(uint256)\":{\"params\":{\"_minConsensusForSellingOverBuyPrice\":\"new min consensus (out of 10_000)\"}},\"changeminConsensusForSellingUnderOrEqualBuyPrice(uint256)\":{\"params\":{\"_minConsensusForSellingUnderOrEqualBuyPrice\":\"new min consensus (out of 10_000)\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFeeFraction(uint256)\":{\"notice\":\"[onlyOwner] Change the protocol fee fraction\"},\"changeProtocolFeeFractionFromSelling(uint256)\":{\"notice\":\"[onlyOwner] Change the protocol fee fraction from selling\"},\"changeProtocolFeeReceiver(address)\":{\"notice\":\"[onlyOwner] Change the protocol fee receiver\"},\"changeminConsensusForSellingOverBuyPrice(uint256)\":{\"notice\":\"[onlyOwner] Change the min consensus for selling over or equal to buy price\"},\"changeminConsensusForSellingUnderOrEqualBuyPrice(uint256)\":{\"notice\":\"[onlyOwner] Change the min consensus for selling under buy price\"},\"executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256)\":{\"notice\":\"Executes on an array of passive buy orders\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClowderMain.sol\":\"ClowderMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/ClowderMain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n// _________ .__                   .___\\r\\n// \\\\_   ___ \\\\|  |   ______  _  ____| _/___________\\r\\n// /    \\\\  \\\\/|  |  /  _ \\\\ \\\\/ \\\\/ / __ |/ __ \\\\_  __ \\\\\\r\\n// \\\\     \\\\___|  |_(  <_> )     / /_/ \\\\  ___/|  | \\\\/\\r\\n//  \\\\______  /____/\\\\____/ \\\\/\\\\_/\\\\____ |\\\\___  >__|\\r\\n//         \\\\/                       \\\\/    \\\\/\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\nimport {BuyOrderV1, BuyOrderV1Functions} from \\\"./libraries/passiveorders/BuyOrderV1.sol\\\";\\r\\nimport {Execution} from \\\"./libraries/execution/Execution.sol\\\";\\r\\nimport {SafeERC20Transfer} from \\\"./libraries/assettransfer/SafeERC20Transfer.sol\\\";\\r\\nimport {SignatureUtil} from \\\"./libraries/SignatureUtil.sol\\\";\\r\\n// import {OpenSeaUtil} from \\\"./libraries/externalmarketplaces/OpenSeaUtil.sol\\\";\\r\\n// import {LooksRareUtil} from \\\"./libraries/externalmarketplaces/LooksRareUtil.sol\\\";\\r\\nimport {NftCollectionFunctions} from \\\"./libraries/NftCollection.sol\\\";\\r\\n\\r\\ncontract ClowderMainOwnable is Ownable {\\r\\n    address public protocolFeeReceiver;\\r\\n    uint256 public protocolFeeFraction = 100; // out of 10_000\\r\\n    uint256 public protocolFeeFractionFromSelling = 100; // out of 10_000\\r\\n    uint256 public minConsensusForSellingOverBuyPrice = 5_000; // out of 10_000\\r\\n    uint256 public minConsensusForSellingUnderOrEqualBuyPrice = 10_000; // out of 10_000\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the protocol fee receiver\\r\\n     * @param _protocolFeeReceiver new receiver\\r\\n     */\\r\\n    function changeProtocolFeeReceiver(address _protocolFeeReceiver)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        protocolFeeReceiver = _protocolFeeReceiver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the protocol fee fraction\\r\\n     * @param _protocolFeeFraction new fee fraction (out of 10_000)\\r\\n     */\\r\\n    function changeProtocolFeeFraction(uint256 _protocolFeeFraction)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        protocolFeeFraction = _protocolFeeFraction;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the protocol fee fraction from selling\\r\\n     * @param _protocolFeeFractionFromSelling new fee fraction (out of 10_000)\\r\\n     */\\r\\n    function changeProtocolFeeFractionFromSelling(\\r\\n        uint256 _protocolFeeFractionFromSelling\\r\\n    ) external onlyOwner {\\r\\n        protocolFeeFractionFromSelling = _protocolFeeFractionFromSelling;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the min consensus for selling over or equal to buy price\\r\\n     * @param _minConsensusForSellingOverBuyPrice new min consensus (out of 10_000)\\r\\n     */\\r\\n    function changeminConsensusForSellingOverBuyPrice(\\r\\n        uint256 _minConsensusForSellingOverBuyPrice\\r\\n    ) external onlyOwner {\\r\\n        minConsensusForSellingOverBuyPrice = _minConsensusForSellingOverBuyPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the min consensus for selling under buy price\\r\\n     * @param _minConsensusForSellingUnderOrEqualBuyPrice new min consensus (out of 10_000)\\r\\n     */\\r\\n    function changeminConsensusForSellingUnderOrEqualBuyPrice(\\r\\n        uint256 _minConsensusForSellingUnderOrEqualBuyPrice\\r\\n    ) external onlyOwner {\\r\\n        minConsensusForSellingUnderOrEqualBuyPrice = _minConsensusForSellingUnderOrEqualBuyPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ClowderMain is\\r\\n    ClowderMainOwnable,\\r\\n    ReentrancyGuard,\\r\\n    ERC721Holder,\\r\\n    ERC1155Holder,\\r\\n    IERC1271\\r\\n{\\r\\n    address public immutable WETH;\\r\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\r\\n\\r\\n    // user => nonce => isUsedBuyNonce\\r\\n    mapping(address => mapping(uint256 => bool)) public isUsedBuyNonce;\\r\\n    // user => nonce => isUsedSellNonce\\r\\n    mapping(address => mapping(uint256 => bool)) public isUsedSellNonce;\\r\\n    // buyer => executionId => real contribution\\r\\n    // Returns to zero when the owner is given their part of the\\r\\n    // sale proceeds (claimProceeds).\\r\\n    mapping(address => mapping(uint256 => uint256)) public realContributions;\\r\\n    // executionId => Execution\\r\\n    mapping(uint256 => Execution) public executions;\\r\\n\\r\\n    /* Events */\\r\\n    // event OpenSeaOrderSet(\\r\\n    //     OpenSeaUtil.OpenSeaOrder order,\\r\\n    //     bytes32 paramsOrderHash\\r\\n    // );\\r\\n\\r\\n    constructor(address _WETH, address _protocolFeeReceiver) {\\r\\n        WETH = _WETH;\\r\\n        protocolFeeReceiver = _protocolFeeReceiver;\\r\\n\\r\\n        EIP712_DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                ), // EIP712 domain typehash\\r\\n                keccak256(\\\"Clowder\\\"), // name\\r\\n                keccak256(bytes(\\\"0.1\\\")), // version\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function cancelBuyOrders(uint256[] calldata buyOrderNonces) external {\\r\\n        require(\\r\\n            buyOrderNonces.length > 0,\\r\\n            \\\"Cancel: Must provide at least one nonce\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < buyOrderNonces.length; i++) {\\r\\n            // if (!isUsedBuyNonce[msg.sender][buyOrderNonces[i]]) {\\r\\n                isUsedBuyNonce[msg.sender][buyOrderNonces[i]] = true; // used\\r\\n            // }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelSellOrders(uint256[] calldata sellOrderNonces) external {\\r\\n        require(\\r\\n            sellOrderNonces.length > 0,\\r\\n            \\\"Cancel: Must provide at least one nonce\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < sellOrderNonces.length; i++) {\\r\\n            isUsedSellNonce[msg.sender][sellOrderNonces[i]] = true; // cancelled\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes on an array of passive buy orders\\r\\n     */\\r\\n    function executeOnPassiveBuyOrders(\\r\\n        BuyOrderV1[] calldata buyOrders,\\r\\n        uint256 executorPrice,\\r\\n        uint256 tokenId\\r\\n    ) external nonReentrant {\\r\\n        require(buyOrders.length > 0, \\\"Execute: Must have at least one order\\\");\\r\\n\\r\\n        uint256 protocolFee = (protocolFeeFraction * executorPrice) / 10_000;\\r\\n        uint256 price = executorPrice + protocolFee;\\r\\n        address collection = buyOrders[0].collection;\\r\\n        uint256 executionId = buyOrders[0].executionId;\\r\\n\\r\\n        require(\\r\\n            executions[executionId].collection == address(0),\\r\\n            \\\"Execute: Id already executed\\\"\\r\\n        );\\r\\n        // creating the execution object immediately (extra measure to prevent reentrancy)\\r\\n        executions[executionId] = Execution({\\r\\n            collection: collection,\\r\\n            buyPrice: price,\\r\\n            tokenId: tokenId,\\r\\n            sold: false,\\r\\n            sellPrice: 0,\\r\\n            listingEndTime: 0,\\r\\n            sellProtocolFee: 0,\\r\\n            openSeaOrderHash: bytes32(0),\\r\\n            looksRareOrderHash: bytes32(0)\\r\\n        });\\r\\n\\r\\n        uint256 protocolFeeTransferred = 0;\\r\\n        uint256 executorPriceTransferred = 0;\\r\\n\\r\\n        // validate and process all the buy orders\\r\\n        for (uint256 i = 0; i < buyOrders.length; i++) {\\r\\n            BuyOrderV1 calldata order = buyOrders[i];\\r\\n            // Validate order nonce usability\\r\\n            require(\\r\\n                !isUsedBuyNonce[order.signer][order.buyNonce],\\r\\n                \\\"Order nonce is unusable\\\"\\r\\n            );\\r\\n            // Invalidating order nonce immediately (to avoid reentrancy\\r\\n            // or even reusing the signature in this loop)\\r\\n            // DO NOT separate from the above check, otherwise the order\\r\\n            // nonce could be reused (you can check the\\r\\n            // executeOnPassiveSellOrders for guidance). If you need separation\\r\\n            // probably you can check the signer/nonces before \\\"i\\\".\\r\\n            isUsedBuyNonce[order.signer][order.buyNonce] = true;\\r\\n            // Validate order signature\\r\\n            bytes32 orderHash = order.hash();\\r\\n            require(\\r\\n                SignatureUtil.verify(\\r\\n                    orderHash,\\r\\n                    order.signer,\\r\\n                    order.v,\\r\\n                    order.r,\\r\\n                    order.s,\\r\\n                    EIP712_DOMAIN_SEPARATOR\\r\\n                ),\\r\\n                \\\"Signature: Invalid\\\"\\r\\n            );\\r\\n            // Validate the order is not expired\\r\\n            require(order.buyPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\r\\n\\r\\n            // Validate the order can accept the price\\r\\n            require(order.canAcceptBuyPrice(price), \\\"Order can't accept price\\\");\\r\\n            // Validate collection\\r\\n            require(\\r\\n                order.collection == collection,\\r\\n                \\\"Order collection mismatch\\\"\\r\\n            );\\r\\n            // Validate executionId\\r\\n            require(\\r\\n                order.executionId == executionId,\\r\\n                \\\"Order executionId mismatch\\\"\\r\\n            );\\r\\n\\r\\n            uint256 contribution = order.contribution;\\r\\n\\r\\n            // transferring the protocol fee\\r\\n            uint256 protocolWethAmount = Math.min(\\r\\n                protocolFee - protocolFeeTransferred,\\r\\n                contribution\\r\\n            );\\r\\n            protocolFeeTransferred += protocolWethAmount;\\r\\n            _safeTransferWETH(\\r\\n                order.signer,\\r\\n                protocolFeeReceiver,\\r\\n                protocolWethAmount\\r\\n            );\\r\\n\\r\\n            // transferring the protocol executor price\\r\\n            uint256 executorPriceAmount = Math.min(\\r\\n                executorPrice - executorPriceTransferred,\\r\\n                contribution - protocolWethAmount\\r\\n            );\\r\\n            executorPriceTransferred += executorPriceAmount;\\r\\n            _safeTransferWETH(order.signer, msg.sender, executorPriceAmount);\\r\\n\\r\\n            // adding to the real contribution of the signer\\r\\n            uint256 realContribution = protocolWethAmount + executorPriceAmount;\\r\\n            realContributions[order.signer][executionId] += realContribution;\\r\\n        } // ends the orders for loop\\r\\n\\r\\n        // validating that we transferred the correct amounts of WETH\\r\\n        require(\\r\\n            protocolFeeTransferred == protocolFee,\\r\\n            \\\"Protocol fee not transferred correctly\\\"\\r\\n        );\\r\\n        require(\\r\\n            executorPriceTransferred == executorPrice,\\r\\n            \\\"Executor price not transferred correctly\\\"\\r\\n        );\\r\\n\\r\\n        // transferring the NFT\\r\\n        NftCollectionFunctions.transferNft(\\r\\n            collection,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            tokenId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _invalidateNonces(BuyOrderV1[] calldata orders) internal {\\r\\n        // Invalidating nonces\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            BuyOrderV1 calldata order = orders[i];\\r\\n            // Invalidating order nonce (to avoid reentrancy)\\r\\n            isUsedSellNonce[order.signer][order.sellNonce] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function executeOnPassiveSellOrders(\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        uint256 executorPrice\\r\\n    ) external nonReentrant {\\r\\n        require(orders.length > 0, \\\"ExecuteSell: Must have at least one order\\\");\\r\\n\\r\\n        uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\\r\\n            10_000;\\r\\n        uint256 price = executorPrice - protocolFee;\\r\\n        uint256 executionId = orders[0].executionId;\\r\\n\\r\\n        Execution storage execution = executions[executionId];\\r\\n\\r\\n        /* Validations */\\r\\n\\r\\n        require(execution.collection != address(0), \\\"Execution doesn't exist\\\");\\r\\n\\r\\n        require(!execution.sold, \\\"Execution already sold\\\");\\r\\n\\r\\n        BuyOrderV1Functions.validateSellOrdersParameters(\\r\\n            isUsedSellNonce,\\r\\n            realContributions,\\r\\n            orders,\\r\\n            executionId,\\r\\n            execution,\\r\\n            price,\\r\\n            minConsensusForSellingOverBuyPrice,\\r\\n            minConsensusForSellingUnderOrEqualBuyPrice\\r\\n        );\\r\\n\\r\\n        /* Invalidations */\\r\\n\\r\\n        _invalidateNonces(orders);\\r\\n\\r\\n        // marking as sold (to prevent reentrancy)\\r\\n        execution.sold = true;\\r\\n\\r\\n        // storing the price to be distributed among the owners\\r\\n        execution.sellPrice = price;\\r\\n\\r\\n        // We don't store protocol fees here as they are only used for\\r\\n        // claiming them, and we don't need claiming here because\\r\\n        // we are already transferring them.\\r\\n\\r\\n        /* Giving away execution flow */\\r\\n\\r\\n        // Validate signatures (includes interaction with\\r\\n        // other contracts)\\r\\n        BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\\r\\n\\r\\n        // transferring the WETH from the caller to Clowder\\r\\n        _safeTransferWETH(msg.sender, address(this), price);\\r\\n\\r\\n        // transferring the protocol fee\\r\\n        _safeTransferWETH(msg.sender, protocolFeeReceiver, protocolFee);\\r\\n\\r\\n        // transferring the NFT\\r\\n        NftCollectionFunctions.transferNft(\\r\\n            execution.collection,\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            execution.tokenId\\r\\n        );\\r\\n\\r\\n        // TODO: should we do this?:\\r\\n        // require(clowder is new owner of tokenId in collection, according to collection of course);\\r\\n    }\\r\\n\\r\\n    function _beforeStoringTheListingHash(\\r\\n        uint256 expirationTime,\\r\\n        uint256 sellPrice,\\r\\n        uint256 executionId,\\r\\n        uint256 protocolFee\\r\\n    ) internal {\\r\\n        Execution storage execution = executions[executionId];\\r\\n\\r\\n        // Disable old listing signatures in case new listing parameters are different\\r\\n        // from the ones in the execution object.\\r\\n        // This is done to due to the fact that we don't support concurrent listings\\r\\n        // with different prices.\\r\\n        if (\\r\\n            execution.listingEndTime != expirationTime ||\\r\\n            execution.sellPrice != sellPrice\\r\\n        ) {\\r\\n            execution.openSeaOrderHash = 0;\\r\\n            execution.looksRareOrderHash = 0;\\r\\n        }\\r\\n        // storing the listing end time\\r\\n        execution.listingEndTime = expirationTime;\\r\\n        // storing the last list price so we know how much to\\r\\n        // to be awarded to each owner\\r\\n        execution.sellPrice = sellPrice;\\r\\n        // storing the protocol fee\\r\\n        execution.sellProtocolFee = protocolFee;\\r\\n    }\\r\\n\\r\\n    // function listOnOpenSea(\\r\\n    //     BuyOrderV1[] calldata orders,\\r\\n    //     uint256 executorPrice,\\r\\n    //     uint256 marketplaceFee // out of 10_000\\r\\n    // ) external nonReentrant {\\r\\n    //     require(\\r\\n    //         orders.length > 0,\\r\\n    //         \\\"ListOnMarketplace: Must have at least one order\\\"\\r\\n    //     );\\r\\n\\r\\n    //     uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\\r\\n    //         10_000;\\r\\n    //     uint256 price = executorPrice - protocolFee;\\r\\n    //     uint256 executionId = orders[0].executionId;\\r\\n\\r\\n    //     Execution storage execution = executions[executionId];\\r\\n\\r\\n    //     /* Validations */\\r\\n\\r\\n    //     require(execution.collection != address(0), \\\"Execution doesn't exist\\\");\\r\\n\\r\\n    //     require(!execution.sold, \\\"Execution already sold\\\");\\r\\n\\r\\n    //     uint256 minExpirationTime = BuyOrderV1Functions\\r\\n    //         .validateSellOrdersParameters(\\r\\n    //             isUsedSellNonce,\\r\\n    //             realContributions,\\r\\n    //             orders,\\r\\n    //             executionId,\\r\\n    //             execution,\\r\\n    //             price,\\r\\n    //             minConsensusForSellingOverBuyPrice,\\r\\n    //             minConsensusForSellingUnderOrEqualBuyPrice\\r\\n    //         );\\r\\n\\r\\n    //     // Validate signatures (includes interaction with\\r\\n    //     // other contracts)\\r\\n    //     BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\\r\\n\\r\\n    //     OpenSeaUtil.initializationAndPermissions(\\r\\n    //         address(this),\\r\\n    //         execution.collection,\\r\\n    //         WETH\\r\\n    //     );\\r\\n\\r\\n    //     {\\r\\n    //         // OpenSea listing\\r\\n\\r\\n    //         // creating the OpenSea sell order\\r\\n    //         (\\r\\n    //             bytes32 _hash,\\r\\n    //             bytes32 paramsOrderHash,\\r\\n    //             OpenSeaUtil.OpenSeaOrder memory openSeaOrder\\r\\n    //         ) = OpenSeaUtil.buildAndGetOpenSeaOrderHash(\\r\\n    //                 address(this),\\r\\n    //                 execution.collection,\\r\\n    //                 execution.tokenId,\\r\\n    //                 // calculating list price:\\r\\n    //                 (10_000 * executorPrice) / (10_000 - marketplaceFee) + 1,\\r\\n    //                 minExpirationTime,\\r\\n    //                 marketplaceFee,\\r\\n    //                 WETH\\r\\n    //             );\\r\\n    //         require(_hash != 0, \\\"Hash must not be 0\\\");\\r\\n\\r\\n    //         _beforeStoringTheListingHash(\\r\\n    //             minExpirationTime,\\r\\n    //             price,\\r\\n    //             executionId,\\r\\n    //             protocolFee\\r\\n    //         );\\r\\n\\r\\n    //         // storing the corresponding hash by executionId\\r\\n    //         execution.openSeaOrderHash = _hash;\\r\\n\\r\\n    //         emit OpenSeaOrderSet(openSeaOrder, paramsOrderHash);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    // function listOnLooksRare(\\r\\n    //     BuyOrderV1[] calldata orders,\\r\\n    //     uint256 executorPrice,\\r\\n    //     uint256 marketplaceFee, // out of 10_000\\r\\n    //     uint256 nonce\\r\\n    // ) external nonReentrant {\\r\\n    //     require(\\r\\n    //         orders.length > 0,\\r\\n    //         \\\"ListOnMarketplace: Must have at least one order\\\"\\r\\n    //     );\\r\\n\\r\\n    //     uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\\r\\n    //         10_000;\\r\\n    //     uint256 price = executorPrice - protocolFee;\\r\\n    //     uint256 executionId = orders[0].executionId;\\r\\n\\r\\n    //     Execution storage execution = executions[executionId];\\r\\n\\r\\n    //     /* Validations */\\r\\n\\r\\n    //     require(execution.collection != address(0), \\\"Execution doesn't exist\\\");\\r\\n\\r\\n    //     require(!execution.sold, \\\"Execution already sold\\\");\\r\\n\\r\\n    //     uint256 minExpirationTime = BuyOrderV1Functions\\r\\n    //         .validateSellOrdersParameters(\\r\\n    //             isUsedSellNonce,\\r\\n    //             realContributions,\\r\\n    //             orders,\\r\\n    //             executionId,\\r\\n    //             execution,\\r\\n    //             price,\\r\\n    //             minConsensusForSellingOverBuyPrice,\\r\\n    //             minConsensusForSellingUnderOrEqualBuyPrice\\r\\n    //         );\\r\\n\\r\\n    //     // Validate signatures (includes interaction with\\r\\n    //     // other contracts)\\r\\n    //     BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\\r\\n\\r\\n    //     LooksRareUtil.initializationAndPermissions(\\r\\n    //         address(this),\\r\\n    //         execution.collection\\r\\n    //     );\\r\\n\\r\\n    //     {\\r\\n    //         // LooksRare listing\\r\\n    //         (\\r\\n    //             bytes32 _hash,\\r\\n    //             // LooksRareUtil.MakerOrder memory order\\r\\n    //         ) = LooksRareUtil.buildAndGetMarketplaceOrderHash(\\r\\n    //                 address(this),\\r\\n    //                 execution.collection,\\r\\n    //                 execution.tokenId,\\r\\n    //                 // calculating list price:\\r\\n    //                 (10_000 * executorPrice) / (10_000 - marketplaceFee) + 1,\\r\\n    //                 minExpirationTime,\\r\\n    //                 marketplaceFee,\\r\\n    //                 WETH,\\r\\n    //                 nonce\\r\\n    //             );\\r\\n    //         require(_hash != 0, \\\"Hash must not be 0\\\");\\r\\n\\r\\n    //         _beforeStoringTheListingHash(\\r\\n    //             minExpirationTime,\\r\\n    //             price,\\r\\n    //             executionId,\\r\\n    //             protocolFee\\r\\n    //         );\\r\\n\\r\\n    //         // storing the corresponding hash by executionId\\r\\n    //         execution.looksRareOrderHash = _hash;\\r\\n\\r\\n    //         // emit OpenSeaOrderSet(openSeaOrder, paramsOrderHash);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bytes4)\\r\\n    {\\r\\n        require(_hash != 0, \\\"Hash must not be 0\\\");\\r\\n        uint256 executionId = uint256(bytes32(_signature[:32]));\\r\\n        uint256 marketplaceId = uint256(bytes32(_signature[32:64]));\\r\\n\\r\\n        // Validate signatures\\r\\n        if (\\r\\n            (marketplaceId == 0 &&\\r\\n                executions[executionId].openSeaOrderHash == _hash) ||\\r\\n            (marketplaceId == 1 &&\\r\\n                executions[executionId].looksRareOrderHash == _hash)\\r\\n        ) {\\r\\n            return 0x1626ba7e;\\r\\n        }\\r\\n        return 0xffffffff;\\r\\n    }\\r\\n\\r\\n    function claimNft(uint256 executionId, address to) external nonReentrant {\\r\\n        Execution storage execution = executions[executionId];\\r\\n        require(\\r\\n            execution.collection != address(0),\\r\\n            \\\"ClaimNft: Execution doesn't exist\\\"\\r\\n        );\\r\\n        require(!execution.sold, \\\"ClaimNft: Execution already sold\\\");\\r\\n        /*\\r\\n         * Invalidating immediately (extra measure to prevent reentrancy)\\r\\n         * TODO: maybe we can zero the execution struct instead (?),\\r\\n         * that way we save gas and also allow re-using the executionId\\r\\n         */\\r\\n        executions[executionId].sold = true;\\r\\n        // validating real contribution\\r\\n        uint256 realContribution = realContributions[msg.sender][executionId];\\r\\n        require(\\r\\n            execution.buyPrice == realContribution,\\r\\n            \\\"ClaimNft: wrong real contribution\\\"\\r\\n        );\\r\\n        // just for claiming gas deductions\\r\\n        realContributions[msg.sender][executionId] = 0;\\r\\n        // transferring the NFT\\r\\n        NftCollectionFunctions.transferNft(\\r\\n            execution.collection,\\r\\n            address(this),\\r\\n            to,\\r\\n            execution.tokenId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _preClaim(uint256[] calldata executionIds) internal {\\r\\n        // loop over the executions\\r\\n        for (uint256 i = 0; i < executionIds.length; i++) {\\r\\n            uint256 executionId = executionIds[i];\\r\\n            Execution storage execution = executions[executionId];\\r\\n\\r\\n            require(\\r\\n                execution.collection != address(0),\\r\\n                \\\"PreClaim: Execution doesn't exist\\\"\\r\\n            );\\r\\n            // Validating that we already sold the NFT\\r\\n            // or that we don't have it anymore (if NFT was sold through a marketplace).\\r\\n            // What about if nobody has claimed their proceeds from an old execution of the same NFT?\\r\\n            // They wouldn't be allowed to claim proceeds until the current execution NFT is sold.\\r\\n            // That's why the fee receiver should mark the execution as sold\\r\\n            // as soon as the NFT is gone (sold), for now only\\r\\n            // the fee receiver can receive the protocol sell fee. Do we need\\r\\n            // to allow external arbitragers?\\r\\n            // Another option is create a new contract per execution,\\r\\n            // so this new contract holds the NFT, WETH and the execution struct,\\r\\n            // would that be a bit more gas-expensive?\\r\\n            bool clowderOwnsTheNft = IERC721(execution.collection).ownerOf(\\r\\n                execution.tokenId\\r\\n            ) == address(this);\\r\\n            require(\\r\\n                execution.sold || !clowderOwnsTheNft,\\r\\n                \\\"PreClaim: NFT has not been sold nor ask has been taken\\\"\\r\\n            );\\r\\n            // Marking the execution as sold so future claimers don't need to\\r\\n            // rely on checking whether Clowder owns the NFT or not\\r\\n            if (!execution.sold) {\\r\\n                execution.sold = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimProceeds(uint256[] calldata executionIds, address to)\\r\\n        external\\r\\n    {\\r\\n        _preClaim(executionIds);\\r\\n\\r\\n        uint256 proceedsSum = 0;\\r\\n        // loop over the executions\\r\\n        for (uint256 i = 0; i < executionIds.length; i++) {\\r\\n            uint256 executionId = executionIds[i];\\r\\n            Execution storage execution = executions[executionId];\\r\\n\\r\\n            // transferring the WETH to the signer\\r\\n            uint256 realContribution = realContributions[msg.sender][\\r\\n                executionId\\r\\n            ];\\r\\n            uint256 price = execution.sellPrice;\\r\\n            // dust remains for the smart contract, that's ok\\r\\n            uint256 proceeds = (realContribution * price) / execution.buyPrice;\\r\\n            // to prevent double claiming:\\r\\n            realContributions[msg.sender][executionId] = 0;\\r\\n            proceedsSum += proceeds;\\r\\n        }\\r\\n        _safeTransferWETH(address(this), to, proceedsSum);\\r\\n    }\\r\\n\\r\\n    function claimProtocolFees(uint256[] calldata executionIds) external {\\r\\n        _preClaim(executionIds);\\r\\n\\r\\n        uint256 feesSum = 0;\\r\\n        // loop over the executions\\r\\n        for (uint256 i = 0; i < executionIds.length; i++) {\\r\\n            uint256 executionId = executionIds[i];\\r\\n            Execution storage execution = executions[executionId];\\r\\n\\r\\n            feesSum += execution.sellProtocolFee;\\r\\n            // marking it zero so the protocol fee receiever can't receive it again\\r\\n            execution.sellProtocolFee = 0;\\r\\n        }\\r\\n        _safeTransferWETH(address(this), protocolFeeReceiver, feesSum);\\r\\n    }\\r\\n\\r\\n    function _safeTransferWETH(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        SafeERC20Transfer.safeERC20Transfer(WETH, from, to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c183a97d39ea88b923758dbd9fa016a2af4991a98c2a209b6ae7f648e41c44c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/NftCollection.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nlibrary NftCollectionFunctions {\\r\\n\\r\\n    // interface IDs\\r\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    function transferNft(\\r\\n        address collection,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal {\\r\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\r\\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\\r\\n        } else {\\r\\n            revert(\\\"Collection does not support ERC721\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4d595340de0c0ca8ea311db1704f1e317bbe25ba0ed7f496c5504be4e00feadd\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SignatureUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\r\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\nlibrary SignatureUtil {\\r\\n    function verify(\\r\\n        bytes32 hash,\\r\\n        address signer,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s,\\r\\n        bytes32 domainSeparator\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"SignatureUtil: Invalid signer\\\");\\r\\n        bytes memory signature = abi.encodePacked(r, s, v);\\r\\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\\r\\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8bc4bf2343815c4e0d5af099cfce669c35c32dd3d4c379f0f460b48044e02451\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/assettransfer/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20Transfer {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function safeERC20Transfer(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount != 0) {\\r\\n            IERC20(token).safeTransferFrom(from, to, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe15515dccce559802b2f873507d5e1798564ec4a26fe8bb00859ca0bb1106561\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/execution/Execution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nstruct Execution {\\r\\n    address collection; // zero to evaluate as non-existant\\r\\n    uint256 buyPrice;\\r\\n    uint256 tokenId;\\r\\n    bool sold;\\r\\n    \\r\\n    /* Marketplace listing parameters */\\r\\n    uint256 sellPrice; // if not sold yet, this is the amount we will recieve\\r\\n    // from a marketplace in case it is listed for sale\\r\\n    uint256 listingEndTime; // expiration time of the listing\\r\\n    uint256 sellProtocolFee; // only has value when a marketplace listing happens\\r\\n    // otherwise it is zero because the protocol fee is transferred immediately\\r\\n    \\r\\n    /* Marketplace listing hashes */\\r\\n    bytes32 openSeaOrderHash;\\r\\n    bytes32 looksRareOrderHash;\\r\\n}\\r\\n\",\"keccak256\":\"0x390494b7a86217ab67effff754173baee2f7b66e22472427d358dd777e0a3303\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/passiveorders/BuyOrderV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {SignatureUtil} from \\\"./../SignatureUtil.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {Execution} from \\\"./../execution/Execution.sol\\\";\\r\\n\\r\\nusing BuyOrderV1Functions for BuyOrderV1 global;\\r\\n\\r\\n// DO NOT CHANGE the struct, create a new order file instead.\\r\\n// If chaging the struct is extremely necessary, don't forget to \\r\\n// update the hash constant and hash function below.\\r\\nstruct BuyOrderV1 {\\r\\n    \\r\\n    address signer; // order signer\\r\\n\\r\\n    // general order parameters\\r\\n    address collection; // collection address\\r\\n    uint256 executionId; // buy order execution id\\r\\n    uint256 contribution; // WETH contribution\\r\\n\\r\\n    // buy order parameters\\r\\n    uint256 buyPrice; // buy WETH price\\r\\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\\r\\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\\r\\n\\r\\n    // sell order parameters\\r\\n    uint256 sellPrice; // sell WETH price \\r\\n    uint256 sellPriceEndTime; // sell order expiration time (set 0 for omitting)\\r\\n    uint256 sellNonce;\\r\\n\\r\\n    // signature parameters\\r\\n    uint8 v;\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title PassiveTradeOrders\\r\\n * @notice\\r\\n */\\r\\nlibrary BuyOrderV1Functions {\\r\\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f;\\r\\n\\r\\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    PASSIVE_BUY_ORDER_HASH,\\r\\n                    passiveOrder.signer,\\r\\n                    passiveOrder.collection,\\r\\n                    passiveOrder.executionId,\\r\\n                    passiveOrder.contribution,\\r\\n                    passiveOrder.buyPrice,\\r\\n                    passiveOrder.buyPriceEndTime,\\r\\n                    passiveOrder.buyNonce,\\r\\n                    passiveOrder.sellPrice,\\r\\n                    passiveOrder.sellPriceEndTime,\\r\\n                    passiveOrder.sellNonce\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\r\\n        return passiveOrder.buyPrice >= price;\\r\\n    }\\r\\n    \\r\\n    function canAcceptSellPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\r\\n        return passiveOrder.sellPrice <= price;\\r\\n    }\\r\\n\\r\\n    \\r\\n    // Validate signatures (includes interaction with\\r\\n    // other contracts)\\r\\n    // Remember that we give away execution flow\\r\\n    // in case the signer is a contract (isValidSignature)\\r\\n    function validateSignatures(\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        bytes32 domainSeparator\\r\\n    ) public view {\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            BuyOrderV1 calldata order = orders[i];\\r\\n            // Validate order signature\\r\\n            bytes32 orderHash = hash(order);\\r\\n            require(\\r\\n                SignatureUtil.verify(\\r\\n                    orderHash,\\r\\n                    order.signer,\\r\\n                    order.v,\\r\\n                    order.r,\\r\\n                    order.s,\\r\\n                    domainSeparator\\r\\n                ),\\r\\n                \\\"Signature: Invalid\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function validateSellOrdersParameters(\\r\\n        mapping(address => mapping(uint256 => bool)) storage _isUsedSellNonce,\\r\\n        mapping(address => mapping(uint256 => uint256)) storage _realContributions,\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        uint256 executionId,\\r\\n        Execution storage execution,\\r\\n        uint256 price,\\r\\n        uint256 minConsensusForSellingOverBuyPrice,\\r\\n        uint256 minConsensusForSellingUnderOrEqualBuyPrice\\r\\n    ) public view returns (uint256) {\\r\\n        // mapping(address => mapping(uint256 => bool))\\r\\n        //     storage _isUsedSellNonce = isUsedSellNonce;\\r\\n        // mapping(address => mapping(uint256 => uint256))\\r\\n        //     storage _realContributions = realContributions;\\r\\n        // Execution storage execution = executions[executionId];\\r\\n\\r\\n        uint256 minExpirationTime = type(uint256).max;\\r\\n        uint256 realContributionOnBoard = 0;\\r\\n        // Validate orders parameters, no need to access state\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            BuyOrderV1 calldata order = orders[i];\\r\\n\\r\\n            // Validate the order is not expired\\r\\n            require(order.sellPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\r\\n            // Validate collection\\r\\n            require(\\r\\n                order.collection == execution.collection,\\r\\n                \\\"Order collection mismatch\\\"\\r\\n            );\\r\\n            // Validate executionId\\r\\n            require(\\r\\n                order.executionId == executionId,\\r\\n                \\\"Order executionId mismatch\\\"\\r\\n            );\\r\\n            // Validating that the signer has not voted yet\\r\\n            for (uint256 j = 0; j < i; j++) {\\r\\n                if (orders[j].signer == order.signer) {\\r\\n                    require(false, \\\"Signer already voted\\\");\\r\\n                }\\r\\n            }\\r\\n            // Validating price acceptance\\r\\n            require(\\r\\n                canAcceptSellPrice(order, price),\\r\\n                \\\"Order can't accept price\\\"\\r\\n            );\\r\\n            // updating the min expiration time\\r\\n            minExpirationTime = Math.min(\\r\\n                minExpirationTime,\\r\\n                order.sellPriceEndTime\\r\\n            );\\r\\n\\r\\n            /* State required for tne following lines */\\r\\n\\r\\n            // Validate order nonce usability\\r\\n            require(\\r\\n                !_isUsedSellNonce[order.signer][order.sellNonce],\\r\\n                \\\"Order nonce is unusable\\\"\\r\\n            );\\r\\n            // counting the \\\"votes\\\" in favor of this price\\r\\n            realContributionOnBoard += _realContributions[order.signer][\\r\\n                executionId\\r\\n            ];\\r\\n        } // ends the voters for loop\\r\\n\\r\\n        // Validating price consensus\\r\\n        if (price > execution.buyPrice) {\\r\\n            // we need at least N out of 10_000 consensus\\r\\n            require(\\r\\n                realContributionOnBoard * 10_000 >=\\r\\n                    execution.buyPrice *\\r\\n                        minConsensusForSellingOverBuyPrice,\\r\\n                \\\"Selling over or equal buyPrice: consensus not reached\\\"\\r\\n            );\\r\\n        } else {\\r\\n            // we need a different consensus ratio\\r\\n            require(\\r\\n                realContributionOnBoard * 10_000 >=\\r\\n                    execution.buyPrice * minConsensusForSellingUnderOrEqualBuyPrice,\\r\\n                \\\"Selling under buyPrice: consensus not reached\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return minExpirationTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74111343bfa9a5bfc3fd947b9e7fe76abe314a9bddea9e1c843a3982454c6752\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c0604052606460025560646003556113886004556127106005553480156200002757600080fd5b5060405162003005380380620030058339810160408190526200004a91620001ae565b620000553362000141565b600160068190556001600160a01b03928316608090815281546001600160a01b031916929093169190911790556040805180820182526003815262302e3160e81b60209182015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc34e769714204ec364edbdd9fbc375bf7fd2e3b10f22abaf631ea6006a288fa7818401527f8cd160c72d102a6747abd189ac21d4a1f802e3fcc1bb8fc78cc4d558df0c7c21606082015246938101939093523060a08085019190915282518085038201815260c090940190925282519201919091209052620001e6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001a957600080fd5b919050565b60008060408385031215620001c257600080fd5b620001cd8362000191565b9150620001dd6020840162000191565b90509250929050565b60805160a051612de4620002216000396000818161043601528181610bcc01526113580152600081816103ca01526118f20152612de46000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638bd150121161010f578063d02d7884116100a2578063f23a6e6111610071578063f23a6e6114610499578063f2fde38b146104b8578063f6f67125146104cb578063f76c9229146104de57600080fd5b8063d02d78841461041e578063dab400f314610431578063e711bf1b14610458578063e80453841461046b57600080fd5b8063ac8d590b116100de578063ac8d590b146103b2578063ad5c4648146103c5578063bc197c81146103ec578063bc7517241461040b57600080fd5b80638bd15012146103725780638da5cb5b1461037b5780639f9abd351461038c578063a9da9eac1461039f57600080fd5b806339a51be5116101875780635a2aa9d7116101565780635a2aa9d71461033b5780636c1438ca1461034e5780636dd7a34e14610357578063715018a61461036a57600080fd5b806339a51be5146102c65780633a0298eb146102f15780634bbe7882146102fa5780634c8a65761461030d57600080fd5b80631626ba7e116101c35780631626ba7e1461025e5780631a7eeff2146102715780631fce7d3714610284578063323d01e51461029b57600080fd5b806301ffc9a7146101ea5780630570490d14610212578063150b7a0214610227575b600080fd5b6101fd6101f83660046122b8565b610593565b60405190151581526020015b60405180910390f35b610225610220366004612319565b6105ca565b005b61024561023536600461245d565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610209565b61024561026c3660046124c8565b610663565b61022561027f366004612543565b610753565b61028d60045481565b604051908152602001610209565b61028d6102a9366004612599565b600960209081526000928352604080842090915290825290205481565b6001546102d9906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b61028d60025481565b6102256103083660046125c5565b610820565b6101fd61031b366004612599565b600860209081526000928352604080842090915290825290205460ff1681565b610225610349366004612319565b61086c565b61028d60035481565b6102256103653660046125e2565b6108f7565b610225610926565b61028d60055481565b6000546001600160a01b03166102d9565b61022561039a366004612640565b61095c565b6102256103ad3660046125e2565b610c71565b6102256103c036600461268b565b610ca0565b6102d97f000000000000000000000000000000000000000000000000000000000000000081565b6102456103fa36600461272f565b63bc197c8160e01b95945050505050565b6102256104193660046125e2565b610e61565b61022561042c3660046125e2565b610e90565b61028d7f000000000000000000000000000000000000000000000000000000000000000081565b610225610466366004612319565b610ebf565b6101fd610479366004612599565b600760209081526000928352604080842090915290825290205460ff1681565b6102456104a73660046127dc565b63f23a6e6160e01b95945050505050565b6102256104c63660046125c5565b610f4a565b6102256104d9366004612844565b610fe5565b6105456104ec3660046125e2565b600a602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b03909716979596949560ff909416949293919290919089565b604080516001600160a01b03909a168a5260208a0198909852968801959095529215156060870152608086019190915260a085015260c084015260e083015261010082015261012001610209565b60006001600160e01b03198216630271189760e51b14806105c457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105d48282611717565b6000805b828110156106455760008484838181106105f4576105f4612894565b9050602002013590506000600a6000838152602001908152602001600020905080600601548461062491906128c0565b9350600081600601819055505050808061063d906128d8565b9150506105d8565b5060015461065e9030906001600160a01b0316836118ed565b505050565b60008381036106ae5760405162461bcd60e51b8152602060048201526012602482015271048617368206d757374206e6f7420626520360741b60448201526064015b60405180910390fd5b60006106bd60208285876128f1565b6106c69161291b565b905060006106d86040602086886128f1565b6106e19161291b565b90508015801561070157506000828152600a602052604090206007015486145b80610727575080600114801561072757506000828152600a602052604090206008015486145b1561073e5750630b135d3f60e11b915061074c9050565b506001600160e01b03199150505b9392505050565b61075d8383611717565b6000805b8381101561080e57600085858381811061077d5761077d612894565b602090810292909201356000818152600a845260408082203383526009865281832084845290955281205460048501546001860154939650909350916107c38385612939565b6107cd9190612958565b33600090815260096020908152604080832089845290915281205590506107f481886128c0565b965050505050508080610806906128d8565b915050610761565b5061081a3083836118ed565b50505050565b6000546001600160a01b0316331461084a5760405162461bcd60e51b81526004016106a59061297a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b806108895760405162461bcd60e51b81526004016106a5906129af565b60005b8181101561065e573360009081526008602052604081206001918585858181106108b8576108b8612894565b90506020020135815260200190815260200160002060006101000a81548160ff02191690831515021790555080806108ef906128d8565b91505061088c565b6000546001600160a01b031633146109215760405162461bcd60e51b81526004016106a59061297a565b600355565b6000546001600160a01b031633146109505760405162461bcd60e51b81526004016106a59061297a565b61095a6000611919565b565b60026006540361097e5760405162461bcd60e51b81526004016106a5906129f6565b6002600655816109e25760405162461bcd60e51b815260206004820152602960248201527f4578656375746553656c6c3a204d7573742068617665206174206c656173742060448201526837b7329037b93232b960b91b60648201526084016106a5565b6000612710826003546109f59190612939565b6109ff9190612958565b90506000610a0d8284612a2d565b9050600085856000818110610a2457610a24612894565b6101a002919091016040908101356000818152600a60205291909120805491935091506001600160a01b0316610a9c5760405162461bcd60e51b815260206004820152601760248201527f457865637574696f6e20646f65736e277420657869737400000000000000000060448201526064016106a5565b600381015460ff1615610aea5760405162461bcd60e51b8152602060048201526016602482015275115e1958dd5d1a5bdb88185b1c9958591e481cdbdb1960521b60448201526064016106a5565b6004805460055460405163b95522d560e01b8152734A474aEeC191569aab95A8e5CCB397dbbE20e3739363b95522d593610b36936008936009938f938f938c938c938f93929101612b3a565b602060405180830381865af4158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b779190612b88565b50610b828787611969565b60038101805460ff19166001179055600480820184905560405163345a3d9f60e11b8152734A474aEeC191569aab95A8e5CCB397dbbE20e373916368b47b3e91610bf2918b918b917f00000000000000000000000000000000000000000000000000000000000000009101612ba1565b60006040518083038186803b158015610c0a57600080fd5b505af4158015610c1e573d6000803e3d6000fd5b50505050610c2d3330856118ed565b600154610c459033906001600160a01b0316866118ed565b80546002820154610c63916001600160a01b031690309033906119f6565b505060016006555050505050565b6000546001600160a01b03163314610c9b5760405162461bcd60e51b81526004016106a59061297a565b600555565b600260065403610cc25760405162461bcd60e51b81526004016106a5906129f6565b60026006556000828152600a6020526040902080546001600160a01b0316610d365760405162461bcd60e51b815260206004820152602160248201527f436c61696d4e66743a20457865637574696f6e20646f65736e277420657869736044820152601d60fa1b60648201526084016106a5565b600381015460ff1615610d8b5760405162461bcd60e51b815260206004820181905260248201527f436c61696d4e66743a20457865637574696f6e20616c726561647920736f6c6460448201526064016106a5565b6000838152600a60209081526040808320600301805460ff191660019081179091553384526009835281842087855290925290912054908201548114610e1d5760405162461bcd60e51b815260206004820152602160248201527f436c61696d4e66743a2077726f6e67207265616c20636f6e747269627574696f6044820152603760f91b60648201526084016106a5565b33600090815260096020908152604080832087845290915281205581546002830154610e56916001600160a01b031690309086906119f6565b505060016006555050565b6000546001600160a01b03163314610e8b5760405162461bcd60e51b81526004016106a59061297a565b600255565b6000546001600160a01b03163314610eba5760405162461bcd60e51b81526004016106a59061297a565b600455565b80610edc5760405162461bcd60e51b81526004016106a5906129af565b60005b8181101561065e57336000908152600760205260408120600191858585818110610f0b57610f0b612894565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610f42906128d8565b915050610edf565b6000546001600160a01b03163314610f745760405162461bcd60e51b81526004016106a59061297a565b6001600160a01b038116610fd95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106a5565b610fe281611919565b50565b6002600654036110075760405162461bcd60e51b81526004016106a5906129f6565b6002600655826110675760405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b60648201526084016106a5565b60006127108360025461107a9190612939565b6110849190612958565b9050600061109282856128c0565b90506000868660008181106110a9576110a9612894565b90506101a0020160200160208101906110c291906125c5565b90506000878760008181106110d9576110d9612894565b60406101a0909102929092018201356000818152600a6020529290922054919250506001600160a01b0316156111515760405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c72656164792065786563757465640000000060448201526064016106a5565b60408051610120810182526001600160a01b03848116825260208083018781528385018a81526000606086018181526080870182815260a0880183815260c0890184815260e08a018581526101008b018681528d8752600a9099529a852099518a546001600160a01b031916991698909817895594516001890155925160028801555160038701805460ff191691151591909117905590516004860155905160058501559151600684015592516007830155915160089091015580805b8981101561163b57368b8b8381811061122957611229612894565b6101a00291909101915060079050600061124660208401846125c5565b6001600160a01b031681526020808201929092526040908101600090812060c0850135825290925290205460ff16156112c15760405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c6500000000000000000060448201526064016106a5565b6001600760006112d460208501856125c5565b6001600160a01b031681526020808201929092526040908101600090812060c086013582529092528120805460ff19169215159290921790915561132561132036849003840184612bc5565b611b2c565b905061137c8161133860208501856125c5565b61134a61016086016101408701612c81565b8561016001358661018001357f0000000000000000000000000000000000000000000000000000000000000000611c0d565b6113bd5760405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b60448201526064016106a5565b428260a0013510156114015760405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b60448201526064016106a5565b61141d8861141436859003850185612bc5565b60800151101590565b6114695760405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e277420616363657074207072696365000000000000000060448201526064016106a5565b6001600160a01b03871661148360408401602085016125c5565b6001600160a01b0316146114d95760405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d617463680000000000000060448201526064016106a5565b8582604001351461152c5760405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d6174636800000000000060448201526064016106a5565b60608201356000611546611540888d612a2d565b83611ce4565b905061155281886128c0565b965061157661156460208601866125c5565b6001546001600160a01b0316836118ed565b6000611596878f6115879190612a2d565b6115918486612a2d565b611ce4565b90506115a281886128c0565b96506115bb6115b460208701876125c5565b33836118ed565b60006115c782846128c0565b905080600960006115db60208a018a6125c5565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c8152602001908152602001600020600082825461161b91906128c0565b925050819055505050505050508080611633906128d8565b91505061120e565b5085821461169a5760405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b60648201526084016106a5565b8781146116fa5760405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b60648201526084016106a5565b6117068433308a6119f6565b505060016006555050505050505050565b60005b8181101561065e57600083838381811061173657611736612894565b602090810292909201356000818152600a90935260409092208054929350916001600160a01b031690506117b65760405162461bcd60e51b815260206004820152602160248201527f507265436c61696d3a20457865637574696f6e20646f65736e277420657869736044820152601d60fa1b60648201526084016106a5565b805460028201546040516331a9108f60e11b8152600481019190915260009130916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d9190612c9c565b60038401546001600160a01b039190911691909114915060ff1680611850575080155b6118bb5760405162461bcd60e51b815260206004820152603660248201527f507265436c61696d3a204e465420686173206e6f74206265656e20736f6c64206044820152753737b91030b9b5903430b9903132b2b7103a30b5b2b760511b60648201526084016106a5565b600382015460ff166118d75760038201805460ff191660011790555b50505080806118e5906128d8565b91505061171a565b61065e7f0000000000000000000000000000000000000000000000000000000000000000848484611cfa565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b8181101561065e573683838381811061198757611987612894565b6101a00291909101915060019050600860006119a660208501856125c5565b6001600160a01b03168152602080820192909252604090810160009081206101209590950135815293909152909120805460ff1916911515919091179055806119ee816128d8565b91505061196c565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a659190612cb9565b15611ad957604051632142170760e11b81526001600160a01b0384811660048301528381166024830152604482018390528516906342842e0e90606401600060405180830381600087803b158015611abc57600080fd5b505af1158015611ad0573d6000803e3d6000fd5b5050505061081a565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b60648201526084016106a5565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c0151975160009b611bf09b7f72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f9b919a919998979695949392019a8b526001600160a01b03998a1660208c01529790981660408a01526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301919091526101408201526101600190565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b038616611c655760405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e657200000060448201526064016106a5565b6040805160208082018790528183018690526001600160f81b031960f889901b1660608301528251808303604101815260618301845261190160f01b60818401526083830186905260a38084018c90528451808503909101815260c39093019093528151910120611cd7888284611d15565b9998505050505050505050565b6000818310611cf3578161074c565b5090919050565b801561081a5761081a6001600160a01b038516848484611e61565b6000806000611d248585611ebb565b90925090506000816004811115611d3d57611d3d612cdb565b148015611d5b5750856001600160a01b0316826001600160a01b0316145b15611d6b5760019250505061074c565b600080876001600160a01b0316631626ba7e60e01b8888604051602401611d93929190612d49565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611dd19190612d62565b600060405180830381855afa9150503d8060008114611e0c576040519150601f19603f3d011682016040523d82523d6000602084013e611e11565b606091505b5091509150818015611e24575080516020145b8015611e5557508051630b135d3f60e11b90611e499083016020908101908401612d7e565b6001600160e01b031916145b98975050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261081a908590611f29565b6000808251604103611ef15760208301516040840151606085015160001a611ee587828585611ffb565b94509450505050611f22565b8251604003611f1a5760208301516040840151611f0f8683836120e8565b935093505050611f22565b506000905060025b9250929050565b6000611f7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121219092919063ffffffff16565b80519091501561065e5780806020019051810190611f9c9190612cb9565b61065e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106a5565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561203257506000905060036120df565b8460ff16601b1415801561204a57508460ff16601c14155b1561205b57506000905060046120df565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156120af573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120d8576000600192509250506120df565b9150600090505b94509492505050565b6000806001600160ff1b0383168161210560ff86901c601b6128c0565b905061211387828885611ffb565b935093505050935093915050565b60606121308484600085612138565b949350505050565b6060824710156121995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106a5565b6001600160a01b0385163b6121f05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a5565b600080866001600160a01b0316858760405161220c9190612d62565b60006040518083038185875af1925050503d8060008114612249576040519150601f19603f3d011682016040523d82523d6000602084013e61224e565b606091505b509150915061225e828286612269565b979650505050505050565b6060831561227857508161074c565b8251156122885782518084602001fd5b8160405162461bcd60e51b81526004016106a59190612d9b565b6001600160e01b031981168114610fe257600080fd5b6000602082840312156122ca57600080fd5b813561074c816122a2565b60008083601f8401126122e757600080fd5b5081356001600160401b038111156122fe57600080fd5b6020830191508360208260051b8501011115611f2257600080fd5b6000806020838503121561232c57600080fd5b82356001600160401b0381111561234257600080fd5b61234e858286016122d5565b90969095509350505050565b6001600160a01b0381168114610fe257600080fd5b803561237a8161235a565b919050565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156123b8576123b861237f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156123e6576123e661237f565b604052919050565b600082601f8301126123ff57600080fd5b81356001600160401b038111156124185761241861237f565b61242b601f8201601f19166020016123be565b81815284602083860101111561244057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561247357600080fd5b843561247e8161235a565b9350602085013561248e8161235a565b92506040850135915060608501356001600160401b038111156124b057600080fd5b6124bc878288016123ee565b91505092959194509250565b6000806000604084860312156124dd57600080fd5b8335925060208401356001600160401b03808211156124fb57600080fd5b818601915086601f83011261250f57600080fd5b81358181111561251e57600080fd5b87602082850101111561253057600080fd5b6020830194508093505050509250925092565b60008060006040848603121561255857600080fd5b83356001600160401b0381111561256e57600080fd5b61257a868287016122d5565b909450925050602084013561258e8161235a565b809150509250925092565b600080604083850312156125ac57600080fd5b82356125b78161235a565b946020939093013593505050565b6000602082840312156125d757600080fd5b813561074c8161235a565b6000602082840312156125f457600080fd5b5035919050565b60008083601f84011261260d57600080fd5b5081356001600160401b0381111561262457600080fd5b6020830191508360206101a083028501011115611f2257600080fd5b60008060006040848603121561265557600080fd5b83356001600160401b0381111561266b57600080fd5b612677868287016125fb565b909790965060209590950135949350505050565b6000806040838503121561269e57600080fd5b8235915060208301356126b08161235a565b809150509250929050565b600082601f8301126126cc57600080fd5b813560206001600160401b038211156126e7576126e761237f565b8160051b6126f68282016123be565b928352848101820192828101908785111561271057600080fd5b83870192505b8483101561225e57823582529183019190830190612716565b600080600080600060a0868803121561274757600080fd5b85356127528161235a565b945060208601356127628161235a565b935060408601356001600160401b038082111561277e57600080fd5b61278a89838a016126bb565b945060608801359150808211156127a057600080fd5b6127ac89838a016126bb565b935060808801359150808211156127c257600080fd5b506127cf888289016123ee565b9150509295509295909350565b600080600080600060a086880312156127f457600080fd5b85356127ff8161235a565b9450602086013561280f8161235a565b9350604086013592506060860135915060808601356001600160401b0381111561283857600080fd5b6127cf888289016123ee565b6000806000806060858703121561285a57600080fd5b84356001600160401b0381111561287057600080fd5b61287c878288016125fb565b90989097506020870135966040013595509350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156128d3576128d36128aa565b500190565b6000600182016128ea576128ea6128aa565b5060010190565b6000808585111561290157600080fd5b8386111561290e57600080fd5b5050820193919092039150565b803560208310156105c457600019602084900360031b1b1692915050565b6000816000190483118215151615612953576129536128aa565b500290565b60008261297557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60408201526665206e6f6e636560c81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082821015612a3f57612a3f6128aa565b500390565b803560ff8116811461237a57600080fd5b8183526000602080850194508260005b85811015612b2f57612a8787612a7a8461236f565b6001600160a01b03169052565b612a9283830161236f565b6001600160a01b03168388015260408281013590880152606080830135908801526080808301359088015260a0808301359088015260c0808301359088015260e0808301359088015261010080830135908801526101208083013590880152610140612aff818401612a44565b60ff1690880152610160828101359088015261018080830135908801526101a09687019690910190600101612a65565b509495945050505050565b60006101008b83528a6020840152806040840152612b5b8184018a8c612a55565b60608401989098525050608081019490945260a084019290925260c083015260e090910152949350505050565b600060208284031215612b9a57600080fd5b5051919050565b604081526000612bb5604083018587612a55565b9050826020830152949350505050565b60006101a08284031215612bd857600080fd5b612be0612395565b612be98361236f565b8152612bf76020840161236f565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140612c5e818501612a44565b908201526101608381013590820152610180928301359281019290925250919050565b600060208284031215612c9357600080fd5b61074c82612a44565b600060208284031215612cae57600080fd5b815161074c8161235a565b600060208284031215612ccb57600080fd5b8151801515811461074c57600080fd5b634e487b7160e01b600052602160045260246000fd5b60005b83811015612d0c578181015183820152602001612cf4565b8381111561081a5750506000910152565b60008151808452612d35816020860160208601612cf1565b601f01601f19169290920160200192915050565b8281526040602082015260006121306040830184612d1d565b60008251612d74818460208701612cf1565b9190910192915050565b600060208284031215612d9057600080fd5b815161074c816122a2565b60208152600061074c6020830184612d1d56fea26469706673582212205a1055be0067460fb1ab0a144a8c4c9f205ea02cd70c981a69d0428ed0dfea8364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638bd150121161010f578063d02d7884116100a2578063f23a6e6111610071578063f23a6e6114610499578063f2fde38b146104b8578063f6f67125146104cb578063f76c9229146104de57600080fd5b8063d02d78841461041e578063dab400f314610431578063e711bf1b14610458578063e80453841461046b57600080fd5b8063ac8d590b116100de578063ac8d590b146103b2578063ad5c4648146103c5578063bc197c81146103ec578063bc7517241461040b57600080fd5b80638bd15012146103725780638da5cb5b1461037b5780639f9abd351461038c578063a9da9eac1461039f57600080fd5b806339a51be5116101875780635a2aa9d7116101565780635a2aa9d71461033b5780636c1438ca1461034e5780636dd7a34e14610357578063715018a61461036a57600080fd5b806339a51be5146102c65780633a0298eb146102f15780634bbe7882146102fa5780634c8a65761461030d57600080fd5b80631626ba7e116101c35780631626ba7e1461025e5780631a7eeff2146102715780631fce7d3714610284578063323d01e51461029b57600080fd5b806301ffc9a7146101ea5780630570490d14610212578063150b7a0214610227575b600080fd5b6101fd6101f83660046122b8565b610593565b60405190151581526020015b60405180910390f35b610225610220366004612319565b6105ca565b005b61024561023536600461245d565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610209565b61024561026c3660046124c8565b610663565b61022561027f366004612543565b610753565b61028d60045481565b604051908152602001610209565b61028d6102a9366004612599565b600960209081526000928352604080842090915290825290205481565b6001546102d9906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b61028d60025481565b6102256103083660046125c5565b610820565b6101fd61031b366004612599565b600860209081526000928352604080842090915290825290205460ff1681565b610225610349366004612319565b61086c565b61028d60035481565b6102256103653660046125e2565b6108f7565b610225610926565b61028d60055481565b6000546001600160a01b03166102d9565b61022561039a366004612640565b61095c565b6102256103ad3660046125e2565b610c71565b6102256103c036600461268b565b610ca0565b6102d97f000000000000000000000000000000000000000000000000000000000000000081565b6102456103fa36600461272f565b63bc197c8160e01b95945050505050565b6102256104193660046125e2565b610e61565b61022561042c3660046125e2565b610e90565b61028d7f000000000000000000000000000000000000000000000000000000000000000081565b610225610466366004612319565b610ebf565b6101fd610479366004612599565b600760209081526000928352604080842090915290825290205460ff1681565b6102456104a73660046127dc565b63f23a6e6160e01b95945050505050565b6102256104c63660046125c5565b610f4a565b6102256104d9366004612844565b610fe5565b6105456104ec3660046125e2565b600a602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b03909716979596949560ff909416949293919290919089565b604080516001600160a01b03909a168a5260208a0198909852968801959095529215156060870152608086019190915260a085015260c084015260e083015261010082015261012001610209565b60006001600160e01b03198216630271189760e51b14806105c457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105d48282611717565b6000805b828110156106455760008484838181106105f4576105f4612894565b9050602002013590506000600a6000838152602001908152602001600020905080600601548461062491906128c0565b9350600081600601819055505050808061063d906128d8565b9150506105d8565b5060015461065e9030906001600160a01b0316836118ed565b505050565b60008381036106ae5760405162461bcd60e51b8152602060048201526012602482015271048617368206d757374206e6f7420626520360741b60448201526064015b60405180910390fd5b60006106bd60208285876128f1565b6106c69161291b565b905060006106d86040602086886128f1565b6106e19161291b565b90508015801561070157506000828152600a602052604090206007015486145b80610727575080600114801561072757506000828152600a602052604090206008015486145b1561073e5750630b135d3f60e11b915061074c9050565b506001600160e01b03199150505b9392505050565b61075d8383611717565b6000805b8381101561080e57600085858381811061077d5761077d612894565b602090810292909201356000818152600a845260408082203383526009865281832084845290955281205460048501546001860154939650909350916107c38385612939565b6107cd9190612958565b33600090815260096020908152604080832089845290915281205590506107f481886128c0565b965050505050508080610806906128d8565b915050610761565b5061081a3083836118ed565b50505050565b6000546001600160a01b0316331461084a5760405162461bcd60e51b81526004016106a59061297a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b806108895760405162461bcd60e51b81526004016106a5906129af565b60005b8181101561065e573360009081526008602052604081206001918585858181106108b8576108b8612894565b90506020020135815260200190815260200160002060006101000a81548160ff02191690831515021790555080806108ef906128d8565b91505061088c565b6000546001600160a01b031633146109215760405162461bcd60e51b81526004016106a59061297a565b600355565b6000546001600160a01b031633146109505760405162461bcd60e51b81526004016106a59061297a565b61095a6000611919565b565b60026006540361097e5760405162461bcd60e51b81526004016106a5906129f6565b6002600655816109e25760405162461bcd60e51b815260206004820152602960248201527f4578656375746553656c6c3a204d7573742068617665206174206c656173742060448201526837b7329037b93232b960b91b60648201526084016106a5565b6000612710826003546109f59190612939565b6109ff9190612958565b90506000610a0d8284612a2d565b9050600085856000818110610a2457610a24612894565b6101a002919091016040908101356000818152600a60205291909120805491935091506001600160a01b0316610a9c5760405162461bcd60e51b815260206004820152601760248201527f457865637574696f6e20646f65736e277420657869737400000000000000000060448201526064016106a5565b600381015460ff1615610aea5760405162461bcd60e51b8152602060048201526016602482015275115e1958dd5d1a5bdb88185b1c9958591e481cdbdb1960521b60448201526064016106a5565b6004805460055460405163b95522d560e01b815273__$212d7bd68238178e559b7980cfdcd62a2c$__9363b95522d593610b36936008936009938f938f938c938c938f93929101612b3a565b602060405180830381865af4158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b779190612b88565b50610b828787611969565b60038101805460ff19166001179055600480820184905560405163345a3d9f60e11b815273__$212d7bd68238178e559b7980cfdcd62a2c$__916368b47b3e91610bf2918b918b917f00000000000000000000000000000000000000000000000000000000000000009101612ba1565b60006040518083038186803b158015610c0a57600080fd5b505af4158015610c1e573d6000803e3d6000fd5b50505050610c2d3330856118ed565b600154610c459033906001600160a01b0316866118ed565b80546002820154610c63916001600160a01b031690309033906119f6565b505060016006555050505050565b6000546001600160a01b03163314610c9b5760405162461bcd60e51b81526004016106a59061297a565b600555565b600260065403610cc25760405162461bcd60e51b81526004016106a5906129f6565b60026006556000828152600a6020526040902080546001600160a01b0316610d365760405162461bcd60e51b815260206004820152602160248201527f436c61696d4e66743a20457865637574696f6e20646f65736e277420657869736044820152601d60fa1b60648201526084016106a5565b600381015460ff1615610d8b5760405162461bcd60e51b815260206004820181905260248201527f436c61696d4e66743a20457865637574696f6e20616c726561647920736f6c6460448201526064016106a5565b6000838152600a60209081526040808320600301805460ff191660019081179091553384526009835281842087855290925290912054908201548114610e1d5760405162461bcd60e51b815260206004820152602160248201527f436c61696d4e66743a2077726f6e67207265616c20636f6e747269627574696f6044820152603760f91b60648201526084016106a5565b33600090815260096020908152604080832087845290915281205581546002830154610e56916001600160a01b031690309086906119f6565b505060016006555050565b6000546001600160a01b03163314610e8b5760405162461bcd60e51b81526004016106a59061297a565b600255565b6000546001600160a01b03163314610eba5760405162461bcd60e51b81526004016106a59061297a565b600455565b80610edc5760405162461bcd60e51b81526004016106a5906129af565b60005b8181101561065e57336000908152600760205260408120600191858585818110610f0b57610f0b612894565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610f42906128d8565b915050610edf565b6000546001600160a01b03163314610f745760405162461bcd60e51b81526004016106a59061297a565b6001600160a01b038116610fd95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106a5565b610fe281611919565b50565b6002600654036110075760405162461bcd60e51b81526004016106a5906129f6565b6002600655826110675760405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b60648201526084016106a5565b60006127108360025461107a9190612939565b6110849190612958565b9050600061109282856128c0565b90506000868660008181106110a9576110a9612894565b90506101a0020160200160208101906110c291906125c5565b90506000878760008181106110d9576110d9612894565b60406101a0909102929092018201356000818152600a6020529290922054919250506001600160a01b0316156111515760405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c72656164792065786563757465640000000060448201526064016106a5565b60408051610120810182526001600160a01b03848116825260208083018781528385018a81526000606086018181526080870182815260a0880183815260c0890184815260e08a018581526101008b018681528d8752600a9099529a852099518a546001600160a01b031916991698909817895594516001890155925160028801555160038701805460ff191691151591909117905590516004860155905160058501559151600684015592516007830155915160089091015580805b8981101561163b57368b8b8381811061122957611229612894565b6101a00291909101915060079050600061124660208401846125c5565b6001600160a01b031681526020808201929092526040908101600090812060c0850135825290925290205460ff16156112c15760405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c6500000000000000000060448201526064016106a5565b6001600760006112d460208501856125c5565b6001600160a01b031681526020808201929092526040908101600090812060c086013582529092528120805460ff19169215159290921790915561132561132036849003840184612bc5565b611b2c565b905061137c8161133860208501856125c5565b61134a61016086016101408701612c81565b8561016001358661018001357f0000000000000000000000000000000000000000000000000000000000000000611c0d565b6113bd5760405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b60448201526064016106a5565b428260a0013510156114015760405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b60448201526064016106a5565b61141d8861141436859003850185612bc5565b60800151101590565b6114695760405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e277420616363657074207072696365000000000000000060448201526064016106a5565b6001600160a01b03871661148360408401602085016125c5565b6001600160a01b0316146114d95760405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d617463680000000000000060448201526064016106a5565b8582604001351461152c5760405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d6174636800000000000060448201526064016106a5565b60608201356000611546611540888d612a2d565b83611ce4565b905061155281886128c0565b965061157661156460208601866125c5565b6001546001600160a01b0316836118ed565b6000611596878f6115879190612a2d565b6115918486612a2d565b611ce4565b90506115a281886128c0565b96506115bb6115b460208701876125c5565b33836118ed565b60006115c782846128c0565b905080600960006115db60208a018a6125c5565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c8152602001908152602001600020600082825461161b91906128c0565b925050819055505050505050508080611633906128d8565b91505061120e565b5085821461169a5760405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b60648201526084016106a5565b8781146116fa5760405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b60648201526084016106a5565b6117068433308a6119f6565b505060016006555050505050505050565b60005b8181101561065e57600083838381811061173657611736612894565b602090810292909201356000818152600a90935260409092208054929350916001600160a01b031690506117b65760405162461bcd60e51b815260206004820152602160248201527f507265436c61696d3a20457865637574696f6e20646f65736e277420657869736044820152601d60fa1b60648201526084016106a5565b805460028201546040516331a9108f60e11b8152600481019190915260009130916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d9190612c9c565b60038401546001600160a01b039190911691909114915060ff1680611850575080155b6118bb5760405162461bcd60e51b815260206004820152603660248201527f507265436c61696d3a204e465420686173206e6f74206265656e20736f6c64206044820152753737b91030b9b5903430b9903132b2b7103a30b5b2b760511b60648201526084016106a5565b600382015460ff166118d75760038201805460ff191660011790555b50505080806118e5906128d8565b91505061171a565b61065e7f0000000000000000000000000000000000000000000000000000000000000000848484611cfa565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b8181101561065e573683838381811061198757611987612894565b6101a00291909101915060019050600860006119a660208501856125c5565b6001600160a01b03168152602080820192909252604090810160009081206101209590950135815293909152909120805460ff1916911515919091179055806119ee816128d8565b91505061196c565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a659190612cb9565b15611ad957604051632142170760e11b81526001600160a01b0384811660048301528381166024830152604482018390528516906342842e0e90606401600060405180830381600087803b158015611abc57600080fd5b505af1158015611ad0573d6000803e3d6000fd5b5050505061081a565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b60648201526084016106a5565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c0151975160009b611bf09b7f72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f9b919a919998979695949392019a8b526001600160a01b03998a1660208c01529790981660408a01526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301919091526101408201526101600190565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b038616611c655760405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e657200000060448201526064016106a5565b6040805160208082018790528183018690526001600160f81b031960f889901b1660608301528251808303604101815260618301845261190160f01b60818401526083830186905260a38084018c90528451808503909101815260c39093019093528151910120611cd7888284611d15565b9998505050505050505050565b6000818310611cf3578161074c565b5090919050565b801561081a5761081a6001600160a01b038516848484611e61565b6000806000611d248585611ebb565b90925090506000816004811115611d3d57611d3d612cdb565b148015611d5b5750856001600160a01b0316826001600160a01b0316145b15611d6b5760019250505061074c565b600080876001600160a01b0316631626ba7e60e01b8888604051602401611d93929190612d49565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611dd19190612d62565b600060405180830381855afa9150503d8060008114611e0c576040519150601f19603f3d011682016040523d82523d6000602084013e611e11565b606091505b5091509150818015611e24575080516020145b8015611e5557508051630b135d3f60e11b90611e499083016020908101908401612d7e565b6001600160e01b031916145b98975050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261081a908590611f29565b6000808251604103611ef15760208301516040840151606085015160001a611ee587828585611ffb565b94509450505050611f22565b8251604003611f1a5760208301516040840151611f0f8683836120e8565b935093505050611f22565b506000905060025b9250929050565b6000611f7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121219092919063ffffffff16565b80519091501561065e5780806020019051810190611f9c9190612cb9565b61065e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106a5565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561203257506000905060036120df565b8460ff16601b1415801561204a57508460ff16601c14155b1561205b57506000905060046120df565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156120af573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166120d8576000600192509250506120df565b9150600090505b94509492505050565b6000806001600160ff1b0383168161210560ff86901c601b6128c0565b905061211387828885611ffb565b935093505050935093915050565b60606121308484600085612138565b949350505050565b6060824710156121995760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106a5565b6001600160a01b0385163b6121f05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a5565b600080866001600160a01b0316858760405161220c9190612d62565b60006040518083038185875af1925050503d8060008114612249576040519150601f19603f3d011682016040523d82523d6000602084013e61224e565b606091505b509150915061225e828286612269565b979650505050505050565b6060831561227857508161074c565b8251156122885782518084602001fd5b8160405162461bcd60e51b81526004016106a59190612d9b565b6001600160e01b031981168114610fe257600080fd5b6000602082840312156122ca57600080fd5b813561074c816122a2565b60008083601f8401126122e757600080fd5b5081356001600160401b038111156122fe57600080fd5b6020830191508360208260051b8501011115611f2257600080fd5b6000806020838503121561232c57600080fd5b82356001600160401b0381111561234257600080fd5b61234e858286016122d5565b90969095509350505050565b6001600160a01b0381168114610fe257600080fd5b803561237a8161235a565b919050565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156123b8576123b861237f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156123e6576123e661237f565b604052919050565b600082601f8301126123ff57600080fd5b81356001600160401b038111156124185761241861237f565b61242b601f8201601f19166020016123be565b81815284602083860101111561244057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561247357600080fd5b843561247e8161235a565b9350602085013561248e8161235a565b92506040850135915060608501356001600160401b038111156124b057600080fd5b6124bc878288016123ee565b91505092959194509250565b6000806000604084860312156124dd57600080fd5b8335925060208401356001600160401b03808211156124fb57600080fd5b818601915086601f83011261250f57600080fd5b81358181111561251e57600080fd5b87602082850101111561253057600080fd5b6020830194508093505050509250925092565b60008060006040848603121561255857600080fd5b83356001600160401b0381111561256e57600080fd5b61257a868287016122d5565b909450925050602084013561258e8161235a565b809150509250925092565b600080604083850312156125ac57600080fd5b82356125b78161235a565b946020939093013593505050565b6000602082840312156125d757600080fd5b813561074c8161235a565b6000602082840312156125f457600080fd5b5035919050565b60008083601f84011261260d57600080fd5b5081356001600160401b0381111561262457600080fd5b6020830191508360206101a083028501011115611f2257600080fd5b60008060006040848603121561265557600080fd5b83356001600160401b0381111561266b57600080fd5b612677868287016125fb565b909790965060209590950135949350505050565b6000806040838503121561269e57600080fd5b8235915060208301356126b08161235a565b809150509250929050565b600082601f8301126126cc57600080fd5b813560206001600160401b038211156126e7576126e761237f565b8160051b6126f68282016123be565b928352848101820192828101908785111561271057600080fd5b83870192505b8483101561225e57823582529183019190830190612716565b600080600080600060a0868803121561274757600080fd5b85356127528161235a565b945060208601356127628161235a565b935060408601356001600160401b038082111561277e57600080fd5b61278a89838a016126bb565b945060608801359150808211156127a057600080fd5b6127ac89838a016126bb565b935060808801359150808211156127c257600080fd5b506127cf888289016123ee565b9150509295509295909350565b600080600080600060a086880312156127f457600080fd5b85356127ff8161235a565b9450602086013561280f8161235a565b9350604086013592506060860135915060808601356001600160401b0381111561283857600080fd5b6127cf888289016123ee565b6000806000806060858703121561285a57600080fd5b84356001600160401b0381111561287057600080fd5b61287c878288016125fb565b90989097506020870135966040013595509350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156128d3576128d36128aa565b500190565b6000600182016128ea576128ea6128aa565b5060010190565b6000808585111561290157600080fd5b8386111561290e57600080fd5b5050820193919092039150565b803560208310156105c457600019602084900360031b1b1692915050565b6000816000190483118215151615612953576129536128aa565b500290565b60008261297557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60408201526665206e6f6e636560c81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082821015612a3f57612a3f6128aa565b500390565b803560ff8116811461237a57600080fd5b8183526000602080850194508260005b85811015612b2f57612a8787612a7a8461236f565b6001600160a01b03169052565b612a9283830161236f565b6001600160a01b03168388015260408281013590880152606080830135908801526080808301359088015260a0808301359088015260c0808301359088015260e0808301359088015261010080830135908801526101208083013590880152610140612aff818401612a44565b60ff1690880152610160828101359088015261018080830135908801526101a09687019690910190600101612a65565b509495945050505050565b60006101008b83528a6020840152806040840152612b5b8184018a8c612a55565b60608401989098525050608081019490945260a084019290925260c083015260e090910152949350505050565b600060208284031215612b9a57600080fd5b5051919050565b604081526000612bb5604083018587612a55565b9050826020830152949350505050565b60006101a08284031215612bd857600080fd5b612be0612395565b612be98361236f565b8152612bf76020840161236f565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140612c5e818501612a44565b908201526101608381013590820152610180928301359281019290925250919050565b600060208284031215612c9357600080fd5b61074c82612a44565b600060208284031215612cae57600080fd5b815161074c8161235a565b600060208284031215612ccb57600080fd5b8151801515811461074c57600080fd5b634e487b7160e01b600052602160045260246000fd5b60005b83811015612d0c578181015183820152602001612cf4565b8381111561081a5750506000910152565b60008151808452612d35816020860160208601612cf1565b601f01601f19169290920160200192915050565b8281526040602082015260006121306040830184612d1d565b60008251612d74818460208701612cf1565b9190910192915050565b600060208284031215612d9057600080fd5b815161074c816122a2565b60208152600061074c6020830184612d1d56fea26469706673582212205a1055be0067460fb1ab0a144a8c4c9f205ea02cd70c981a69d0428ed0dfea8364736f6c634300080d0033",
  "libraries": {
    "BuyOrderV1Functions": "0x4A474aEeC191569aab95A8e5CCB397dbbE20e373"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFeeFraction(uint256)": {
        "params": {
          "_protocolFeeFraction": "new fee fraction (out of 10_000)"
        }
      },
      "changeProtocolFeeFractionFromSelling(uint256)": {
        "params": {
          "_protocolFeeFractionFromSelling": "new fee fraction (out of 10_000)"
        }
      },
      "changeProtocolFeeReceiver(address)": {
        "params": {
          "_protocolFeeReceiver": "new receiver"
        }
      },
      "changeminConsensusForSellingOverBuyPrice(uint256)": {
        "params": {
          "_minConsensusForSellingOverBuyPrice": "new min consensus (out of 10_000)"
        }
      },
      "changeminConsensusForSellingUnderOrEqualBuyPrice(uint256)": {
        "params": {
          "_minConsensusForSellingUnderOrEqualBuyPrice": "new min consensus (out of 10_000)"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFeeFraction(uint256)": {
        "notice": "[onlyOwner] Change the protocol fee fraction"
      },
      "changeProtocolFeeFractionFromSelling(uint256)": {
        "notice": "[onlyOwner] Change the protocol fee fraction from selling"
      },
      "changeProtocolFeeReceiver(address)": {
        "notice": "[onlyOwner] Change the protocol fee receiver"
      },
      "changeminConsensusForSellingOverBuyPrice(uint256)": {
        "notice": "[onlyOwner] Change the min consensus for selling over or equal to buy price"
      },
      "changeminConsensusForSellingUnderOrEqualBuyPrice(uint256)": {
        "notice": "[onlyOwner] Change the min consensus for selling under buy price"
      },
      "executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256)": {
        "notice": "Executes on an array of passive buy orders"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 550,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4737,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4740,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeFraction",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4743,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeFractionFromSelling",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4746,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "minConsensusForSellingOverBuyPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4749,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "minConsensusForSellingUnderOrEqualBuyPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 764,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4835,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "isUsedBuyNonce",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4841,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "isUsedSellNonce",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4847,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "realContributions",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4852,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "executions",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Execution)6056_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Execution)6056_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Execution)",
        "numberOfBytes": "32",
        "value": "t_struct(Execution)6056_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Execution)6056_storage": {
        "encoding": "inplace",
        "label": "struct Execution",
        "members": [
          {
            "astId": 6039,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "collection",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6041,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "buyPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6043,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6045,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "sold",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 6047,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "sellPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6049,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "listingEndTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6051,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "sellProtocolFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6053,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "openSeaOrderHash",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 6055,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "looksRareOrderHash",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}