{
  "address": "0x1ee3e77A522DfD7fAf626373D1B1Dcf5A29297BF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "buyOrderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeFraction",
          "type": "uint256"
        }
      ],
      "name": "changeProtocolFeeFraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "name": "changeProtocolFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "buyOrders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "executeOnPassiveBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "executions",
      "outputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isUsedBuyNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "realContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6cde8fdf3d0388f55de56e6f23caed42a1f48f36833cb225c2d866a94c50c21",
  "receipt": {
    "to": null,
    "from": "0x346a7F06100A606eEA152f2281847Fa80f841894",
    "contractAddress": "0x1ee3e77A522DfD7fAf626373D1B1Dcf5A29297BF",
    "transactionIndex": 116,
    "gasUsed": "1607768",
    "logsBloom": "0x
    "blockHash": "0xbea2700a3de68390b6888ee3e637048069efe436e596c5890c500b18f2ebfcf8",
    "transactionHash": "0xf6cde8fdf3d0388f55de56e6f23caed42a1f48f36833cb225c2d866a94c50c21",
    "logs": [
      {
        "transactionIndex": 116,
        "blockNumber": 40957872,
        "transactionHash": "0xf6cde8fdf3d0388f55de56e6f23caed42a1f48f36833cb225c2d866a94c50c21",
        "address": "0x1ee3e77A522DfD7fAf626373D1B1Dcf5A29297BF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000346a7f06100a606eea152f2281847fa80f841894"
        ],
        "data": "0x",
        "logIndex": 704,
        "blockHash": "0xbea2700a3de68390b6888ee3e637048069efe436e596c5890c500b18f2ebfcf8"
      },
      {
        "transactionIndex": 116,
        "blockNumber": 40957872,
        "transactionHash": "0xf6cde8fdf3d0388f55de56e6f23caed42a1f48f36833cb225c2d866a94c50c21",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000346a7f06100a606eea152f2281847fa80f841894",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000086c6dd38193bf00000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000001f83f481202e1ed7b18bb00000000000000000000000000000000000000000000000044dccaa50cdac41000000000000000000000000000000000000000000001f83f4898c9bf259454ab",
        "logIndex": 705,
        "blockHash": "0xbea2700a3de68390b6888ee3e637048069efe436e596c5890c500b18f2ebfcf8"
      }
    ],
    "blockNumber": 40957872,
    "cumulativeGasUsed": "28085726",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
    "0x346a7F06100A606eEA152f2281847Fa80f841894"
  ],
  "numDeployments": 1,
  "solcInputHash": "00bf2ea64ab0c77fcfbe87bd765d68ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyOrderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeFraction\",\"type\":\"uint256\"}],\"name\":\"changeProtocolFeeFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"changeProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"executeOnPassiveBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUsedBuyNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFeeFraction(uint256)\":{\"params\":{\"_protocolFeeFraction\":\"new fee fraction (out of 10_000)\"}},\"changeProtocolFeeReceiver(address)\":{\"params\":{\"_protocolFeeReceiver\":\"new receiver\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFeeFraction(uint256)\":{\"notice\":\"[onlyOwner] Change the protocol fee fraction\"},\"changeProtocolFeeReceiver(address)\":{\"notice\":\"[onlyOwner] Change the protocol fee receiver\"},\"executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32)[],uint256,uint256)\":{\"notice\":\"Executes on an array of passive buy orders\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClowderMain.sol\":\"ClowderMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/ClowderMain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\n// _________ .__                   .___\\n// \\\\_   ___ \\\\|  |   ______  _  ____| _/___________\\n// /    \\\\  \\\\/|  |  /  _ \\\\ \\\\/ \\\\/ / __ |/ __ \\\\_  __ \\\\\\n// \\\\     \\\\___|  |_(  <_> )     / /_/ \\\\  ___/|  | \\\\/\\n//  \\\\______  /____/\\\\____/ \\\\/\\\\_/\\\\____ |\\\\___  >__|\\n//         \\\\/                       \\\\/    \\\\/\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {BuyOrderV1, BuyOrderV1Functions} from \\\"./libraries/passiveorders/BuyOrderV1.sol\\\";\\nimport {Execution} from \\\"./libraries/execution/Execution.sol\\\";\\nimport {SafeERC20Transfer} from \\\"./libraries/assettransfer/SafeERC20Transfer.sol\\\";\\nimport {SignatureUtil} from \\\"./libraries/SignatureUtil.sol\\\";\\n// import {OpenSeaUtil} from \\\"./libraries/externalmarketplaces/OpenSeaUtil.sol\\\";\\n// import {LooksRareUtil} from \\\"./libraries/externalmarketplaces/LooksRareUtil.sol\\\";\\nimport {NftCollectionFunctions} from \\\"./libraries/NftCollection.sol\\\";\\n\\ncontract ClowderMainOwnable is Ownable {\\n    address public protocolFeeReceiver;\\n    uint256 public protocolFeeFraction = 100; // out of 10_000\\n\\n    /**\\n     * @notice [onlyOwner] Change the protocol fee receiver\\n     * @param _protocolFeeReceiver new receiver\\n     */\\n    function changeProtocolFeeReceiver(address _protocolFeeReceiver)\\n        external\\n        onlyOwner\\n    {\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice [onlyOwner] Change the protocol fee fraction\\n     * @param _protocolFeeFraction new fee fraction (out of 10_000)\\n     */\\n    function changeProtocolFeeFraction(uint256 _protocolFeeFraction)\\n        external\\n        onlyOwner\\n    {\\n        protocolFeeFraction = _protocolFeeFraction;\\n    }\\n}\\n\\ncontract ClowderMain is\\n    ClowderMainOwnable,\\n    ReentrancyGuard\\n{\\n    address public immutable WETH;\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\n\\n    // user => nonce => isUsedBuyNonce\\n    mapping(address => mapping(uint256 => bool)) public isUsedBuyNonce;\\n    // buyer => executionId => real contribution\\n    // Returns to zero when the owner is given their part of the\\n    // sale proceeds (claimProceeds).\\n    mapping(address => mapping(uint256 => uint256)) public realContributions;\\n    // executionId => Execution\\n    mapping(uint256 => Execution) public executions;\\n\\n    constructor(address _WETH, address _protocolFeeReceiver) {\\n        WETH = _WETH;\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n\\n        EIP712_DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ), // EIP712 domain typehash\\n                keccak256(\\\"Clowder\\\"), // name\\n                keccak256(bytes(\\\"0.1\\\")), // version\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function cancelBuyOrders(uint256[] calldata buyOrderNonces) external {\\n        require(\\n            buyOrderNonces.length > 0,\\n            \\\"Cancel: Must provide at least one nonce\\\"\\n        );\\n\\n        for (uint256 i = 0; i < buyOrderNonces.length; i++) {\\n            // if (!isUsedBuyNonce[msg.sender][buyOrderNonces[i]]) {\\n            isUsedBuyNonce[msg.sender][buyOrderNonces[i]] = true; // used\\n            // }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes on an array of passive buy orders\\n     */\\n    function executeOnPassiveBuyOrders(\\n        BuyOrderV1[] calldata buyOrders,\\n        uint256 executorPrice,\\n        uint256 tokenId\\n    ) external nonReentrant {\\n        require(buyOrders.length > 0, \\\"Execute: Must have at least one order\\\");\\n\\n        uint256 protocolFee = (protocolFeeFraction * executorPrice) / 10_000;\\n        uint256 price = executorPrice + protocolFee;\\n        address collection = buyOrders[0].collection;\\n        uint256 executionId = buyOrders[0].executionId;\\n\\n        require(\\n            executions[executionId].collection == address(0),\\n            \\\"Execute: Id already executed\\\"\\n        );\\n        // creating the execution object immediately (extra measure to prevent reentrancy)\\n        executions[executionId] = Execution({\\n            collection: collection,\\n            buyPrice: price,\\n            tokenId: tokenId\\n        });\\n\\n        uint256 protocolFeeTransferred = 0;\\n        uint256 executorPriceTransferred = 0;\\n\\n        // TODO: maybe group contributions by signer\\n        // so that we save gas by doing only one or two transfers per signer\\n        // Possibly recieve the data grouped from outside blockchain to \\n        // save gas on the grouping.\\n\\n        // validate and process all the buy orders\\n        for (uint256 i = 0; i < buyOrders.length; i++) {\\n            BuyOrderV1 calldata order = buyOrders[i];\\n            // Validate order nonce usability\\n            require(\\n                !isUsedBuyNonce[order.signer][order.buyNonce],\\n                \\\"Order nonce is unusable\\\"\\n            );\\n            // Invalidating order nonce immediately (to avoid reentrancy\\n            // or even reusing the signature in this loop)\\n            // DO NOT separate from the above check, otherwise the order\\n            // nonce could be reused. If you need separation\\n            // probably you can check the signer/nonces before \\\"i\\\".\\n            isUsedBuyNonce[order.signer][order.buyNonce] = true;\\n            // Validate order signature\\n            bytes32 orderHash = order.hash();\\n            require(\\n                SignatureUtil.verify(\\n                    orderHash,\\n                    order.signer,\\n                    order.v,\\n                    order.r,\\n                    order.s,\\n                    EIP712_DOMAIN_SEPARATOR\\n                ),\\n                \\\"Signature: Invalid\\\"\\n            );\\n            // Validate the order is not expired\\n            require(order.buyPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\n\\n            // Validate the order can accept the price\\n            require(order.canAcceptBuyPrice(price), \\\"Order can't accept price\\\");\\n            // Validate collection\\n            require(\\n                order.collection == collection,\\n                \\\"Order collection mismatch\\\"\\n            );\\n            // Validate executionId\\n            require(\\n                order.executionId == executionId,\\n                \\\"Order executionId mismatch\\\"\\n            );\\n            // Validate delegate\\n            require(\\n                order.delegate == buyOrders[0].delegate, \\n                \\\"Order delegate mismatch\\\"\\n            );\\n\\n            uint256 contribution = order.contribution;\\n\\n            // transferring the protocol fee\\n            uint256 protocolWethAmount = Math.min(\\n                protocolFee - protocolFeeTransferred,\\n                contribution\\n            );\\n            protocolFeeTransferred += protocolWethAmount;\\n            _safeTransferWETH(\\n                order.signer,\\n                protocolFeeReceiver,\\n                protocolWethAmount\\n            );\\n\\n            // transferring the protocol executor price\\n            uint256 executorPriceAmount = Math.min(\\n                executorPrice - executorPriceTransferred,\\n                contribution - protocolWethAmount\\n            );\\n            executorPriceTransferred += executorPriceAmount;\\n            _safeTransferWETH(order.signer, msg.sender, executorPriceAmount);\\n\\n            // adding to the real contribution of the signer\\n            realContributions[order.signer][executionId] += protocolWethAmount + executorPriceAmount;\\n        } // ends the orders for loop\\n\\n        // validating that we transferred the correct amounts of WETH\\n        require(\\n            protocolFeeTransferred == protocolFee,\\n            \\\"Protocol fee not transferred correctly\\\"\\n        );\\n        require(\\n            executorPriceTransferred == executorPrice,\\n            \\\"Executor price not transferred correctly\\\"\\n        );\\n\\n        // transferring the NFT\\n        NftCollectionFunctions.transferNft(\\n            collection,\\n            msg.sender,\\n            buyOrders[0].delegate,\\n            tokenId\\n        );\\n    }\\n\\n    function _safeTransferWETH(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20Transfer.safeERC20Transfer(WETH, from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x071c8ab42ceddd7440a870a973812cc2d1585e61f124b1e5ac7e6dca42e97248\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/NftCollection.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary NftCollectionFunctions {\\n\\n    // interface IDs\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    function transferNft(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\\n        } else {\\n            revert(\\\"Collection does not support ERC721\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf29d870bc44279b532468425fec3fab8df398dc81fa40109d62e18042dba3ebc\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SignatureUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\nlibrary SignatureUtil {\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"SignatureUtil: Invalid signer\\\");\\n        bytes memory signature = abi.encodePacked(r, s, v);\\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\\n    }\\n}\\n\",\"keccak256\":\"0xc6ef646e546d904fa0c815a45db7afda993cf63dc8499059e59f498a1d31b614\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/assettransfer/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary SafeERC20Transfer {\\n    using SafeERC20 for IERC20;\\n\\n    function safeERC20Transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount != 0) {\\n            IERC20(token).safeTransferFrom(from, to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79a25378d46b51069f808b4c9b3975e84babe28e8c1b250187b817d61da56607\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/execution/Execution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nstruct Execution {\\n    address collection; // zero to evaluate as non-existant\\n    uint256 buyPrice;\\n    uint256 tokenId;\\n}\\n\",\"keccak256\":\"0x6045ef126f31dd8910d329d9345320f640a3eb85689ec594c021ba07ba7fed7f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/passiveorders/BuyOrderV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport {SignatureUtil} from \\\"./../SignatureUtil.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Execution} from \\\"./../execution/Execution.sol\\\";\\n\\nusing BuyOrderV1Functions for BuyOrderV1 global;\\n\\n// DO NOT CHANGE the struct, create a new order file instead.\\n// If chaging the struct is extremely necessary, don't forget to \\n// update the hash constant and hash function below.\\nstruct BuyOrderV1 {\\n    \\n    address signer; // order signer\\n\\n    // general order parameters\\n    address collection; // collection address\\n    uint256 executionId; // buy order execution id\\n    uint256 contribution; // WETH contribution\\n\\n    // buy order parameters\\n    uint256 buyPrice; // buy WETH price\\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\\n\\n    // delegate\\n    address delegate;\\n\\n    // signature parameters\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n\\n    // On another note: maybe be careful when using bytes (no fixed) in this struct\\n    // Read the wyvern 2.2 exploit: https://nft.mirror.xyz/VdF3BYwuzXgLrJglw5xF6CHcQfAVbqeJVtueCr4BUzs\\n}\\n\\n/**\\n * @title PassiveTradeOrders\\n * @notice\\n */\\nlibrary BuyOrderV1Functions {\\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb;\\n\\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    PASSIVE_BUY_ORDER_HASH,\\n                    passiveOrder.signer,\\n                    passiveOrder.collection,\\n                    passiveOrder.executionId,\\n                    passiveOrder.contribution,\\n                    passiveOrder.buyPrice,\\n                    passiveOrder.buyPriceEndTime,\\n                    passiveOrder.buyNonce,\\n                    passiveOrder.delegate\\n                )\\n            );\\n    }\\n\\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\n        return passiveOrder.buyPrice >= price;\\n    }\\n\\n    \\n    // Validate signatures (includes interaction with\\n    // other contracts)\\n    // Remember that we give away execution flow\\n    // in case the signer is a contract (isValidSignature)\\n    // function validateSignatures(\\n    //     BuyOrderV1[] calldata orders,\\n    //     bytes32 domainSeparator\\n    // ) public view {\\n    //     for (uint256 i = 0; i < orders.length; i++) {\\n    //         BuyOrderV1 calldata order = orders[i];\\n    //         // Validate order signature\\n    //         bytes32 orderHash = hash(order);\\n    //         require(\\n    //             SignatureUtil.verify(\\n    //                 orderHash,\\n    //                 order.signer,\\n    //                 order.v,\\n    //                 order.r,\\n    //                 order.s,\\n    //                 domainSeparator\\n    //             ),\\n    //             \\\"Signature: Invalid\\\"\\n    //         );\\n    //     }\\n    // }\\n}\\n\",\"keccak256\":\"0x7624eea57341ecd136953008600b1043953c4e560a051963a67ebef8121f9ceb\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c060405260646002553480156200001657600080fd5b5060405162001c6a38038062001c6a8339810160408190526200003991620001a1565b620000443362000134565b600160038181556001600160a01b03848116608090815283546001600160a01b0319169185169190911790925560408051808201825291825262302e3160e81b60209283015280517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f928101929092527fc34e769714204ec364edbdd9fbc375bf7fd2e3b10f22abaf631ea6006a288fa7908201527f8cd160c72d102a6747abd189ac21d4a1f802e3fcc1bb8fc78cc4d558df0c7c21606082015246918101919091523060a082015260c00160408051601f19818403018152919052805160209091012060a05250620001d99050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200019c57600080fd5b919050565b60008060408385031215620001b557600080fd5b620001c08362000184565b9150620001d06020840162000184565b90509250929050565b60805160a051611a5d6200020d600039600081816101e101526106bf0152600081816101940152610eaf0152611a5d6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063bc7517241161008c578063e711bf1b11610066578063e711bf1b14610203578063e804538414610216578063f2fde38b14610254578063f76c92291461026757600080fd5b8063bc751724146101b6578063c862ab33146101c9578063dab400f3146101dc57600080fd5b80634bbe7882116100c85780634bbe788214610161578063715018a6146101765780638da5cb5b1461017e578063ad5c46481461018f57600080fd5b8063323d01e5146100ef57806339a51be51461012d5780633a0298eb14610158575b600080fd5b61011a6100fd3660046115d6565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b600154610140906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b61011a60025481565b61017461016f366004611600565b6102c5565b005b61017461031a565b6000546001600160a01b0316610140565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6101746101c436600461161b565b610350565b6101746101d7366004611634565b61037f565b61011a7f000000000000000000000000000000000000000000000000000000000000000081565b6101746102113660046116b7565b610b3f565b6102446102243660046115d6565b600460209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610124565b610174610262366004611600565b610c0f565b6102a061027536600461161b565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610124565b6000546001600160a01b031633146102f85760405162461bcd60e51b81526004016102ef9061172c565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103445760405162461bcd60e51b81526004016102ef9061172c565b61034e6000610caa565b565b6000546001600160a01b0316331461037a5760405162461bcd60e51b81526004016102ef9061172c565b600255565b6002600354036103d15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102ef565b6002600355826104315760405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b60648201526084016102ef565b6000612710836002546104449190611777565b61044e9190611796565b9050600061045c82856117b8565b9050600086866000818110610473576104736117d0565b90506101600201602001602081019061048c9190611600565b90506000878760008181106104a3576104a36117d0565b604061016090910292909201820135600081815260066020529290922054919250506001600160a01b03161561051b5760405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c72656164792065786563757465640000000060448201526064016102ef565b604080516060810182526001600160a01b03848116825260208083018781528385018a815260008781526006909352948220935184546001600160a01b031916931692909217835590516001830155915160029091015580805b89811015610a3857368b8b83818110610590576105906117d0565b610160029190910191506004905060006105ad6020840184611600565b6001600160a01b031681526020808201929092526040908101600090812060c0850135825290925290205460ff16156106285760405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c6500000000000000000060448201526064016102ef565b60016004600061063b6020850185611600565b6001600160a01b031681526020808201929092526040908101600090812060c086013582529092528120805460ff19169215159290921790915561068c6106873684900384018461182f565b610cfa565b90506106e38161069f6020850185611600565b6106b1610120860161010087016118da565b8561012001358661014001357f0000000000000000000000000000000000000000000000000000000000000000610dbb565b6107245760405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b60448201526064016102ef565b428260a0013510156107685760405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b60448201526064016102ef565b6107848861077b3685900385018561182f565b60800151101590565b6107d05760405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e277420616363657074207072696365000000000000000060448201526064016102ef565b6001600160a01b0387166107ea6040840160208501611600565b6001600160a01b0316146108405760405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d617463680000000000000060448201526064016102ef565b858260400135146108935760405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d6174636800000000000060448201526064016102ef565b8c8c60008181106108a6576108a66117d0565b9050610160020160e00160208101906108bf9190611600565b6001600160a01b03166108d9610100840160e08501611600565b6001600160a01b03161461092f5760405162461bcd60e51b815260206004820152601760248201527f4f726465722064656c6567617465206d69736d6174636800000000000000000060448201526064016102ef565b60608201356000610949610943888d6118f5565b83610e92565b905061095581886117b8565b96506109796109676020860186611600565b6001546001600160a01b031683610eaa565b6000610999878f61098a91906118f5565b61099484866118f5565b610e92565b90506109a581886117b8565b96506109be6109b76020870187611600565b3383610eaa565b6109c881836117b8565b600560006109d96020890189611600565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008b81526020019081526020016000206000828254610a1991906117b8565b9250508190555050505050508080610a309061190c565b915050610575565b50858214610a975760405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b60648201526084016102ef565b878114610af75760405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b60648201526084016102ef565b610b2e84338c8c6000818110610b0f57610b0f6117d0565b9050610160020160e0016020810190610b289190611600565b8a610ed6565b505060016003555050505050505050565b80610b9c5760405162461bcd60e51b815260206004820152602760248201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60448201526665206e6f6e636560c81b60648201526084016102ef565b60005b81811015610c0a57336000908152600460205260408120600191858585818110610bcb57610bcb6117d0565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610c029061190c565b915050610b9f565b505050565b6000546001600160a01b03163314610c395760405162461bcd60e51b81526004016102ef9061172c565b6001600160a01b038116610c9e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ef565b610ca781610caa565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01519551600099610d9e997f5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb99919891979695949392019889526001600160a01b0397881660208a015295871660408901526060880194909452608087019290925260a086015260c085015260e0840152166101008201526101200190565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b038616610e135760405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e657200000060448201526064016102ef565b6040805160208082018790528183018690526001600160f81b031960f889901b1660608301528251808303604101815260618301845261190160f01b60818401526083830186905260a38084018c90528451808503909101815260c39093019093528151910120610e85888284611012565b9998505050505050505050565b6000818310610ea15781610ea3565b825b9392505050565b610c0a7f000000000000000000000000000000000000000000000000000000000000000084848461115e565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190611925565b15610fb957604051632142170760e11b81526001600160a01b0384811660048301528381166024830152604482018390528516906342842e0e90606401600060405180830381600087803b158015610f9c57600080fd5b505af1158015610fb0573d6000803e3d6000fd5b5050505061100c565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b60648201526084016102ef565b50505050565b60008060006110218585611179565b9092509050600081600481111561103a5761103a611947565b1480156110585750856001600160a01b0316826001600160a01b0316145b1561106857600192505050610ea3565b600080876001600160a01b0316631626ba7e60e01b88886040516024016110909291906119b5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516110ce91906119ce565b600060405180830381855afa9150503d8060008114611109576040519150601f19603f3d011682016040523d82523d6000602084013e61110e565b606091505b5091509150818015611121575080516020145b801561115257508051630b135d3f60e11b9061114690830160209081019084016119ea565b6001600160e01b031916145b98975050505050505050565b801561100c5761100c6001600160a01b0385168484846111e7565b60008082516041036111af5760208301516040840151606085015160001a6111a387828585611241565b945094505050506111e0565b82516040036111d857602083015160408401516111cd86838361132e565b9350935050506111e0565b506000905060025b9250929050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261100c908590611367565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112785750600090506003611325565b8460ff16601b1415801561129057508460ff16601c14155b156112a15750600090506004611325565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156112f5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661131e57600060019250925050611325565b9150600090505b94509492505050565b6000806001600160ff1b0383168161134b60ff86901c601b6117b8565b905061135987828885611241565b935093505050935093915050565b60006113bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114399092919063ffffffff16565b805190915015610c0a57808060200190518101906113da9190611925565b610c0a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102ef565b60606114488484600085611450565b949350505050565b6060824710156114b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102ef565b6001600160a01b0385163b6115085760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ef565b600080866001600160a01b0316858760405161152491906119ce565b60006040518083038185875af1925050503d8060008114611561576040519150601f19603f3d011682016040523d82523d6000602084013e611566565b606091505b5091509150611576828286611581565b979650505050505050565b60608315611590575081610ea3565b8251156115a05782518084602001fd5b8160405162461bcd60e51b81526004016102ef9190611a14565b80356001600160a01b03811681146115d157600080fd5b919050565b600080604083850312156115e957600080fd5b6115f2836115ba565b946020939093013593505050565b60006020828403121561161257600080fd5b610ea3826115ba565b60006020828403121561162d57600080fd5b5035919050565b6000806000806060858703121561164a57600080fd5b843567ffffffffffffffff8082111561166257600080fd5b818701915087601f83011261167657600080fd5b81358181111561168557600080fd5b8860206101608302850101111561169b57600080fd5b6020928301999098509187013596604001359550909350505050565b600080602083850312156116ca57600080fd5b823567ffffffffffffffff808211156116e257600080fd5b818501915085601f8301126116f657600080fd5b81358181111561170557600080fd5b8660208260051b850101111561171a57600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561179157611791611761565b500290565b6000826117b357634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156117cb576117cb611761565b500190565b634e487b7160e01b600052603260045260246000fd5b604051610160810167ffffffffffffffff8111828210171561181857634e487b7160e01b600052604160045260246000fd5b60405290565b803560ff811681146115d157600080fd5b6000610160828403121561184257600080fd5b61184a6117e6565b611853836115ba565b8152611861602084016115ba565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201526118a460e084016115ba565b60e08201526101006118b781850161181e565b908201526101208381013590820152610140928301359281019290925250919050565b6000602082840312156118ec57600080fd5b610ea38261181e565b60008282101561190757611907611761565b500390565b60006001820161191e5761191e611761565b5060010190565b60006020828403121561193757600080fd5b81518015158114610ea357600080fd5b634e487b7160e01b600052602160045260246000fd5b60005b83811015611978578181015183820152602001611960565b8381111561100c5750506000910152565b600081518084526119a181602086016020860161195d565b601f01601f19169290920160200192915050565b8281526040602082015260006114486040830184611989565b600082516119e081846020870161195d565b9190910192915050565b6000602082840312156119fc57600080fd5b81516001600160e01b031981168114610ea357600080fd5b602081526000610ea3602083018461198956fea2646970667358221220068d03f43df594827d9bd4f06a286427fa97ec2ff06c120b617311208e79432764736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063bc7517241161008c578063e711bf1b11610066578063e711bf1b14610203578063e804538414610216578063f2fde38b14610254578063f76c92291461026757600080fd5b8063bc751724146101b6578063c862ab33146101c9578063dab400f3146101dc57600080fd5b80634bbe7882116100c85780634bbe788214610161578063715018a6146101765780638da5cb5b1461017e578063ad5c46481461018f57600080fd5b8063323d01e5146100ef57806339a51be51461012d5780633a0298eb14610158575b600080fd5b61011a6100fd3660046115d6565b600560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b600154610140906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b61011a60025481565b61017461016f366004611600565b6102c5565b005b61017461031a565b6000546001600160a01b0316610140565b6101407f000000000000000000000000000000000000000000000000000000000000000081565b6101746101c436600461161b565b610350565b6101746101d7366004611634565b61037f565b61011a7f000000000000000000000000000000000000000000000000000000000000000081565b6101746102113660046116b7565b610b3f565b6102446102243660046115d6565b600460209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610124565b610174610262366004611600565b610c0f565b6102a061027536600461161b565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001610124565b6000546001600160a01b031633146102f85760405162461bcd60e51b81526004016102ef9061172c565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103445760405162461bcd60e51b81526004016102ef9061172c565b61034e6000610caa565b565b6000546001600160a01b0316331461037a5760405162461bcd60e51b81526004016102ef9061172c565b600255565b6002600354036103d15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102ef565b6002600355826104315760405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b60648201526084016102ef565b6000612710836002546104449190611777565b61044e9190611796565b9050600061045c82856117b8565b9050600086866000818110610473576104736117d0565b90506101600201602001602081019061048c9190611600565b90506000878760008181106104a3576104a36117d0565b604061016090910292909201820135600081815260066020529290922054919250506001600160a01b03161561051b5760405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c72656164792065786563757465640000000060448201526064016102ef565b604080516060810182526001600160a01b03848116825260208083018781528385018a815260008781526006909352948220935184546001600160a01b031916931692909217835590516001830155915160029091015580805b89811015610a3857368b8b83818110610590576105906117d0565b610160029190910191506004905060006105ad6020840184611600565b6001600160a01b031681526020808201929092526040908101600090812060c0850135825290925290205460ff16156106285760405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c6500000000000000000060448201526064016102ef565b60016004600061063b6020850185611600565b6001600160a01b031681526020808201929092526040908101600090812060c086013582529092528120805460ff19169215159290921790915561068c6106873684900384018461182f565b610cfa565b90506106e38161069f6020850185611600565b6106b1610120860161010087016118da565b8561012001358661014001357f0000000000000000000000000000000000000000000000000000000000000000610dbb565b6107245760405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b60448201526064016102ef565b428260a0013510156107685760405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b60448201526064016102ef565b6107848861077b3685900385018561182f565b60800151101590565b6107d05760405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e277420616363657074207072696365000000000000000060448201526064016102ef565b6001600160a01b0387166107ea6040840160208501611600565b6001600160a01b0316146108405760405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d617463680000000000000060448201526064016102ef565b858260400135146108935760405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d6174636800000000000060448201526064016102ef565b8c8c60008181106108a6576108a66117d0565b9050610160020160e00160208101906108bf9190611600565b6001600160a01b03166108d9610100840160e08501611600565b6001600160a01b03161461092f5760405162461bcd60e51b815260206004820152601760248201527f4f726465722064656c6567617465206d69736d6174636800000000000000000060448201526064016102ef565b60608201356000610949610943888d6118f5565b83610e92565b905061095581886117b8565b96506109796109676020860186611600565b6001546001600160a01b031683610eaa565b6000610999878f61098a91906118f5565b61099484866118f5565b610e92565b90506109a581886117b8565b96506109be6109b76020870187611600565b3383610eaa565b6109c881836117b8565b600560006109d96020890189611600565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008b81526020019081526020016000206000828254610a1991906117b8565b9250508190555050505050508080610a309061190c565b915050610575565b50858214610a975760405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b60648201526084016102ef565b878114610af75760405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b60648201526084016102ef565b610b2e84338c8c6000818110610b0f57610b0f6117d0565b9050610160020160e0016020810190610b289190611600565b8a610ed6565b505060016003555050505050505050565b80610b9c5760405162461bcd60e51b815260206004820152602760248201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60448201526665206e6f6e636560c81b60648201526084016102ef565b60005b81811015610c0a57336000908152600460205260408120600191858585818110610bcb57610bcb6117d0565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610c029061190c565b915050610b9f565b505050565b6000546001600160a01b03163314610c395760405162461bcd60e51b81526004016102ef9061172c565b6001600160a01b038116610c9e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ef565b610ca781610caa565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01519551600099610d9e997f5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb99919891979695949392019889526001600160a01b0397881660208a015295871660408901526060880194909452608087019290925260a086015260c085015260e0840152166101008201526101200190565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b038616610e135760405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e657200000060448201526064016102ef565b6040805160208082018790528183018690526001600160f81b031960f889901b1660608301528251808303604101815260618301845261190160f01b60818401526083830186905260a38084018c90528451808503909101815260c39093019093528151910120610e85888284611012565b9998505050505050505050565b6000818310610ea15781610ea3565b825b9392505050565b610c0a7f000000000000000000000000000000000000000000000000000000000000000084848461115e565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f459190611925565b15610fb957604051632142170760e11b81526001600160a01b0384811660048301528381166024830152604482018390528516906342842e0e90606401600060405180830381600087803b158015610f9c57600080fd5b505af1158015610fb0573d6000803e3d6000fd5b5050505061100c565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b60648201526084016102ef565b50505050565b60008060006110218585611179565b9092509050600081600481111561103a5761103a611947565b1480156110585750856001600160a01b0316826001600160a01b0316145b1561106857600192505050610ea3565b600080876001600160a01b0316631626ba7e60e01b88886040516024016110909291906119b5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516110ce91906119ce565b600060405180830381855afa9150503d8060008114611109576040519150601f19603f3d011682016040523d82523d6000602084013e61110e565b606091505b5091509150818015611121575080516020145b801561115257508051630b135d3f60e11b9061114690830160209081019084016119ea565b6001600160e01b031916145b98975050505050505050565b801561100c5761100c6001600160a01b0385168484846111e7565b60008082516041036111af5760208301516040840151606085015160001a6111a387828585611241565b945094505050506111e0565b82516040036111d857602083015160408401516111cd86838361132e565b9350935050506111e0565b506000905060025b9250929050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261100c908590611367565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112785750600090506003611325565b8460ff16601b1415801561129057508460ff16601c14155b156112a15750600090506004611325565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156112f5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661131e57600060019250925050611325565b9150600090505b94509492505050565b6000806001600160ff1b0383168161134b60ff86901c601b6117b8565b905061135987828885611241565b935093505050935093915050565b60006113bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114399092919063ffffffff16565b805190915015610c0a57808060200190518101906113da9190611925565b610c0a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102ef565b60606114488484600085611450565b949350505050565b6060824710156114b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102ef565b6001600160a01b0385163b6115085760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ef565b600080866001600160a01b0316858760405161152491906119ce565b60006040518083038185875af1925050503d8060008114611561576040519150601f19603f3d011682016040523d82523d6000602084013e611566565b606091505b5091509150611576828286611581565b979650505050505050565b60608315611590575081610ea3565b8251156115a05782518084602001fd5b8160405162461bcd60e51b81526004016102ef9190611a14565b80356001600160a01b03811681146115d157600080fd5b919050565b600080604083850312156115e957600080fd5b6115f2836115ba565b946020939093013593505050565b60006020828403121561161257600080fd5b610ea3826115ba565b60006020828403121561162d57600080fd5b5035919050565b6000806000806060858703121561164a57600080fd5b843567ffffffffffffffff8082111561166257600080fd5b818701915087601f83011261167657600080fd5b81358181111561168557600080fd5b8860206101608302850101111561169b57600080fd5b6020928301999098509187013596604001359550909350505050565b600080602083850312156116ca57600080fd5b823567ffffffffffffffff808211156116e257600080fd5b818501915085601f8301126116f657600080fd5b81358181111561170557600080fd5b8660208260051b850101111561171a57600080fd5b60209290920196919550909350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561179157611791611761565b500290565b6000826117b357634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156117cb576117cb611761565b500190565b634e487b7160e01b600052603260045260246000fd5b604051610160810167ffffffffffffffff8111828210171561181857634e487b7160e01b600052604160045260246000fd5b60405290565b803560ff811681146115d157600080fd5b6000610160828403121561184257600080fd5b61184a6117e6565b611853836115ba565b8152611861602084016115ba565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201526118a460e084016115ba565b60e08201526101006118b781850161181e565b908201526101208381013590820152610140928301359281019290925250919050565b6000602082840312156118ec57600080fd5b610ea38261181e565b60008282101561190757611907611761565b500390565b60006001820161191e5761191e611761565b5060010190565b60006020828403121561193757600080fd5b81518015158114610ea357600080fd5b634e487b7160e01b600052602160045260246000fd5b60005b83811015611978578181015183820152602001611960565b8381111561100c5750506000910152565b600081518084526119a181602086016020860161195d565b601f01601f19169290920160200192915050565b8281526040602082015260006114486040830184611989565b600082516119e081846020870161195d565b9190910192915050565b6000602082840312156119fc57600080fd5b81516001600160e01b031981168114610ea357600080fd5b602081526000610ea3602083018461198956fea2646970667358221220068d03f43df594827d9bd4f06a286427fa97ec2ff06c120b617311208e79432764736f6c634300080d0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFeeFraction(uint256)": {
        "params": {
          "_protocolFeeFraction": "new fee fraction (out of 10_000)"
        }
      },
      "changeProtocolFeeReceiver(address)": {
        "params": {
          "_protocolFeeReceiver": "new receiver"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFeeFraction(uint256)": {
        "notice": "[onlyOwner] Change the protocol fee fraction"
      },
      "changeProtocolFeeReceiver(address)": {
        "notice": "[onlyOwner] Change the protocol fee receiver"
      },
      "executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32)[],uint256,uint256)": {
        "notice": "Executes on an array of passive buy orders"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 550,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4575,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4578,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeFraction",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 764,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4619,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "isUsedBuyNonce",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4625,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "realContributions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4630,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "executions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Execution)5161_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Execution)5161_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Execution)",
        "numberOfBytes": "32",
        "value": "t_struct(Execution)5161_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Execution)5161_storage": {
        "encoding": "inplace",
        "label": "struct Execution",
        "members": [
          {
            "astId": 5156,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "collection",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5158,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "buyPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5160,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}