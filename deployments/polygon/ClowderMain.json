{
  "address": "0x17B50399918383eDF842DeCa072430684ec1f9e7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "buyOrderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeFraction",
          "type": "uint256"
        }
      ],
      "name": "changeProtocolFeeFraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "name": "changeProtocolFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "buyOrders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeOnPassiveBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "executions",
      "outputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isUsedBuyNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "realContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb18f6be74e02ba4fc8109db192a6047c029b4c77aba88fc51345c8e8b60055c4",
  "receipt": {
    "to": null,
    "from": "0x346a7F06100A606eEA152f2281847Fa80f841894",
    "contractAddress": "0x17B50399918383eDF842DeCa072430684ec1f9e7",
    "transactionIndex": 32,
    "gasUsed": "1615565",
    "logsBloom": "0x
    "blockHash": "0x9449bbe22fc23d5b7514ead543b004a63501bd96977f1543ad7cf816d7bf68b6",
    "transactionHash": "0xb18f6be74e02ba4fc8109db192a6047c029b4c77aba88fc51345c8e8b60055c4",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 42912118,
        "transactionHash": "0xb18f6be74e02ba4fc8109db192a6047c029b4c77aba88fc51345c8e8b60055c4",
        "address": "0x17B50399918383eDF842DeCa072430684ec1f9e7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000346a7f06100a606eea152f2281847fa80f841894"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0x9449bbe22fc23d5b7514ead543b004a63501bd96977f1543ad7cf816d7bf68b6"
      },
      {
        "transactionIndex": 32,
        "blockNumber": 42912118,
        "transactionHash": "0xb18f6be74e02ba4fc8109db192a6047c029b4c77aba88fc51345c8e8b60055c4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000346a7f06100a606eea152f2281847fa80f841894",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000cf9c1862d60d35000000000000000000000000000000000000000000000000433ce84244784bf00000000000000000000000000000000000000000000000ece1ea605daab950fb000000000000000000000000000000000000000000000000426d4c29e1a23ebb0000000000000000000000000000000000000000000000ece2b9fc760d8f5e30",
        "logIndex": 116,
        "blockHash": "0x9449bbe22fc23d5b7514ead543b004a63501bd96977f1543ad7cf816d7bf68b6"
      }
    ],
    "blockNumber": 42912118,
    "cumulativeGasUsed": "6999274",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
    "0x346a7F06100A606eEA152f2281847Fa80f841894"
  ],
  "numDeployments": 1,
  "solcInputHash": "ba5e6ef7dc4ccd5eb178e770fac39322",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyOrderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeFraction\",\"type\":\"uint256\"}],\"name\":\"changeProtocolFeeFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"changeProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeOnPassiveBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUsedBuyNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFeeFraction(uint256)\":{\"params\":{\"_protocolFeeFraction\":\"new fee fraction (out of 10_000)\"}},\"changeProtocolFeeReceiver(address)\":{\"params\":{\"_protocolFeeReceiver\":\"new receiver\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFeeFraction(uint256)\":{\"notice\":\"[onlyOwner] Change the protocol fee fraction\"},\"changeProtocolFeeReceiver(address)\":{\"notice\":\"[onlyOwner] Change the protocol fee receiver\"},\"executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32)[],uint256,uint256,bytes)\":{\"notice\":\"Executes on an array of passive buy orders\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClowderMain.sol\":\"ClowderMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/ClowderMain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\n// _________ .__                   .___\\n// \\\\_   ___ \\\\|  |   ______  _  ____| _/___________\\n// /    \\\\  \\\\/|  |  /  _ \\\\ \\\\/ \\\\/ / __ |/ __ \\\\_  __ \\\\\\n// \\\\     \\\\___|  |_(  <_> )     / /_/ \\\\  ___/|  | \\\\/\\n//  \\\\______  /____/\\\\____/ \\\\/\\\\_/\\\\____ |\\\\___  >__|\\n//         \\\\/                       \\\\/    \\\\/\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {BuyOrderV1, BuyOrderV1Functions} from \\\"./libraries/passiveorders/BuyOrderV1.sol\\\";\\nimport {Execution} from \\\"./libraries/execution/Execution.sol\\\";\\nimport {SafeERC20Transfer} from \\\"./libraries/assettransfer/SafeERC20Transfer.sol\\\";\\nimport {SignatureUtil} from \\\"./libraries/SignatureUtil.sol\\\";\\n// import {OpenSeaUtil} from \\\"./libraries/externalmarketplaces/OpenSeaUtil.sol\\\";\\n// import {LooksRareUtil} from \\\"./libraries/externalmarketplaces/LooksRareUtil.sol\\\";\\nimport {NftCollectionFunctions} from \\\"./libraries/NftCollection.sol\\\";\\nimport {IClowderCallee} from \\\"./interfaces/IClowderCallee.sol\\\";\\n\\ncontract ClowderMainOwnable is Ownable {\\n    address public protocolFeeReceiver;\\n    uint256 public protocolFeeFraction = 100; // out of 10_000\\n\\n    /**\\n     * @notice [onlyOwner] Change the protocol fee receiver\\n     * @param _protocolFeeReceiver new receiver\\n     */\\n    function changeProtocolFeeReceiver(\\n        address _protocolFeeReceiver\\n    ) external onlyOwner {\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice [onlyOwner] Change the protocol fee fraction\\n     * @param _protocolFeeFraction new fee fraction (out of 10_000)\\n     */\\n    function changeProtocolFeeFraction(\\n        uint256 _protocolFeeFraction\\n    ) external onlyOwner {\\n        protocolFeeFraction = _protocolFeeFraction;\\n    }\\n}\\n\\ncontract ClowderMain is ClowderMainOwnable, ReentrancyGuard {\\n    address public immutable WETH;\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\n\\n    // user => nonce => isUsedBuyNonce\\n    mapping(address => mapping(uint256 => bool)) public isUsedBuyNonce;\\n    // buyer => executionId => real contribution\\n    // Returns to zero when the owner is given their part of the\\n    // sale proceeds (claimProceeds).\\n    mapping(address => mapping(uint256 => uint256)) public realContributions;\\n    // executionId => Execution\\n    mapping(uint256 => Execution) public executions;\\n\\n    constructor(address _WETH, address _protocolFeeReceiver) {\\n        WETH = _WETH;\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n\\n        EIP712_DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ), // EIP712 domain typehash\\n                keccak256(\\\"Clowder\\\"), // name\\n                keccak256(bytes(\\\"0.2\\\")), // version\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function cancelBuyOrders(uint256[] calldata buyOrderNonces) external {\\n        require(\\n            buyOrderNonces.length > 0,\\n            \\\"Cancel: Must provide at least one nonce\\\"\\n        );\\n\\n        for (uint256 i = 0; i < buyOrderNonces.length; i++) {\\n            // if (!isUsedBuyNonce[msg.sender][buyOrderNonces[i]]) {\\n            isUsedBuyNonce[msg.sender][buyOrderNonces[i]] = true; // used\\n            // }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes on an array of passive buy orders\\n     */\\n    function executeOnPassiveBuyOrders(\\n        BuyOrderV1[] calldata buyOrders,\\n        uint256 executorPrice,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external nonReentrant {\\n        require(buyOrders.length > 0, \\\"Execute: Must have at least one order\\\");\\n\\n        uint256 protocolFee = (protocolFeeFraction * executorPrice) / 10_000;\\n        uint256 price = executorPrice + protocolFee;\\n\\n        require(\\n            executions[buyOrders[0].executionId].collection == address(0),\\n            \\\"Execute: Id already executed\\\"\\n        );\\n        // creating the execution object immediately (extra measure to prevent reentrancy)\\n        executions[buyOrders[0].executionId] = Execution({\\n            collection: buyOrders[0].collection,\\n            buyPrice: price,\\n            tokenId: tokenId\\n        });\\n\\n        uint256 protocolFeeTransferred = 0;\\n        uint256 executorPriceTransferred = 0;\\n\\n        // TODO: maybe group contributions by signer\\n        // so that we save gas by doing only one or two transfers per signer\\n        // Possibly recieve the data grouped from outside blockchain to\\n        // save gas on the grouping.\\n\\n        // validate and process all the buy orders\\n        for (uint256 i = 0; i < buyOrders.length; i++) {\\n            BuyOrderV1 calldata order = buyOrders[i];\\n            // Validate order nonce usability\\n            require(\\n                !isUsedBuyNonce[order.signer][order.buyNonce],\\n                \\\"Order nonce is unusable\\\"\\n            );\\n            // Invalidating order nonce immediately (to avoid reentrancy\\n            // or even reusing the signature in this loop)\\n            // DO NOT separate from the above check, otherwise the order\\n            // nonce could be reused. If you need separation\\n            // probably you can check the signer/nonces before \\\"i\\\".\\n            isUsedBuyNonce[order.signer][order.buyNonce] = true;\\n            // Validate order signature\\n            require(\\n                SignatureUtil.verify(\\n                    order.hash(),\\n                    order.signer,\\n                    order.v,\\n                    order.r,\\n                    order.s,\\n                    EIP712_DOMAIN_SEPARATOR\\n                ),\\n                \\\"Signature: Invalid\\\"\\n            );\\n            // Validate the order is not expired\\n            require(order.buyPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\n\\n            // Validate the order can accept the price\\n            require(order.canAcceptBuyPrice(price), \\\"Order can't accept price\\\");\\n            // Validate collection\\n            require(\\n                order.collection == buyOrders[0].collection,\\n                \\\"Order collection mismatch\\\"\\n            );\\n            // Validate executionId\\n            require(\\n                order.executionId == buyOrders[0].executionId,\\n                \\\"Order executionId mismatch\\\"\\n            );\\n            // Validate delegate\\n            require(\\n                order.delegate == buyOrders[0].delegate,\\n                \\\"Order delegate mismatch\\\"\\n            );\\n\\n            uint256 contribution = order.contribution;\\n\\n            // transferring the protocol fee\\n            uint256 protocolWethAmount = Math.min(\\n                protocolFee - protocolFeeTransferred,\\n                contribution\\n            );\\n            protocolFeeTransferred += protocolWethAmount;\\n            _safeTransferWETH(\\n                order.signer,\\n                protocolFeeReceiver,\\n                protocolWethAmount\\n            );\\n\\n            // transferring the protocol executor price\\n            uint256 executorPriceAmount = Math.min(\\n                executorPrice - executorPriceTransferred,\\n                contribution - protocolWethAmount\\n            );\\n            executorPriceTransferred += executorPriceAmount;\\n            _safeTransferWETH(order.signer, msg.sender, executorPriceAmount);\\n\\n            // adding to the real contribution of the signer\\n            realContributions[order.signer][buyOrders[0].executionId] +=\\n                protocolWethAmount +\\n                executorPriceAmount;\\n        } // ends the orders for loop\\n\\n        // validating that we transferred the correct amounts of WETH\\n        require(\\n            protocolFeeTransferred == protocolFee,\\n            \\\"Protocol fee not transferred correctly\\\"\\n        );\\n        require(\\n            executorPriceTransferred == executorPrice,\\n            \\\"Executor price not transferred correctly\\\"\\n        );\\n\\n        if (data.length > 0) {\\n\\n            IClowderCallee(msg.sender).clowderCall(data);\\n\\n            // make sure the delegate is the owner of the NFT\\n            require(\\n                NftCollectionFunctions.ownerOf(\\n                    buyOrders[0].collection,\\n                    tokenId\\n                ) == buyOrders[0].delegate,\\n                \\\"Delegate is not the owner of the NFT\\\"\\n            );\\n        } else {\\n            // transferring the NFT\\n            NftCollectionFunctions.transferNft(\\n                buyOrders[0].collection,\\n                msg.sender,\\n                buyOrders[0].delegate,\\n                tokenId\\n            );\\n        }\\n    }\\n\\n    function _safeTransferWETH(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20Transfer.safeERC20Transfer(WETH, from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x81a90c92917d982947dfc5750a0de6ca5b132eb8c4798e9b755dff140214ae64\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IClowderCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\ninterface IClowderCallee {\\n    function clowderCall(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5707cc39917b654929640894d36fb8cbcd27f190d1d1c1a544e8e352629277f7\",\"license\":\"MIT\"},\"contracts/libraries/NftCollection.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary NftCollectionFunctions {\\n\\n    // interface IDs\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    function transferNft(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\\n        } else {\\n            revert(\\\"Collection does not support ERC721\\\");\\n        }\\n    }\\n\\n    function ownerOf(\\n        address collection,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            return IERC721(collection).ownerOf(tokenId);\\n        } else {\\n            revert(\\\"Collection does not support ERC721\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe15e65bb4ac894bd6aba7871b0aaaf9d6fb08fcb0f639a399f9929b28d26a927\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SignatureUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\nlibrary SignatureUtil {\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"SignatureUtil: Invalid signer\\\");\\n        bytes memory signature = abi.encodePacked(r, s, v);\\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x21f8f5bc63bd44f68c1c1bb715d963a865d86b30ccebf4953089c15388176add\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/assettransfer/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary SafeERC20Transfer {\\n    using SafeERC20 for IERC20;\\n\\n    function safeERC20Transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount != 0) {\\n            IERC20(token).safeTransferFrom(from, to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec633409011657ce1047e8a4fd2de2f4d65e6eb514ba0af2a8e58b2d430ee82e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/execution/Execution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nstruct Execution {\\n    address collection; // zero to evaluate as non-existant\\n    uint256 buyPrice;\\n    uint256 tokenId;\\n}\\n\",\"keccak256\":\"0x3e29676f8c2e236b64498f8b3854e7e0cac14a662dee9a08908f4d337f4753c2\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/passiveorders/BuyOrderV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {SignatureUtil} from \\\"./../SignatureUtil.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Execution} from \\\"./../execution/Execution.sol\\\";\\n\\nusing BuyOrderV1Functions for BuyOrderV1 global;\\n\\n// DO NOT CHANGE the struct, create a new order file instead.\\n// If chaging the struct is extremely necessary, don't forget to \\n// update the hash constant and hash function below.\\nstruct BuyOrderV1 {\\n    \\n    address signer; // order signer\\n\\n    // general order parameters\\n    address collection; // collection address\\n    uint256 executionId; // buy order execution id\\n    uint256 contribution; // WETH contribution\\n\\n    // buy order parameters\\n    uint256 buyPrice; // buy WETH price\\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\\n\\n    // delegate\\n    address delegate;\\n\\n    // signature parameters\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n\\n    // On another note: maybe be careful when using bytes (no fixed) in this struct\\n    // Read the wyvern 2.2 exploit: https://nft.mirror.xyz/VdF3BYwuzXgLrJglw5xF6CHcQfAVbqeJVtueCr4BUzs\\n}\\n\\n/**\\n * @title PassiveTradeOrders\\n * @notice\\n */\\nlibrary BuyOrderV1Functions {\\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb;\\n\\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    PASSIVE_BUY_ORDER_HASH,\\n                    passiveOrder.signer,\\n                    passiveOrder.collection,\\n                    passiveOrder.executionId,\\n                    passiveOrder.contribution,\\n                    passiveOrder.buyPrice,\\n                    passiveOrder.buyPriceEndTime,\\n                    passiveOrder.buyNonce,\\n                    passiveOrder.delegate\\n                )\\n            );\\n    }\\n\\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\n        return passiveOrder.buyPrice >= price;\\n    }\\n\\n    \\n    // Validate signatures (includes interaction with\\n    // other contracts)\\n    // Remember that we give away execution flow\\n    // in case the signer is a contract (isValidSignature)\\n    // function validateSignatures(\\n    //     BuyOrderV1[] calldata orders,\\n    //     bytes32 domainSeparator\\n    // ) public view {\\n    //     for (uint256 i = 0; i < orders.length; i++) {\\n    //         BuyOrderV1 calldata order = orders[i];\\n    //         // Validate order signature\\n    //         bytes32 orderHash = hash(order);\\n    //         require(\\n    //             SignatureUtil.verify(\\n    //                 orderHash,\\n    //                 order.signer,\\n    //                 order.v,\\n    //                 order.r,\\n    //                 order.s,\\n    //                 domainSeparator\\n    //             ),\\n    //             \\\"Signature: Invalid\\\"\\n    //         );\\n    //     }\\n    // }\\n}\\n\",\"keccak256\":\"0xf90a22e9ff34f0d4609e3c9d744c8948d28a078c2e56c443017244dc57639a47\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c08060405234620001805760408162001ca480380380916200002382856200019c565b8339810103126200018057806200004c602062000044620000be94620001cf565b9201620001cf565b60008054336001600160a01b031982168117835560405193949390926001600160a01b03909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36064600255600160035560805260018060a01b031660018060a01b03196001541617600155565b620000c8620001e4565b8051602091820120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9381019384527fc34e769714204ec364edbdd9fbc375bf7fd2e3b10f22abaf631ea6006a288fa79181019190915260608101919091524660808201523060a08083019190915281526200014a60c0826200019c565b51902060a052604051611a7e90816200022682396080518181816103870152611294015260a0518181816103f101526108410152f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017620001c057604052565b620001ca62000185565b604052565b51906001600160a01b03821682036200018057565b60408051919082016001600160401b0381118382101762000215575b604052600382526218171960e91b6020830152565b6200021f62000185565b6200020056fe60806040526004361015610013575b600080fd5b60003560e01c80631b0e15a51461012b578063323d01e51461012257806339a51be5146101195780633a0298eb146101105780634bbe788214610107578063715018a6146100fe5780638da5cb5b146100f5578063ad5c4648146100ec578063bc751724146100e3578063dab400f3146100da578063e711bf1b146100d1578063e8045384146100c8578063f2fde38b146100bf5763f76c9229146100b757600080fd5b61000e610589565b5061000e6104bc565b5061000e61046b565b5061000e610414565b5061000e6103d8565b5061000e6103b6565b5061000e610370565b5061000e610346565b5061000e6102e4565b5061000e61029c565b5061000e61027d565b5061000e610253565b5061000e6101fc565b5061000e610162565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020838186019501011161000e57565b503461000e57608036600319011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e5780600401359082821161000e5736602461016084028301011161000e5760643592831161000e576101ca6101dc933690600401610134565b92909160443591602480359201610722565b005b6001600160a01b0381160361000e57565b35906101fa826101de565b565b503461000e57604036600319011261000e5760043561021a816101de565b60018060a01b0316600052600560205260406000206024356000526020526020604060002054604051908152f35b600091031261000e57565b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576020600254604051908152f35b503461000e57602036600319011261000e576004356102ba816101de565b6102c26105d5565b600180546001600160a01b0319166001600160a01b0392909216919091179055005b503461000e57600080600319360112610343576102ff6105d5565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e576103d06105d5565b600435600255005b503461000e57600036600319011261000e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461000e57602036600319011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e573660248260051b8401011161000e5760246101dc9201610677565b503461000e57604036600319011261000e57600435610489816101de565b60018060a01b031660005260046020526040600020602435600052602052602060ff604060002054166040519015158152f35b503461000e57602036600319011261000e576004356104da816101de565b6104e26105d5565b6001600160a01b0390811690811561053557600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57602036600319011261000e5760043560005260066020526060604060002060018060a01b0381541690600260018201549101549060405192835260208301526040820152f35b6000546001600160a01b031633036105e957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610654570190565b61065c61062d565b0190565b50634e487b7160e01b600052603260045260246000fd5b81156106cd57600090815b83811061068f5750505050565b3360009081526004602052604090206106c891908160051b84013585526020526106c360408520600160ff19825416179055565b610644565b610682565b60405162461bcd60e51b815260206004820152602760248201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60448201526665206e6f6e636560c81b6064820152608490fd5b939490929192600260035414610bdf579484906002600355610745871515610c24565b61075c61075486600254610c7e565b612710900490565b966107678887610c9d565b6040986001600160a01b0397918a91906107b28a6107ab61079e8661078c8a8d610ca9565b01356000526006602052604060002090565b546001600160a01b031690565b1615610cdb565b610834896107ff8561078c8960209c8d95886107d8886107d28686610ca9565b01610d27565b976107f36107e4610de0565b6001600160a01b03909a168a52565b88015284870152610ca9565b815181546001600160a01b0319166001600160a01b039190911617815560208201516001820155604090910151600290910155565b6000908a8c8988859786937f0000000000000000000000000000000000000000000000000000000000000000955b83861061096c57505050505050505061088793929161088191146110f0565b1461114b565b831561093657333b1561000e576108ec6108fe956108e760e0956108ca60006108f2996107d2986109069f51938492839263883b03c78e1b8452600484016111a8565b038183335af18015610929575b610910575b506107d2858c610ca9565b6114a9565b96610ca9565b6001600160a01b031690565b9116146111dd565b6101fa6001600355565b8061091d61092392610d48565b80610248565b386108dc565b6109316111d0565b6108d7565b9050610967965085945060e092506109596107d2926107d28361095f9799610ca9565b94610ca9565b903390611353565b610906565b610977868584610cbd565b9461098186610d27565b6001600160a01b0316600090815260046020908152604080832060c08a013580855292529091205460ff16156109b690610e21565b6109bf87610d27565b6001600160a01b03166000908152600460205260409020600091825260205260409020805460ff191660011790556109f73687610e83565b610a00906119a7565b88610a0a88610d27565b610a176101008a01610f22565b906101408a0135916101208b013591610a2f95611580565b610a3890610f2c565b610a484260a08801351015610f6d565b88610a533688610e83565b608001511015610a6290610fa9565b81610a6e878301610d27565b91610a798786610ca9565b01610a8390610d27565b6001600160a01b0316911614610a9890610ff5565b82610aa38584610ca9565b01358386013514610ab390611041565b60e090610ac1868301610d27565b91610acc8685610ca9565b01610ad690610d27565b6001600160a01b0316911614610aeb9061108d565b60608401359788610afc828c6110d9565b90610b0691611235565b610b11818093610c9d565b998d8d610b1d89610d27565b60015485906001600160a01b0316610b3492611247565b610b3d916110d9565b91610b47916110d9565b610b5091611235565b9a8b610b5b91610c9d565b9a3381610b6788610d27565b91610b7192611247565b610b7a91610c9d565b93610b8490610d27565b6001600160a01b0316600090815260056020526040902092610ba591610ca9565b0135610bba9190600052602052604060002090565b90815490610bc791610c9d565b9055610bd290610644565b898f8f908f918b92610862565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15610c2b57565b60405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b6064820152608490fd5b8060001904821181151516610c91570290565b610c9961062d565b0290565b81198111610654570190565b9015610cb25790565b610cba610660565b90565b9161016091811015610cce57020190565b610cd6610660565b020190565b15610ce257565b60405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c7265616479206578656375746564000000006044820152606490fd5b35610cba816101de565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610d5c57604052565b610d64610d31565b604052565b6040810190811067ffffffffffffffff821117610d5c57604052565b6080810190811067ffffffffffffffff821117610d5c57604052565b610140810190811067ffffffffffffffff821117610d5c57604052565b90601f8019910116810190811067ffffffffffffffff821117610d5c57604052565b604051906060820182811067ffffffffffffffff821117610d5c57604052565b60405190610160820182811067ffffffffffffffff821117610d5c57604052565b15610e2857565b60405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c650000000000000000006044820152606490fd5b60ff81160361000e57565b35906101fa82610e6d565b91908261016091031261000e57610e98610e00565b91610ea2816101ef565b8352610eb0602082016101ef565b602084015260408101356040840152606081013560608401526080810135608084015260a081013560a084015260c081013560c0840152610ef360e082016101ef565b60e0840152610100610f06818301610e78565b9084015261012080820135908401526101408091013590830152565b35610cba81610e6d565b15610f3357565b60405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b6044820152606490fd5b15610f7457565b60405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b6044820152606490fd5b15610fb057565b60405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e27742061636365707420707269636500000000000000006044820152606490fd5b15610ffc57565b60405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d61746368000000000000006044820152606490fd5b1561104857565b60405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d617463680000000000006044820152606490fd5b1561109457565b60405162461bcd60e51b815260206004820152601760248201527f4f726465722064656c6567617465206d69736d617463680000000000000000006044820152606490fd5b8181106110e4570390565b6110ec61062d565b0390565b156110f757565b60405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b6064820152608490fd5b1561115257565b60405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b6064820152608490fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b506040513d6000823e3d90fd5b156111e457565b60405162461bcd60e51b8152602060048201526024808201527f44656c6567617465206973206e6f7420746865206f776e6572206f66207468656044820152630813919560e21b6064820152608490fd5b9080821015611242575090565b905090565b91908161125357505050565b6040516323b872dd60e01b602082019081526001600160a01b03948516602483015291841660448201526064808201939093529182526113169260009182917f000000000000000000000000000000000000000000000000000000000000000016906112c0608486610dbe565b82604051956112ce87610d69565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152611304843b151561191b565b51925af16113106116a2565b90611967565b805180611321575050565b81602080611336936101fa950101910161133b565b6118bc565b9081602091031261000e5751801515810361000e5790565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152929391926001600160a01b039190911690602081602481855afa908115611487575b600091611459575b501561140557803b1561000e57604051632142170760e11b81526001600160a01b03938416600482015293909216602484015260448301526000908290606490829084905af180156113f8575b6113eb5750565b8061091d6101fa92610d48565b6114006111d0565b6113e4565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b6064820152608490fd5b0390fd5b61147a915060203d8111611480575b6114728183610dbe565b81019061133b565b38611397565b503d611468565b61148f6111d0565b61138f565b9081602091031261000e5751610cba816101de565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152602092916001600160a01b0316908381602481855afa908115611573575b600091611556575b5015611405576040516331a9108f60e11b815260048101929092528290829060249082905afa918215611549575b60009261152357505090565b610cba9250803d10611542575b61153a8183610dbe565b810190611494565b503d611530565b6115516111d0565b611517565b61156d9150843d8611611480576114728183610dbe565b386114e9565b61157b6111d0565b6114e1565b939492939092916001600160a01b038416156115f557610cba95604051956020870152604086015260ff60f81b9060f81b166060850152604184526115c484610d85565b60405190602082019261190160f01b845260228301526042820152604281526115ec81610d85565b519020906116ff565b60405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e65720000006044820152606490fd5b91908251928382526000905b848210611673575092806020939411611666575b601f01601f1916010190565b600083828401015261165a565b90602090818082850101519082860101520190611646565b604090610cba93928152816020820152019061163a565b3d156116eb573d9067ffffffffffffffff82116116de575b604051916116d2601f8201601f191660200184610dbe565b82523d6000602084013e565b6116e6610d31565b6116ba565b606090565b9081602091031261000e575190565b909161170b81846117ce565b60058110156117b8571590816117a2575b5061179a5760009182916040516117588161174a6020820194630b135d3f60e11b998a87526024840161168b565b03601f198101835282610dbe565b51915afa906117656116a2565b8261178e575b8261177557505090565b61178a919250602080825183010191016116f0565b1490565b8051602014925061176b565b505050600190565b6001600160a01b0384811691161490503861171c565b634e487b7160e01b600052602160045260246000fd5b9060418151146000146117fc576117f8916020820151906060604084015193015160001a90611806565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116118b05760ff16601b811415806118a5575b611899579160809493916020936040519384528484015260408301526060820152600093849182805260015afa1561188c575b81516001600160a01b03811615611886579190565b50600190565b6118946111d0565b611871565b50505050600090600490565b50601c81141561183e565b50505050600090600390565b156118c357565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b1561192257565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b90919015611973575090565b8151156119835750805190602001fd5b60405162461bcd60e51b81526020600482015290819061145590602483019061163a565b60018060a01b039081815116918060208301511691604081015191606082015160808301519060a08401519260e060c086015195015116946040519660208801987f5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb8a5260408901526060880152608087015260a086015260c085015260e084015261010083015261012090818301528152611a4281610da1565b5190209056fea26469706673582212202c774d6b3d4e348ced94a38a08ce137468a24d60c3888c52253117b39f1b4b8464736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c80631b0e15a51461012b578063323d01e51461012257806339a51be5146101195780633a0298eb146101105780634bbe788214610107578063715018a6146100fe5780638da5cb5b146100f5578063ad5c4648146100ec578063bc751724146100e3578063dab400f3146100da578063e711bf1b146100d1578063e8045384146100c8578063f2fde38b146100bf5763f76c9229146100b757600080fd5b61000e610589565b5061000e6104bc565b5061000e61046b565b5061000e610414565b5061000e6103d8565b5061000e6103b6565b5061000e610370565b5061000e610346565b5061000e6102e4565b5061000e61029c565b5061000e61027d565b5061000e610253565b5061000e6101fc565b5061000e610162565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020838186019501011161000e57565b503461000e57608036600319011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e5780600401359082821161000e5736602461016084028301011161000e5760643592831161000e576101ca6101dc933690600401610134565b92909160443591602480359201610722565b005b6001600160a01b0381160361000e57565b35906101fa826101de565b565b503461000e57604036600319011261000e5760043561021a816101de565b60018060a01b0316600052600560205260406000206024356000526020526020604060002054604051908152f35b600091031261000e57565b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576020600254604051908152f35b503461000e57602036600319011261000e576004356102ba816101de565b6102c26105d5565b600180546001600160a01b0319166001600160a01b0392909216919091179055005b503461000e57600080600319360112610343576102ff6105d5565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e576103d06105d5565b600435600255005b503461000e57600036600319011261000e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461000e57602036600319011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e573660248260051b8401011161000e5760246101dc9201610677565b503461000e57604036600319011261000e57600435610489816101de565b60018060a01b031660005260046020526040600020602435600052602052602060ff604060002054166040519015158152f35b503461000e57602036600319011261000e576004356104da816101de565b6104e26105d5565b6001600160a01b0390811690811561053557600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57602036600319011261000e5760043560005260066020526060604060002060018060a01b0381541690600260018201549101549060405192835260208301526040820152f35b6000546001600160a01b031633036105e957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610654570190565b61065c61062d565b0190565b50634e487b7160e01b600052603260045260246000fd5b81156106cd57600090815b83811061068f5750505050565b3360009081526004602052604090206106c891908160051b84013585526020526106c360408520600160ff19825416179055565b610644565b610682565b60405162461bcd60e51b815260206004820152602760248201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60448201526665206e6f6e636560c81b6064820152608490fd5b939490929192600260035414610bdf579484906002600355610745871515610c24565b61075c61075486600254610c7e565b612710900490565b966107678887610c9d565b6040986001600160a01b0397918a91906107b28a6107ab61079e8661078c8a8d610ca9565b01356000526006602052604060002090565b546001600160a01b031690565b1615610cdb565b610834896107ff8561078c8960209c8d95886107d8886107d28686610ca9565b01610d27565b976107f36107e4610de0565b6001600160a01b03909a168a52565b88015284870152610ca9565b815181546001600160a01b0319166001600160a01b039190911617815560208201516001820155604090910151600290910155565b6000908a8c8988859786937f0000000000000000000000000000000000000000000000000000000000000000955b83861061096c57505050505050505061088793929161088191146110f0565b1461114b565b831561093657333b1561000e576108ec6108fe956108e760e0956108ca60006108f2996107d2986109069f51938492839263883b03c78e1b8452600484016111a8565b038183335af18015610929575b610910575b506107d2858c610ca9565b6114a9565b96610ca9565b6001600160a01b031690565b9116146111dd565b6101fa6001600355565b8061091d61092392610d48565b80610248565b386108dc565b6109316111d0565b6108d7565b9050610967965085945060e092506109596107d2926107d28361095f9799610ca9565b94610ca9565b903390611353565b610906565b610977868584610cbd565b9461098186610d27565b6001600160a01b0316600090815260046020908152604080832060c08a013580855292529091205460ff16156109b690610e21565b6109bf87610d27565b6001600160a01b03166000908152600460205260409020600091825260205260409020805460ff191660011790556109f73687610e83565b610a00906119a7565b88610a0a88610d27565b610a176101008a01610f22565b906101408a0135916101208b013591610a2f95611580565b610a3890610f2c565b610a484260a08801351015610f6d565b88610a533688610e83565b608001511015610a6290610fa9565b81610a6e878301610d27565b91610a798786610ca9565b01610a8390610d27565b6001600160a01b0316911614610a9890610ff5565b82610aa38584610ca9565b01358386013514610ab390611041565b60e090610ac1868301610d27565b91610acc8685610ca9565b01610ad690610d27565b6001600160a01b0316911614610aeb9061108d565b60608401359788610afc828c6110d9565b90610b0691611235565b610b11818093610c9d565b998d8d610b1d89610d27565b60015485906001600160a01b0316610b3492611247565b610b3d916110d9565b91610b47916110d9565b610b5091611235565b9a8b610b5b91610c9d565b9a3381610b6788610d27565b91610b7192611247565b610b7a91610c9d565b93610b8490610d27565b6001600160a01b0316600090815260056020526040902092610ba591610ca9565b0135610bba9190600052602052604060002090565b90815490610bc791610c9d565b9055610bd290610644565b898f8f908f918b92610862565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15610c2b57565b60405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b6064820152608490fd5b8060001904821181151516610c91570290565b610c9961062d565b0290565b81198111610654570190565b9015610cb25790565b610cba610660565b90565b9161016091811015610cce57020190565b610cd6610660565b020190565b15610ce257565b60405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c7265616479206578656375746564000000006044820152606490fd5b35610cba816101de565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610d5c57604052565b610d64610d31565b604052565b6040810190811067ffffffffffffffff821117610d5c57604052565b6080810190811067ffffffffffffffff821117610d5c57604052565b610140810190811067ffffffffffffffff821117610d5c57604052565b90601f8019910116810190811067ffffffffffffffff821117610d5c57604052565b604051906060820182811067ffffffffffffffff821117610d5c57604052565b60405190610160820182811067ffffffffffffffff821117610d5c57604052565b15610e2857565b60405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c650000000000000000006044820152606490fd5b60ff81160361000e57565b35906101fa82610e6d565b91908261016091031261000e57610e98610e00565b91610ea2816101ef565b8352610eb0602082016101ef565b602084015260408101356040840152606081013560608401526080810135608084015260a081013560a084015260c081013560c0840152610ef360e082016101ef565b60e0840152610100610f06818301610e78565b9084015261012080820135908401526101408091013590830152565b35610cba81610e6d565b15610f3357565b60405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b6044820152606490fd5b15610f7457565b60405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b6044820152606490fd5b15610fb057565b60405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e27742061636365707420707269636500000000000000006044820152606490fd5b15610ffc57565b60405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d61746368000000000000006044820152606490fd5b1561104857565b60405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d617463680000000000006044820152606490fd5b1561109457565b60405162461bcd60e51b815260206004820152601760248201527f4f726465722064656c6567617465206d69736d617463680000000000000000006044820152606490fd5b8181106110e4570390565b6110ec61062d565b0390565b156110f757565b60405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b6064820152608490fd5b1561115257565b60405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b6064820152608490fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b506040513d6000823e3d90fd5b156111e457565b60405162461bcd60e51b8152602060048201526024808201527f44656c6567617465206973206e6f7420746865206f776e6572206f66207468656044820152630813919560e21b6064820152608490fd5b9080821015611242575090565b905090565b91908161125357505050565b6040516323b872dd60e01b602082019081526001600160a01b03948516602483015291841660448201526064808201939093529182526113169260009182917f000000000000000000000000000000000000000000000000000000000000000016906112c0608486610dbe565b82604051956112ce87610d69565b602087527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020880152611304843b151561191b565b51925af16113106116a2565b90611967565b805180611321575050565b81602080611336936101fa950101910161133b565b6118bc565b9081602091031261000e5751801515810361000e5790565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152929391926001600160a01b039190911690602081602481855afa908115611487575b600091611459575b501561140557803b1561000e57604051632142170760e11b81526001600160a01b03938416600482015293909216602484015260448301526000908290606490829084905af180156113f8575b6113eb5750565b8061091d6101fa92610d48565b6114006111d0565b6113e4565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b6064820152608490fd5b0390fd5b61147a915060203d8111611480575b6114728183610dbe565b81019061133b565b38611397565b503d611468565b61148f6111d0565b61138f565b9081602091031261000e5751610cba816101de565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152602092916001600160a01b0316908381602481855afa908115611573575b600091611556575b5015611405576040516331a9108f60e11b815260048101929092528290829060249082905afa918215611549575b60009261152357505090565b610cba9250803d10611542575b61153a8183610dbe565b810190611494565b503d611530565b6115516111d0565b611517565b61156d9150843d8611611480576114728183610dbe565b386114e9565b61157b6111d0565b6114e1565b939492939092916001600160a01b038416156115f557610cba95604051956020870152604086015260ff60f81b9060f81b166060850152604184526115c484610d85565b60405190602082019261190160f01b845260228301526042820152604281526115ec81610d85565b519020906116ff565b60405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e65720000006044820152606490fd5b91908251928382526000905b848210611673575092806020939411611666575b601f01601f1916010190565b600083828401015261165a565b90602090818082850101519082860101520190611646565b604090610cba93928152816020820152019061163a565b3d156116eb573d9067ffffffffffffffff82116116de575b604051916116d2601f8201601f191660200184610dbe565b82523d6000602084013e565b6116e6610d31565b6116ba565b606090565b9081602091031261000e575190565b909161170b81846117ce565b60058110156117b8571590816117a2575b5061179a5760009182916040516117588161174a6020820194630b135d3f60e11b998a87526024840161168b565b03601f198101835282610dbe565b51915afa906117656116a2565b8261178e575b8261177557505090565b61178a919250602080825183010191016116f0565b1490565b8051602014925061176b565b505050600190565b6001600160a01b0384811691161490503861171c565b634e487b7160e01b600052602160045260246000fd5b9060418151146000146117fc576117f8916020820151906060604084015193015160001a90611806565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116118b05760ff16601b811415806118a5575b611899579160809493916020936040519384528484015260408301526060820152600093849182805260015afa1561188c575b81516001600160a01b03811615611886579190565b50600190565b6118946111d0565b611871565b50505050600090600490565b50601c81141561183e565b50505050600090600390565b156118c357565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b1561192257565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b90919015611973575090565b8151156119835750805190602001fd5b60405162461bcd60e51b81526020600482015290819061145590602483019061163a565b60018060a01b039081815116918060208301511691604081015191606082015160808301519060a08401519260e060c086015195015116946040519660208801987f5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb8a5260408901526060880152608087015260a086015260c085015260e084015261010083015261012090818301528152611a4281610da1565b5190209056fea26469706673582212202c774d6b3d4e348ced94a38a08ce137468a24d60c3888c52253117b39f1b4b8464736f6c634300080d0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFeeFraction(uint256)": {
        "params": {
          "_protocolFeeFraction": "new fee fraction (out of 10_000)"
        }
      },
      "changeProtocolFeeReceiver(address)": {
        "params": {
          "_protocolFeeReceiver": "new receiver"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFeeFraction(uint256)": {
        "notice": "[onlyOwner] Change the protocol fee fraction"
      },
      "changeProtocolFeeReceiver(address)": {
        "notice": "[onlyOwner] Change the protocol fee receiver"
      },
      "executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32)[],uint256,uint256,bytes)": {
        "notice": "Executes on an array of passive buy orders"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2234,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2237,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeFraction",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 137,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2278,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "isUsedBuyNonce",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2284,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "realContributions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2289,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "executions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Execution)2910_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Execution)2910_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Execution)",
        "numberOfBytes": "32",
        "value": "t_struct(Execution)2910_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Execution)2910_storage": {
        "encoding": "inplace",
        "label": "struct Execution",
        "members": [
          {
            "astId": 2905,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "collection",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2907,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "buyPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2909,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}