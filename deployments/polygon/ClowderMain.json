{
  "address": "0xC85b3B585a0d9BbD11095FF49f02fC2ea77c237e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegateFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "buyOrderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeFraction",
          "type": "uint256"
        }
      ],
      "name": "changeProtocolFeeFraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "name": "changeProtocolFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegateFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "buyOrders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeOnPassiveBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "executions",
      "outputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isUsedBuyNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "realContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x44d859932b3845b6afd2fc339ae6b95b33f354439c4f2675a05b2b5eda016121",
  "receipt": {
    "to": null,
    "from": "0x346a7F06100A606eEA152f2281847Fa80f841894",
    "contractAddress": "0xC85b3B585a0d9BbD11095FF49f02fC2ea77c237e",
    "transactionIndex": 28,
    "gasUsed": "1773035",
    "logsBloom": "0x
    "blockHash": "0x1e660820bd86da80ea351edad7c3bcc348029f0d733f56310da0b06057c1ca2a",
    "transactionHash": "0x44d859932b3845b6afd2fc339ae6b95b33f354439c4f2675a05b2b5eda016121",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 44801480,
        "transactionHash": "0x44d859932b3845b6afd2fc339ae6b95b33f354439c4f2675a05b2b5eda016121",
        "address": "0xC85b3B585a0d9BbD11095FF49f02fC2ea77c237e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000346a7f06100a606eea152f2281847fa80f841894"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0x1e660820bd86da80ea351edad7c3bcc348029f0d733f56310da0b06057c1ca2a"
      },
      {
        "transactionIndex": 28,
        "blockNumber": 44801480,
        "transactionHash": "0x44d859932b3845b6afd2fc339ae6b95b33f354439c4f2675a05b2b5eda016121",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000346a7f06100a606eea152f2281847fa80f841894",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000120c4c09ae0ba140000000000000000000000000000000000000000000000003591b0a8a32c99ee0000000000000000000000000000000000000000000004b2b76c37dadd0de7010000000000000000000000000000000000000000000000003470ebe8084bdfda0000000000000000000000000000000000000000000004b2b88cfc9b77eea115",
        "logIndex": 89,
        "blockHash": "0x1e660820bd86da80ea351edad7c3bcc348029f0d733f56310da0b06057c1ca2a"
      }
    ],
    "blockNumber": 44801480,
    "cumulativeGasUsed": "5557181",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
    "0x0f576D7d47c4e6053Ff9231Cb0081269700815Bc",
    "0xB0609004ab23cbb9C4C5037F527Aa7F5BCf4012f"
  ],
  "numDeployments": 1,
  "solcInputHash": "86fb28259c6adf89026019a3fa694617",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegateFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyOrderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeFraction\",\"type\":\"uint256\"}],\"name\":\"changeProtocolFeeFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"changeProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeOnPassiveBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUsedBuyNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFeeFraction(uint256)\":{\"params\":{\"_protocolFeeFraction\":\"new fee fraction (out of 10_000)\"}},\"changeProtocolFeeReceiver(address)\":{\"params\":{\"_protocolFeeReceiver\":\"new receiver\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFeeFraction(uint256)\":{\"notice\":\"[onlyOwner] Change the protocol fee fraction\"},\"changeProtocolFeeReceiver(address)\":{\"notice\":\"[onlyOwner] Change the protocol fee receiver\"},\"executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32)[],uint256,uint256,bytes)\":{\"notice\":\"Executes on an array of passive buy orders\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClowderMain.sol\":\"ClowderMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ClowderMain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\n// _________ .__                   .___\\n// \\\\_   ___ \\\\|  |   ______  _  ____| _/___________\\n// /    \\\\  \\\\/|  |  /  _ \\\\ \\\\/ \\\\/ / __ |/ __ \\\\_  __ \\\\\\n// \\\\     \\\\___|  |_(  <_> )     / /_/ \\\\  ___/|  | \\\\/\\n//  \\\\______  /____/\\\\____/ \\\\/\\\\_/\\\\____ |\\\\___  >__|\\n//         \\\\/                       \\\\/    \\\\/\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {BuyOrderV1, BuyOrderV1Functions} from \\\"./libraries/passiveorders/BuyOrderV1.sol\\\";\\nimport {Execution} from \\\"./libraries/execution/Execution.sol\\\";\\nimport {SafeERC20Transfer} from \\\"./libraries/assettransfer/SafeERC20Transfer.sol\\\";\\nimport {SignatureUtil} from \\\"./libraries/SignatureUtil.sol\\\";\\n// import {OpenSeaUtil} from \\\"./libraries/externalmarketplaces/OpenSeaUtil.sol\\\";\\n// import {LooksRareUtil} from \\\"./libraries/externalmarketplaces/LooksRareUtil.sol\\\";\\nimport {NftCollectionFunctions} from \\\"./libraries/NftCollection.sol\\\";\\nimport {IClowderCallee} from \\\"./interfaces/IClowderCallee.sol\\\";\\n\\nimport {ITraderClowderDelegateV1} from \\\"./delegates/trader/ITraderClowderDelegateV1.sol\\\";\\n\\n\\ncontract ClowderMainOwnable is Ownable {\\n    address public protocolFeeReceiver;\\n    uint256 public protocolFeeFraction = 100; // out of 10_000\\n\\n    /**\\n     * @notice [onlyOwner] Change the protocol fee receiver\\n     * @param _protocolFeeReceiver new receiver\\n     */\\n    function changeProtocolFeeReceiver(\\n        address _protocolFeeReceiver\\n    ) external onlyOwner {\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice [onlyOwner] Change the protocol fee fraction\\n     * @param _protocolFeeFraction new fee fraction (out of 10_000)\\n     */\\n    function changeProtocolFeeFraction(\\n        uint256 _protocolFeeFraction\\n    ) external onlyOwner {\\n        protocolFeeFraction = _protocolFeeFraction;\\n    }\\n}\\n\\ncontract ClowderMain is ClowderMainOwnable, ReentrancyGuard {\\n    address public immutable WETH;\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\n    // TODO: remove when implementing delegate factory recognition;\\n    address public immutable delegateFactory;\\n\\n    // user => nonce => isUsedBuyNonce\\n    mapping(address => mapping(uint256 => bool)) public isUsedBuyNonce;\\n    // buyer => executionId => real contribution\\n    // Returns to zero when the owner is given their part of the\\n    // sale proceeds (claimProceeds).\\n    mapping(address => mapping(uint256 => uint256)) public realContributions;\\n    // executionId => Execution\\n    mapping(uint256 => Execution) public executions;\\n\\n    constructor(address _WETH, address _protocolFeeReceiver, address _delegateFactory) {\\n        WETH = _WETH;\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n        delegateFactory = _delegateFactory;\\n\\n        EIP712_DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ), // EIP712 domain typehash\\n                keccak256(\\\"Clowder\\\"), // name\\n                keccak256(bytes(\\\"0.2\\\")), // version\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function cancelBuyOrders(uint256[] calldata buyOrderNonces) external {\\n        require(\\n            buyOrderNonces.length > 0,\\n            \\\"Cancel: Must provide at least one nonce\\\"\\n        );\\n\\n        for (uint256 i = 0; i < buyOrderNonces.length; i++) {\\n            // if (!isUsedBuyNonce[msg.sender][buyOrderNonces[i]]) {\\n            isUsedBuyNonce[msg.sender][buyOrderNonces[i]] = true; // used\\n            // }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes on an array of passive buy orders\\n     */\\n    function executeOnPassiveBuyOrders(\\n        BuyOrderV1[] calldata buyOrders,\\n        uint256 executorPrice,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external nonReentrant {\\n        require(buyOrders.length > 0, \\\"Execute: Must have at least one order\\\");\\n\\n        uint256 protocolFee = (protocolFeeFraction * executorPrice) / 10_000;\\n        uint256 price = executorPrice + protocolFee;\\n\\n        require(\\n            executions[buyOrders[0].executionId].collection == address(0),\\n            \\\"Execute: Id already executed\\\"\\n        );\\n        // creating the execution object immediately (extra measure to prevent reentrancy)\\n        executions[buyOrders[0].executionId] = Execution({\\n            collection: buyOrders[0].collection,\\n            buyPrice: price,\\n            tokenId: tokenId\\n        });\\n\\n        uint256 protocolFeeTransferred = 0;\\n        uint256 executorPriceTransferred = 0;\\n\\n        // TODO: maybe save gas by tranferring weth only once per owner (signer)\\n        // Possibly receive the data grouped from outside blockchain to\\n        // save gas on the grouping?\\n\\n        address[] memory owners = new address[](buyOrders.length);\\n        uint256[] memory contributions = new uint256[](buyOrders.length);\\n        uint256 ownersLength = 0;\\n\\n        // validate and process all the buy orders\\n        for (uint256 i = 0; i < buyOrders.length; i++) {\\n            BuyOrderV1 calldata order = buyOrders[i];\\n            // Validate order nonce usability\\n            require(\\n                !isUsedBuyNonce[order.signer][order.buyNonce],\\n                \\\"Order nonce is unusable\\\"\\n            );\\n            // Invalidating order nonce immediately (to avoid reentrancy\\n            // or even reusing the signature in this loop)\\n            // DO NOT separate from the above check, otherwise the order\\n            // nonce could be reused. If you need separation\\n            // probably you can check the signer/nonces before \\\"i\\\".\\n            isUsedBuyNonce[order.signer][order.buyNonce] = true;\\n            // Validate order signature\\n            require(\\n                SignatureUtil.verify(\\n                    order.hash(),\\n                    order.signer,\\n                    order.v,\\n                    order.r,\\n                    order.s,\\n                    EIP712_DOMAIN_SEPARATOR\\n                ),\\n                \\\"Signature: Invalid\\\"\\n            );\\n            // Validate the order is not expired\\n            require(order.buyPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\n\\n            // Validate the order can accept the price\\n            require(order.canAcceptBuyPrice(price), \\\"Order can't accept price\\\");\\n            // Validate collection\\n            require(\\n                order.collection == buyOrders[0].collection,\\n                \\\"Order collection mismatch\\\"\\n            );\\n            // Validate executionId\\n            require(\\n                order.executionId == buyOrders[0].executionId,\\n                \\\"Order executionId mismatch\\\"\\n            );\\n            // Validate delegate\\n            require(\\n                order.delegate == buyOrders[0].delegate,\\n                \\\"Order delegate mismatch\\\"\\n            );\\n\\n            uint256 contribution = order.contribution;\\n\\n            // transferring the protocol fee\\n            uint256 protocolWethAmount = Math.min(\\n                protocolFee - protocolFeeTransferred,\\n                contribution\\n            );\\n            protocolFeeTransferred += protocolWethAmount;\\n            _safeTransferWETH(\\n                order.signer,\\n                protocolFeeReceiver,\\n                protocolWethAmount\\n            );\\n\\n            // transferring the protocol executor price\\n            uint256 executorPriceAmount = Math.min(\\n                executorPrice - executorPriceTransferred,\\n                contribution - protocolWethAmount\\n            );\\n            executorPriceTransferred += executorPriceAmount;\\n            _safeTransferWETH(order.signer, msg.sender, executorPriceAmount);\\n\\n            // adding to the real contribution of the signer\\n            uint256 realContribution = protocolWethAmount +\\n                executorPriceAmount;\\n            // check if exists on the owners array\\n            bool exists = false;\\n            for (uint256 j = 0; j < ownersLength; j++) {\\n                if (owners[j] == order.signer) {\\n                    contributions[j] += realContribution;\\n                    exists = true;\\n                    break;\\n                }\\n            }\\n            if (!exists) {\\n                owners[ownersLength] = order.signer;\\n                contributions[ownersLength] = realContribution;\\n                ownersLength++;\\n            }\\n        } // ends the orders for loop\\n\\n        // validating that we transferred the correct amounts of WETH\\n        require(\\n            protocolFeeTransferred == protocolFee,\\n            \\\"Protocol fee not transferred correctly\\\"\\n        );\\n        require(\\n            executorPriceTransferred == executorPrice,\\n            \\\"Executor price not transferred correctly\\\"\\n        );\\n\\n        // getting the actual delegate\\n        address actualDelegate = buyOrders[0].delegate;\\n        // TODO: factory recognition, I mean, check if delegate is a clowder delegate factory\\n        if (actualDelegate == address(0)) {\\n            // instantiate the trader clowder delegate here\\n            actualDelegate = ITraderClowderDelegateV1(\\n                // TODO: when factory recognition is ready just use buyOrders[0].delegate\\n                delegateFactory\\n            ).createNewClone(\\n                owners,\\n                contributions,\\n                price\\n            );\\n        } else {\\n            // otherwise we store the contributions in realContributions here\\n            for (uint256 i = 0; i < owners.length; i++) {\\n                realContributions[owners[i]][buyOrders[0].executionId] = contributions[i];\\n            }\\n        }\\n\\n        if (data.length > 0) {\\n\\n            IClowderCallee(msg.sender).clowderCall(data);\\n\\n            // make sure the delegate is the owner of the NFT\\n            require(\\n                NftCollectionFunctions.ownerOf(\\n                    buyOrders[0].collection,\\n                    tokenId\\n                ) == actualDelegate,\\n                \\\"Delegate is not the owner of the NFT\\\"\\n            );\\n        } else {\\n            // transferring the NFT\\n            NftCollectionFunctions.transferNft(\\n                buyOrders[0].collection,\\n                msg.sender,\\n                actualDelegate,\\n                tokenId\\n            );\\n        }\\n    }\\n\\n    function _safeTransferWETH(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20Transfer.safeERC20Transfer(WETH, from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8d3c51c824ed22489076a890eb805880ead267679cac833d8c193e5968c6d438\",\"license\":\"BUSL-1.1\"},\"contracts/delegates/trader/ITraderClowderDelegateV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\ninterface ITraderClowderDelegateV1 {\\n    function createNewClone(\\n        address[] memory accounts,\\n        uint256[] memory contributions,\\n        uint256 totalContributions\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x20f9bc434b6cc3bc81f0df5460ca0a20a583b616fb398954c115848568f2c8c8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IClowderCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\ninterface IClowderCallee {\\n    function clowderCall(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5707cc39917b654929640894d36fb8cbcd27f190d1d1c1a544e8e352629277f7\",\"license\":\"MIT\"},\"contracts/libraries/NftCollection.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary NftCollectionFunctions {\\n\\n    // interface IDs\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    function transferNft(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\\n        } else {\\n            revert(\\\"Collection does not support ERC721\\\");\\n        }\\n    }\\n\\n    function ownerOf(\\n        address collection,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            return IERC721(collection).ownerOf(tokenId);\\n        } else {\\n            revert(\\\"Collection does not support ERC721\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe15e65bb4ac894bd6aba7871b0aaaf9d6fb08fcb0f639a399f9929b28d26a927\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SignatureUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\nlibrary SignatureUtil {\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"SignatureUtil: Invalid signer\\\");\\n        bytes memory signature = abi.encodePacked(r, s, v);\\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x21f8f5bc63bd44f68c1c1bb715d963a865d86b30ccebf4953089c15388176add\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/assettransfer/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary SafeERC20Transfer {\\n    using SafeERC20 for IERC20;\\n\\n    function safeERC20Transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount != 0) {\\n            IERC20(token).safeTransferFrom(from, to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec633409011657ce1047e8a4fd2de2f4d65e6eb514ba0af2a8e58b2d430ee82e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/execution/Execution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nstruct Execution {\\n    address collection; // zero to evaluate as non-existant\\n    uint256 buyPrice;\\n    uint256 tokenId;\\n}\\n\",\"keccak256\":\"0x3e29676f8c2e236b64498f8b3854e7e0cac14a662dee9a08908f4d337f4753c2\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/passiveorders/BuyOrderV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {SignatureUtil} from \\\"./../SignatureUtil.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Execution} from \\\"./../execution/Execution.sol\\\";\\n\\nusing BuyOrderV1Functions for BuyOrderV1 global;\\n\\n// DO NOT CHANGE the struct, create a new order file instead.\\n// If chaging the struct is extremely necessary, don't forget to \\n// update the hash constant and hash function below.\\nstruct BuyOrderV1 {\\n    \\n    address signer; // order signer\\n\\n    // general order parameters\\n    address collection; // collection address\\n    uint256 executionId; // buy order execution id\\n    uint256 contribution; // WETH contribution\\n\\n    // buy order parameters\\n    uint256 buyPrice; // buy WETH price\\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\\n\\n    // delegate\\n    address delegate;\\n\\n    // signature parameters\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n\\n    // On another note: maybe be careful when using bytes (no fixed) in this struct\\n    // Read the wyvern 2.2 exploit: https://nft.mirror.xyz/VdF3BYwuzXgLrJglw5xF6CHcQfAVbqeJVtueCr4BUzs\\n}\\n\\n/**\\n * @title PassiveTradeOrders\\n * @notice\\n */\\nlibrary BuyOrderV1Functions {\\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb;\\n\\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    PASSIVE_BUY_ORDER_HASH,\\n                    passiveOrder.signer,\\n                    passiveOrder.collection,\\n                    passiveOrder.executionId,\\n                    passiveOrder.contribution,\\n                    passiveOrder.buyPrice,\\n                    passiveOrder.buyPriceEndTime,\\n                    passiveOrder.buyNonce,\\n                    passiveOrder.delegate\\n                )\\n            );\\n    }\\n\\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\n        return passiveOrder.buyPrice >= price;\\n    }\\n\\n    \\n    // Validate signatures (includes interaction with\\n    // other contracts)\\n    // Remember that we give away execution flow\\n    // in case the signer is a contract (isValidSignature)\\n    // function validateSignatures(\\n    //     BuyOrderV1[] calldata orders,\\n    //     bytes32 domainSeparator\\n    // ) public view {\\n    //     for (uint256 i = 0; i < orders.length; i++) {\\n    //         BuyOrderV1 calldata order = orders[i];\\n    //         // Validate order signature\\n    //         bytes32 orderHash = hash(order);\\n    //         require(\\n    //             SignatureUtil.verify(\\n    //                 orderHash,\\n    //                 order.signer,\\n    //                 order.v,\\n    //                 order.r,\\n    //                 order.s,\\n    //                 domainSeparator\\n    //             ),\\n    //             \\\"Signature: Invalid\\\"\\n    //         );\\n    //     }\\n    // }\\n}\\n\",\"keccak256\":\"0xf90a22e9ff34f0d4609e3c9d744c8948d28a078c2e56c443017244dc57639a47\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e08060405234620000a25760608162001f968038038091620000238285620000be565b833981010312620000a257806200003e6200006292620000f1565b906200005b60406200005360208401620000f1565b9201620000f1565b9162000147565b604051611d5790816200023f823960805181818161039b01526115c8015260a05181818161044b0152610b88015260c05181818161040301526109070152f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b03821190821017620000e257604052565b620000ec620000a7565b604052565b51906001600160a01b0382168203620000a257565b60408051919082016001600160401b0381118382101762000137575b604052600382526218171960e91b6020830152565b62000141620000a7565b62000122565b906000549060018060a01b031992338484161760005560018060a01b0392833391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3606460025560016003556080521690600154161760015560c052620001b462000106565b8051602091820120604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9381019384527fc34e769714204ec364edbdd9fbc375bf7fd2e3b10f22abaf631ea6006a288fa79181019190915260608101919091524660808201523060a08083019190915281526200023660c082620000be565b51902060a05256fe60c06040526004361015610013575b600080fd5b60003560e01c80631b0e15a51461013f578063323d01e51461013657806339a51be51461012d5780633a0298eb146101245780634bbe78821461011b578063715018a6146101125780638da5cb5b14610109578063ad5c464814610100578063bc751724146100f7578063c393684e146100ee578063dab400f3146100e5578063e711bf1b146100dc578063e8045384146100d3578063f2fde38b146100ca5763f76c9229146100c257600080fd5b61000e6105e3565b5061000e610516565b5061000e6104c5565b5061000e61046e565b5061000e610432565b5061000e6103ec565b5061000e6103ca565b5061000e610384565b5061000e61035a565b5061000e6102f8565b5061000e6102b0565b5061000e610291565b5061000e610267565b5061000e610210565b5061000e610176565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020838186019501011161000e57565b503461000e57608036600319011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e5780600401359082821161000e5736602461016084028301011161000e5760643592831161000e576101de6101f0933690600401610148565b9290916044359160248035920161077c565b005b6001600160a01b0381160361000e57565b359061020e826101f2565b565b503461000e57604036600319011261000e5760043561022e816101f2565b60018060a01b0316600052600560205260406000206024356000526020526020604060002054604051908152f35b600091031261000e57565b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576020600254604051908152f35b503461000e57602036600319011261000e576004356102ce816101f2565b6102d661062f565b600180546001600160a01b0319166001600160a01b0392909216919091179055005b503461000e576000806003193601126103575761031361062f565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e576103e461062f565b600435600255005b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461000e57602036600319011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e573660248260051b8401011161000e5760246101f092016106d1565b503461000e57604036600319011261000e576004356104e3816101f2565b60018060a01b031660005260046020526040600020602435600052602052602060ff604060002054166040519015158152f35b503461000e57602036600319011261000e57600435610534816101f2565b61053c61062f565b6001600160a01b0390811690811561058f57600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57602036600319011261000e5760043560005260066020526060604060002060018060a01b0381541690600260018201549101549060405192835260208301526040820152f35b6000546001600160a01b0316330361064357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b50634e487b7160e01b600052601160045260246000fd5b60019060001981146106ae570190565b6106b6610687565b0190565b50634e487b7160e01b600052603260045260246000fd5b811561072757600090815b8381106106e95750505050565b33600090815260046020526040902061072291908160051b840135855260205261071d60408520600160ff19825416179055565b61069e565b6106dc565b60405162461bcd60e51b815260206004820152602760248201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60448201526665206e6f6e636560c81b6064820152608490fd5b94939291909360a052600260035414610e0257600260035561079f841515610e47565b6107b66107ae82600254610ea1565b612710900490565b906107c18282610ec0565b916108056001600160a01b036107fe6107f160406107df8b8d610ecc565b01356000526006602052604060002090565b546001600160a01b031690565b1615610efe565b61088761081d6020610817898b610ecc565b01610f4a565b610837610828611003565b6001600160a01b039092168252565b84602082015285604082015261085260406107df8a8c610ecc565b815181546001600160a01b0319166001600160a01b039190911617815560208201516001820155604090910151600290910155565b600091826108948861106b565b9261089e8961106b565b9480815b8b8110610ada5750506108c19392916108bb911461138e565b146113e9565b6108d060e0610817888a610ecc565b6001600160a01b038116610a455750906020916109016040519485938493635c64f61960e01b85526004850161145b565b038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115610a38575b600091610a09575b50925b60a051156109e757333b1561000e57602061081761099f926109b79761098760006109a4986040518093819263883b03c760e01b835260a05190600484016114ea565b038183335af180156109da575b6109c1575b50610ecc565b611823565b6001600160a01b03908116911614611512565b61020e6001600355565b806109ce6109d492610f6b565b8061025c565b38610999565b6109e26114dd565b610994565b610a04949193925060206108176109ff923394610ecc565b6116e2565b6109b7565b610a2b915060203d602011610a31575b610a238183610fe1565b810190611446565b38610941565b503d610a19565b610a406114dd565b610939565b91939694909597925060005b8651811015610acd578087610ac28b6040610ab2610aab610a91610a8488610a7d8f9b610ac89c61136c565b519861136c565b516001600160a01b031690565b6001600160a01b0316600090815260056020526040902090565b928c610ecc565b0135600052602052604060002090565b5561069e565b610a51565b5093959250935094610944565b8c8c610ae7838284610ee0565b91610af183610f4a565b6001600160a01b0316600090815260046020908152604080832060c087013580855292529091205460ff1615610b269061109d565b610b2f84610f4a565b6001600160a01b03166000908152600460205260409020600091825260205260409020805460ff19166001179055610b6736846110ff565b610b7090611c80565b610b7984610f4a565b610b86610100860161119e565b7f0000000000000000000000000000000000000000000000000000000000000000916101408701359161012088013591610bbf956118ea565b610bc8906111a8565b610bd84260a085013510156111e9565b8b610be336856110ff565b608001511015610bf290611225565b610bfe60208401610f4a565b610c088383610ecc565b602001610c1490610f4a565b6001600160a01b0316610c30916001600160a01b031614611271565b610c3a8282610ecc565b60400135604084013514610c4d906112bd565b60e090610c5b848301610f4a565b92610c6591610ecc565b01610c6f90610f4a565b6001600160a01b0316610c8b916001600160a01b031614611309565b60608101359384610c9c8288611355565b90610ca69161156a565b610cb1818093610ec0565b95610cbb84610f4a565b60015483906001600160a01b0316610cd29261157c565b610cdc898b611355565b91610ce691611355565b610cef9161156a565b9687610cfa91610ec0565b963381610d0685610f4a565b91610d109261157c565b610d1991610ec0565b90600060805260005b828b8b878410610d90575b5050505060805115610d4a575b5050610d459061069e565b6108a2565b92610d8891610d78610d5f610d459596610f4a565b610d69848d61136c565b6001600160a01b039091169052565b610d82828c61136c565b5261069e565b919038610d3a565b610a8484610d9d9261136c565b610db5610da986610f4a565b6001600160a01b031690565b6001600160a01b0390911614610dd5575050610dd09061069e565b610d22565b610df391610de684610dec9361136c565b51610ec0565b918c61136c565b52600160805238828b8b610d2d565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15610e4e57565b60405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b6064820152608490fd5b8060001904821181151516610eb4570290565b610ebc610687565b0290565b811981116106ae570190565b9015610ed55790565b610edd6106ba565b90565b9161016091811015610ef157020190565b610ef96106ba565b020190565b15610f0557565b60405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c7265616479206578656375746564000000006044820152606490fd5b35610edd816101f2565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610f7f57604052565b610f87610f54565b604052565b6040810190811067ffffffffffffffff821117610f7f57604052565b6080810190811067ffffffffffffffff821117610f7f57604052565b610140810190811067ffffffffffffffff821117610f7f57604052565b90601f8019910116810190811067ffffffffffffffff821117610f7f57604052565b604051906060820182811067ffffffffffffffff821117610f7f57604052565b60405190610160820182811067ffffffffffffffff821117610f7f57604052565b60209067ffffffffffffffff811161105e575b60051b0190565b611066610f54565b611057565b9061107582611044565b6110826040519182610fe1565b8281528092611093601f1991611044565b0190602036910137565b156110a457565b60405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c650000000000000000006044820152606490fd5b60ff81160361000e57565b359061020e826110e9565b91908261016091031261000e57611114611023565b9161111e81610203565b835261112c60208201610203565b602084015260408101356040840152606081013560608401526080810135608084015260a081013560a084015260c081013560c084015261116f60e08201610203565b60e08401526101006111828183016110f4565b9084015261012080820135908401526101408091013590830152565b35610edd816110e9565b156111af57565b60405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b6044820152606490fd5b156111f057565b60405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b6044820152606490fd5b1561122c57565b60405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e27742061636365707420707269636500000000000000006044820152606490fd5b1561127857565b60405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d61746368000000000000006044820152606490fd5b156112c457565b60405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d617463680000000000006044820152606490fd5b1561131057565b60405162461bcd60e51b815260206004820152601760248201527f4f726465722064656c6567617465206d69736d617463680000000000000000006044820152606490fd5b818110611360570390565b611368610687565b0390565b6020918151811015611381575b60051b010190565b6113896106ba565b611379565b1561139557565b60405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b6064820152608490fd5b156113f057565b60405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b6064820152608490fd5b9081602091031261000e5751610edd816101f2565b93929160608501606086528251809152608086019060208094019060005b8181106114c0575050508581038387015282808351928381520192019260005b8281106114ac5750505060409150930152565b845184529381019392810192600101611499565b82516001600160a01b031684529285019291850191600101611479565b506040513d6000823e3d90fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b1561151957565b60405162461bcd60e51b8152602060048201526024808201527f44656c6567617465206973206e6f7420746865206f776e6572206f66207468656044820152630813919560e21b6064820152608490fd5b9080821015611577575090565b905090565b9190918161158957505050565b6040516323b872dd60e01b60208083019182526001600160a01b03938416602484015294831660448301526064808301949094529281526116429290917f0000000000000000000000000000000000000000000000000000000000000000169060009081906115f9608486610fe1565b6040519461160686610f8c565b8786527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656488870152519082855af161163c611b99565b91611be7565b8051908282159283156116b2575b5050501561165b5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6116c293508201810191016116ca565b388281611650565b9081602091031261000e5751801515810361000e5790565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152929391926001600160a01b039190911690602081602481855afa908115611816575b6000916117e8575b501561179457803b1561000e57604051632142170760e11b81526001600160a01b03938416600482015293909216602484015260448301526000908290606490829084905af18015611787575b61177a5750565b806109ce61020e92610f6b565b61178f6114dd565b611773565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b6064820152608490fd5b0390fd5b611809915060203d811161180f575b6118018183610fe1565b8101906116ca565b38611726565b503d6117f7565b61181e6114dd565b61171e565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152602092916001600160a01b0316908381602481855afa9081156118dd575b6000916118c0575b5015611794576040516331a9108f60e11b815260048101929092528290829060249082905afa9182156118b3575b60009261189d57505090565b610edd9250803d10610a3157610a238183610fe1565b6118bb6114dd565b611891565b6118d79150843d861161180f576118018183610fe1565b38611863565b6118e56114dd565b61185b565b91949293909290916001600160a01b0384161561194f57610edd95604293604051966020880152604087015260ff60f81b9060f81b1660608601526041855261193285610fa8565b6040519161190160f01b8352600283015260228201522090611994565b60405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e65720000006044820152606490fd5b61199e8383611a80565b6005819592951015611a6a57159384611a54575b5083156119c0575b50505090565b6000929350908291604051611a07816119f96020820194630b135d3f60e11b998a87526024840152604060448401526064830190611b48565b03601f198101835282610fe1565b51915afa90611a14611b99565b82611a46575b82611a2a575b50503880806119ba565b90915060208180518101031261000e5760200151143880611a20565b915060208251101591611a1a565b6001600160a01b038381169116149350386119b2565b634e487b7160e01b600052602160045260246000fd5b906041815114600014611aae57611aaa916020820151906060604084015193015160001a90611ab8565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311611b3c5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15611b2f575b81516001600160a01b03811615611b29579190565b50600190565b611b376114dd565b611b14565b50505050600090600390565b91908251928382526000905b848210611b81575092806020939411611b74575b601f01601f1916010190565b6000838284010152611b68565b90602090818082850101519082860101520190611b54565b3d15611be2573d9067ffffffffffffffff8211611bd5575b60405191611bc9601f8201601f191660200184610fe1565b82523d6000602084013e565b611bdd610f54565b611bb1565b606090565b91929015611c495750815115611bfb575090565b3b15611c045790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611c5c5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906117e4906024830190611b48565b60018060a01b039081815116918060208301511691604081015191606082015160808301519060a08401519260e060c086015195015116946040519660208801987f5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb8a5260408901526060880152608087015260a086015260c085015260e084015261010083015261012090818301528152611d1b81610fc4565b5190209056fea2646970667358221220344aff821561897e2cc170bde30b86cab58ed272dd996e127ba52c797bea932a64736f6c634300080d0033",
  "deployedBytecode": "0x60c06040526004361015610013575b600080fd5b60003560e01c80631b0e15a51461013f578063323d01e51461013657806339a51be51461012d5780633a0298eb146101245780634bbe78821461011b578063715018a6146101125780638da5cb5b14610109578063ad5c464814610100578063bc751724146100f7578063c393684e146100ee578063dab400f3146100e5578063e711bf1b146100dc578063e8045384146100d3578063f2fde38b146100ca5763f76c9229146100c257600080fd5b61000e6105e3565b5061000e610516565b5061000e6104c5565b5061000e61046e565b5061000e610432565b5061000e6103ec565b5061000e6103ca565b5061000e610384565b5061000e61035a565b5061000e6102f8565b5061000e6102b0565b5061000e610291565b5061000e610267565b5061000e610210565b5061000e610176565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020838186019501011161000e57565b503461000e57608036600319011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e5780600401359082821161000e5736602461016084028301011161000e5760643592831161000e576101de6101f0933690600401610148565b9290916044359160248035920161077c565b005b6001600160a01b0381160361000e57565b359061020e826101f2565b565b503461000e57604036600319011261000e5760043561022e816101f2565b60018060a01b0316600052600560205260406000206024356000526020526020604060002054604051908152f35b600091031261000e57565b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576020600254604051908152f35b503461000e57602036600319011261000e576004356102ce816101f2565b6102d661062f565b600180546001600160a01b0319166001600160a01b0392909216919091179055005b503461000e576000806003193601126103575761031361062f565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e576103e461062f565b600435600255005b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461000e57602036600319011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e573660248260051b8401011161000e5760246101f092016106d1565b503461000e57604036600319011261000e576004356104e3816101f2565b60018060a01b031660005260046020526040600020602435600052602052602060ff604060002054166040519015158152f35b503461000e57602036600319011261000e57600435610534816101f2565b61053c61062f565b6001600160a01b0390811690811561058f57600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57602036600319011261000e5760043560005260066020526060604060002060018060a01b0381541690600260018201549101549060405192835260208301526040820152f35b6000546001600160a01b0316330361064357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b50634e487b7160e01b600052601160045260246000fd5b60019060001981146106ae570190565b6106b6610687565b0190565b50634e487b7160e01b600052603260045260246000fd5b811561072757600090815b8381106106e95750505050565b33600090815260046020526040902061072291908160051b840135855260205261071d60408520600160ff19825416179055565b61069e565b6106dc565b60405162461bcd60e51b815260206004820152602760248201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60448201526665206e6f6e636560c81b6064820152608490fd5b94939291909360a052600260035414610e0257600260035561079f841515610e47565b6107b66107ae82600254610ea1565b612710900490565b906107c18282610ec0565b916108056001600160a01b036107fe6107f160406107df8b8d610ecc565b01356000526006602052604060002090565b546001600160a01b031690565b1615610efe565b61088761081d6020610817898b610ecc565b01610f4a565b610837610828611003565b6001600160a01b039092168252565b84602082015285604082015261085260406107df8a8c610ecc565b815181546001600160a01b0319166001600160a01b039190911617815560208201516001820155604090910151600290910155565b600091826108948861106b565b9261089e8961106b565b9480815b8b8110610ada5750506108c19392916108bb911461138e565b146113e9565b6108d060e0610817888a610ecc565b6001600160a01b038116610a455750906020916109016040519485938493635c64f61960e01b85526004850161145b565b038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115610a38575b600091610a09575b50925b60a051156109e757333b1561000e57602061081761099f926109b79761098760006109a4986040518093819263883b03c760e01b835260a05190600484016114ea565b038183335af180156109da575b6109c1575b50610ecc565b611823565b6001600160a01b03908116911614611512565b61020e6001600355565b806109ce6109d492610f6b565b8061025c565b38610999565b6109e26114dd565b610994565b610a04949193925060206108176109ff923394610ecc565b6116e2565b6109b7565b610a2b915060203d602011610a31575b610a238183610fe1565b810190611446565b38610941565b503d610a19565b610a406114dd565b610939565b91939694909597925060005b8651811015610acd578087610ac28b6040610ab2610aab610a91610a8488610a7d8f9b610ac89c61136c565b519861136c565b516001600160a01b031690565b6001600160a01b0316600090815260056020526040902090565b928c610ecc565b0135600052602052604060002090565b5561069e565b610a51565b5093959250935094610944565b8c8c610ae7838284610ee0565b91610af183610f4a565b6001600160a01b0316600090815260046020908152604080832060c087013580855292529091205460ff1615610b269061109d565b610b2f84610f4a565b6001600160a01b03166000908152600460205260409020600091825260205260409020805460ff19166001179055610b6736846110ff565b610b7090611c80565b610b7984610f4a565b610b86610100860161119e565b7f0000000000000000000000000000000000000000000000000000000000000000916101408701359161012088013591610bbf956118ea565b610bc8906111a8565b610bd84260a085013510156111e9565b8b610be336856110ff565b608001511015610bf290611225565b610bfe60208401610f4a565b610c088383610ecc565b602001610c1490610f4a565b6001600160a01b0316610c30916001600160a01b031614611271565b610c3a8282610ecc565b60400135604084013514610c4d906112bd565b60e090610c5b848301610f4a565b92610c6591610ecc565b01610c6f90610f4a565b6001600160a01b0316610c8b916001600160a01b031614611309565b60608101359384610c9c8288611355565b90610ca69161156a565b610cb1818093610ec0565b95610cbb84610f4a565b60015483906001600160a01b0316610cd29261157c565b610cdc898b611355565b91610ce691611355565b610cef9161156a565b9687610cfa91610ec0565b963381610d0685610f4a565b91610d109261157c565b610d1991610ec0565b90600060805260005b828b8b878410610d90575b5050505060805115610d4a575b5050610d459061069e565b6108a2565b92610d8891610d78610d5f610d459596610f4a565b610d69848d61136c565b6001600160a01b039091169052565b610d82828c61136c565b5261069e565b919038610d3a565b610a8484610d9d9261136c565b610db5610da986610f4a565b6001600160a01b031690565b6001600160a01b0390911614610dd5575050610dd09061069e565b610d22565b610df391610de684610dec9361136c565b51610ec0565b918c61136c565b52600160805238828b8b610d2d565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15610e4e57565b60405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b6064820152608490fd5b8060001904821181151516610eb4570290565b610ebc610687565b0290565b811981116106ae570190565b9015610ed55790565b610edd6106ba565b90565b9161016091811015610ef157020190565b610ef96106ba565b020190565b15610f0557565b60405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c7265616479206578656375746564000000006044820152606490fd5b35610edd816101f2565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610f7f57604052565b610f87610f54565b604052565b6040810190811067ffffffffffffffff821117610f7f57604052565b6080810190811067ffffffffffffffff821117610f7f57604052565b610140810190811067ffffffffffffffff821117610f7f57604052565b90601f8019910116810190811067ffffffffffffffff821117610f7f57604052565b604051906060820182811067ffffffffffffffff821117610f7f57604052565b60405190610160820182811067ffffffffffffffff821117610f7f57604052565b60209067ffffffffffffffff811161105e575b60051b0190565b611066610f54565b611057565b9061107582611044565b6110826040519182610fe1565b8281528092611093601f1991611044565b0190602036910137565b156110a457565b60405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c650000000000000000006044820152606490fd5b60ff81160361000e57565b359061020e826110e9565b91908261016091031261000e57611114611023565b9161111e81610203565b835261112c60208201610203565b602084015260408101356040840152606081013560608401526080810135608084015260a081013560a084015260c081013560c084015261116f60e08201610203565b60e08401526101006111828183016110f4565b9084015261012080820135908401526101408091013590830152565b35610edd816110e9565b156111af57565b60405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b6044820152606490fd5b156111f057565b60405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b6044820152606490fd5b1561122c57565b60405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e27742061636365707420707269636500000000000000006044820152606490fd5b1561127857565b60405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d61746368000000000000006044820152606490fd5b156112c457565b60405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d617463680000000000006044820152606490fd5b1561131057565b60405162461bcd60e51b815260206004820152601760248201527f4f726465722064656c6567617465206d69736d617463680000000000000000006044820152606490fd5b818110611360570390565b611368610687565b0390565b6020918151811015611381575b60051b010190565b6113896106ba565b611379565b1561139557565b60405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b6064820152608490fd5b156113f057565b60405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b6064820152608490fd5b9081602091031261000e5751610edd816101f2565b93929160608501606086528251809152608086019060208094019060005b8181106114c0575050508581038387015282808351928381520192019260005b8281106114ac5750505060409150930152565b845184529381019392810192600101611499565b82516001600160a01b031684529285019291850191600101611479565b506040513d6000823e3d90fd5b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b1561151957565b60405162461bcd60e51b8152602060048201526024808201527f44656c6567617465206973206e6f7420746865206f776e6572206f66207468656044820152630813919560e21b6064820152608490fd5b9080821015611577575090565b905090565b9190918161158957505050565b6040516323b872dd60e01b60208083019182526001600160a01b03938416602484015294831660448301526064808301949094529281526116429290917f0000000000000000000000000000000000000000000000000000000000000000169060009081906115f9608486610fe1565b6040519461160686610f8c565b8786527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656488870152519082855af161163c611b99565b91611be7565b8051908282159283156116b2575b5050501561165b5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6116c293508201810191016116ca565b388281611650565b9081602091031261000e5751801515810361000e5790565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152929391926001600160a01b039190911690602081602481855afa908115611816575b6000916117e8575b501561179457803b1561000e57604051632142170760e11b81526001600160a01b03938416600482015293909216602484015260448301526000908290606490829084905af18015611787575b61177a5750565b806109ce61020e92610f6b565b61178f6114dd565b611773565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b6064820152608490fd5b0390fd5b611809915060203d811161180f575b6118018183610fe1565b8101906116ca565b38611726565b503d6117f7565b61181e6114dd565b61171e565b6040516301ffc9a760e01b81526380ac58cd60e01b6004820152602092916001600160a01b0316908381602481855afa9081156118dd575b6000916118c0575b5015611794576040516331a9108f60e11b815260048101929092528290829060249082905afa9182156118b3575b60009261189d57505090565b610edd9250803d10610a3157610a238183610fe1565b6118bb6114dd565b611891565b6118d79150843d861161180f576118018183610fe1565b38611863565b6118e56114dd565b61185b565b91949293909290916001600160a01b0384161561194f57610edd95604293604051966020880152604087015260ff60f81b9060f81b1660608601526041855261193285610fa8565b6040519161190160f01b8352600283015260228201522090611994565b60405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e65720000006044820152606490fd5b61199e8383611a80565b6005819592951015611a6a57159384611a54575b5083156119c0575b50505090565b6000929350908291604051611a07816119f96020820194630b135d3f60e11b998a87526024840152604060448401526064830190611b48565b03601f198101835282610fe1565b51915afa90611a14611b99565b82611a46575b82611a2a575b50503880806119ba565b90915060208180518101031261000e5760200151143880611a20565b915060208251101591611a1a565b6001600160a01b038381169116149350386119b2565b634e487b7160e01b600052602160045260246000fd5b906041815114600014611aae57611aaa916020820151906060604084015193015160001a90611ab8565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311611b3c5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15611b2f575b81516001600160a01b03811615611b29579190565b50600190565b611b376114dd565b611b14565b50505050600090600390565b91908251928382526000905b848210611b81575092806020939411611b74575b601f01601f1916010190565b6000838284010152611b68565b90602090818082850101519082860101520190611b54565b3d15611be2573d9067ffffffffffffffff8211611bd5575b60405191611bc9601f8201601f191660200184610fe1565b82523d6000602084013e565b611bdd610f54565b611bb1565b606090565b91929015611c495750815115611bfb575090565b3b15611c045790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611c5c5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906117e4906024830190611b48565b60018060a01b039081815116918060208301511691604081015191606082015160808301519060a08401519260e060c086015195015116946040519660208801987f5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb8a5260408901526060880152608087015260a086015260c085015260e084015261010083015261012090818301528152611d1b81610fc4565b5190209056fea2646970667358221220344aff821561897e2cc170bde30b86cab58ed272dd996e127ba52c797bea932a64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFeeFraction(uint256)": {
        "params": {
          "_protocolFeeFraction": "new fee fraction (out of 10_000)"
        }
      },
      "changeProtocolFeeReceiver(address)": {
        "params": {
          "_protocolFeeReceiver": "new receiver"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFeeFraction(uint256)": {
        "notice": "[onlyOwner] Change the protocol fee fraction"
      },
      "changeProtocolFeeReceiver(address)": {
        "notice": "[onlyOwner] Change the protocol fee receiver"
      },
      "executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32)[],uint256,uint256,bytes)": {
        "notice": "Executes on an array of passive buy orders"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3758,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3761,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeFraction",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 306,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3804,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "isUsedBuyNonce",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3810,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "realContributions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3815,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "executions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Execution)7672_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Execution)7672_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Execution)",
        "numberOfBytes": "32",
        "value": "t_struct(Execution)7672_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Execution)7672_storage": {
        "encoding": "inplace",
        "label": "struct Execution",
        "members": [
          {
            "astId": 7667,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "collection",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7669,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "buyPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7671,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}