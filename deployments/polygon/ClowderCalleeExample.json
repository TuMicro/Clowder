{
  "address": "0x203d231e2e7c0380971D58C4bf37E5Ac7F6B9D8c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_clowderMain",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wNativeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ExternalCallFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "clowderCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clowderMain",
      "outputs": [
        {
          "internalType": "contract ClowderMain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "buyOrders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wNativeToken",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0cde7bbcf030ed5ea7aa2b3cefeac5252f96c7ea8c1b1102d29d43c3b4cb69cf",
  "receipt": {
    "to": null,
    "from": "0x346a7F06100A606eEA152f2281847Fa80f841894",
    "contractAddress": "0x203d231e2e7c0380971D58C4bf37E5Ac7F6B9D8c",
    "transactionIndex": 52,
    "gasUsed": "779368",
    "logsBloom": "0x
    "blockHash": "0x0c601097da6813df818a3c1354dee3e27629bf360bc3f91ce011fecdfe17626b",
    "transactionHash": "0x0cde7bbcf030ed5ea7aa2b3cefeac5252f96c7ea8c1b1102d29d43c3b4cb69cf",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 42912123,
        "transactionHash": "0x0cde7bbcf030ed5ea7aa2b3cefeac5252f96c7ea8c1b1102d29d43c3b4cb69cf",
        "address": "0x203d231e2e7c0380971D58C4bf37E5Ac7F6B9D8c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000346a7f06100a606eea152f2281847fa80f841894"
        ],
        "data": "0x",
        "logIndex": 234,
        "blockHash": "0x0c601097da6813df818a3c1354dee3e27629bf360bc3f91ce011fecdfe17626b"
      },
      {
        "transactionIndex": 52,
        "blockNumber": 42912123,
        "transactionHash": "0x0cde7bbcf030ed5ea7aa2b3cefeac5252f96c7ea8c1b1102d29d43c3b4cb69cf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000346a7f06100a606eea152f2281847fa80f841894",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004eeedfd58b51e8000000000000000000000000000000000000000000000000408d35996e7c30320000000000000000000000000000000000000000000000ed0972a0264636e5f7000000000000000000000000000000000000000000000000403e46b998f0de4a0000000000000000000000000000000000000000000000ed09c18f061bc237df",
        "logIndex": 235,
        "blockHash": "0x0c601097da6813df818a3c1354dee3e27629bf360bc3f91ce011fecdfe17626b"
      }
    ],
    "blockNumber": 42912123,
    "cumulativeGasUsed": "10706833",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x17B50399918383eDF842DeCa072430684ec1f9e7",
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270"
  ],
  "numDeployments": 1,
  "solcInputHash": "ba5e6ef7dc4ccd5eb178e770fac39322",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clowderMain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wNativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ExternalCallFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"clowderCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clowderMain\",\"outputs\":[{\"internalType\":\"contract ClowderMain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNativeToken\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/ClowderCalleeExample.sol\":\"ClowderCalleeExample\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/ClowderMain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\n// _________ .__                   .___\\n// \\\\_   ___ \\\\|  |   ______  _  ____| _/___________\\n// /    \\\\  \\\\/|  |  /  _ \\\\ \\\\/ \\\\/ / __ |/ __ \\\\_  __ \\\\\\n// \\\\     \\\\___|  |_(  <_> )     / /_/ \\\\  ___/|  | \\\\/\\n//  \\\\______  /____/\\\\____/ \\\\/\\\\_/\\\\____ |\\\\___  >__|\\n//         \\\\/                       \\\\/    \\\\/\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {BuyOrderV1, BuyOrderV1Functions} from \\\"./libraries/passiveorders/BuyOrderV1.sol\\\";\\nimport {Execution} from \\\"./libraries/execution/Execution.sol\\\";\\nimport {SafeERC20Transfer} from \\\"./libraries/assettransfer/SafeERC20Transfer.sol\\\";\\nimport {SignatureUtil} from \\\"./libraries/SignatureUtil.sol\\\";\\n// import {OpenSeaUtil} from \\\"./libraries/externalmarketplaces/OpenSeaUtil.sol\\\";\\n// import {LooksRareUtil} from \\\"./libraries/externalmarketplaces/LooksRareUtil.sol\\\";\\nimport {NftCollectionFunctions} from \\\"./libraries/NftCollection.sol\\\";\\nimport {IClowderCallee} from \\\"./interfaces/IClowderCallee.sol\\\";\\n\\ncontract ClowderMainOwnable is Ownable {\\n    address public protocolFeeReceiver;\\n    uint256 public protocolFeeFraction = 100; // out of 10_000\\n\\n    /**\\n     * @notice [onlyOwner] Change the protocol fee receiver\\n     * @param _protocolFeeReceiver new receiver\\n     */\\n    function changeProtocolFeeReceiver(\\n        address _protocolFeeReceiver\\n    ) external onlyOwner {\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice [onlyOwner] Change the protocol fee fraction\\n     * @param _protocolFeeFraction new fee fraction (out of 10_000)\\n     */\\n    function changeProtocolFeeFraction(\\n        uint256 _protocolFeeFraction\\n    ) external onlyOwner {\\n        protocolFeeFraction = _protocolFeeFraction;\\n    }\\n}\\n\\ncontract ClowderMain is ClowderMainOwnable, ReentrancyGuard {\\n    address public immutable WETH;\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\n\\n    // user => nonce => isUsedBuyNonce\\n    mapping(address => mapping(uint256 => bool)) public isUsedBuyNonce;\\n    // buyer => executionId => real contribution\\n    // Returns to zero when the owner is given their part of the\\n    // sale proceeds (claimProceeds).\\n    mapping(address => mapping(uint256 => uint256)) public realContributions;\\n    // executionId => Execution\\n    mapping(uint256 => Execution) public executions;\\n\\n    constructor(address _WETH, address _protocolFeeReceiver) {\\n        WETH = _WETH;\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n\\n        EIP712_DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ), // EIP712 domain typehash\\n                keccak256(\\\"Clowder\\\"), // name\\n                keccak256(bytes(\\\"0.2\\\")), // version\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function cancelBuyOrders(uint256[] calldata buyOrderNonces) external {\\n        require(\\n            buyOrderNonces.length > 0,\\n            \\\"Cancel: Must provide at least one nonce\\\"\\n        );\\n\\n        for (uint256 i = 0; i < buyOrderNonces.length; i++) {\\n            // if (!isUsedBuyNonce[msg.sender][buyOrderNonces[i]]) {\\n            isUsedBuyNonce[msg.sender][buyOrderNonces[i]] = true; // used\\n            // }\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes on an array of passive buy orders\\n     */\\n    function executeOnPassiveBuyOrders(\\n        BuyOrderV1[] calldata buyOrders,\\n        uint256 executorPrice,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external nonReentrant {\\n        require(buyOrders.length > 0, \\\"Execute: Must have at least one order\\\");\\n\\n        uint256 protocolFee = (protocolFeeFraction * executorPrice) / 10_000;\\n        uint256 price = executorPrice + protocolFee;\\n\\n        require(\\n            executions[buyOrders[0].executionId].collection == address(0),\\n            \\\"Execute: Id already executed\\\"\\n        );\\n        // creating the execution object immediately (extra measure to prevent reentrancy)\\n        executions[buyOrders[0].executionId] = Execution({\\n            collection: buyOrders[0].collection,\\n            buyPrice: price,\\n            tokenId: tokenId\\n        });\\n\\n        uint256 protocolFeeTransferred = 0;\\n        uint256 executorPriceTransferred = 0;\\n\\n        // TODO: maybe group contributions by signer\\n        // so that we save gas by doing only one or two transfers per signer\\n        // Possibly recieve the data grouped from outside blockchain to\\n        // save gas on the grouping.\\n\\n        // validate and process all the buy orders\\n        for (uint256 i = 0; i < buyOrders.length; i++) {\\n            BuyOrderV1 calldata order = buyOrders[i];\\n            // Validate order nonce usability\\n            require(\\n                !isUsedBuyNonce[order.signer][order.buyNonce],\\n                \\\"Order nonce is unusable\\\"\\n            );\\n            // Invalidating order nonce immediately (to avoid reentrancy\\n            // or even reusing the signature in this loop)\\n            // DO NOT separate from the above check, otherwise the order\\n            // nonce could be reused. If you need separation\\n            // probably you can check the signer/nonces before \\\"i\\\".\\n            isUsedBuyNonce[order.signer][order.buyNonce] = true;\\n            // Validate order signature\\n            require(\\n                SignatureUtil.verify(\\n                    order.hash(),\\n                    order.signer,\\n                    order.v,\\n                    order.r,\\n                    order.s,\\n                    EIP712_DOMAIN_SEPARATOR\\n                ),\\n                \\\"Signature: Invalid\\\"\\n            );\\n            // Validate the order is not expired\\n            require(order.buyPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\n\\n            // Validate the order can accept the price\\n            require(order.canAcceptBuyPrice(price), \\\"Order can't accept price\\\");\\n            // Validate collection\\n            require(\\n                order.collection == buyOrders[0].collection,\\n                \\\"Order collection mismatch\\\"\\n            );\\n            // Validate executionId\\n            require(\\n                order.executionId == buyOrders[0].executionId,\\n                \\\"Order executionId mismatch\\\"\\n            );\\n            // Validate delegate\\n            require(\\n                order.delegate == buyOrders[0].delegate,\\n                \\\"Order delegate mismatch\\\"\\n            );\\n\\n            uint256 contribution = order.contribution;\\n\\n            // transferring the protocol fee\\n            uint256 protocolWethAmount = Math.min(\\n                protocolFee - protocolFeeTransferred,\\n                contribution\\n            );\\n            protocolFeeTransferred += protocolWethAmount;\\n            _safeTransferWETH(\\n                order.signer,\\n                protocolFeeReceiver,\\n                protocolWethAmount\\n            );\\n\\n            // transferring the protocol executor price\\n            uint256 executorPriceAmount = Math.min(\\n                executorPrice - executorPriceTransferred,\\n                contribution - protocolWethAmount\\n            );\\n            executorPriceTransferred += executorPriceAmount;\\n            _safeTransferWETH(order.signer, msg.sender, executorPriceAmount);\\n\\n            // adding to the real contribution of the signer\\n            realContributions[order.signer][buyOrders[0].executionId] +=\\n                protocolWethAmount +\\n                executorPriceAmount;\\n        } // ends the orders for loop\\n\\n        // validating that we transferred the correct amounts of WETH\\n        require(\\n            protocolFeeTransferred == protocolFee,\\n            \\\"Protocol fee not transferred correctly\\\"\\n        );\\n        require(\\n            executorPriceTransferred == executorPrice,\\n            \\\"Executor price not transferred correctly\\\"\\n        );\\n\\n        if (data.length > 0) {\\n\\n            IClowderCallee(msg.sender).clowderCall(data);\\n\\n            // make sure the delegate is the owner of the NFT\\n            require(\\n                NftCollectionFunctions.ownerOf(\\n                    buyOrders[0].collection,\\n                    tokenId\\n                ) == buyOrders[0].delegate,\\n                \\\"Delegate is not the owner of the NFT\\\"\\n            );\\n        } else {\\n            // transferring the NFT\\n            NftCollectionFunctions.transferNft(\\n                buyOrders[0].collection,\\n                msg.sender,\\n                buyOrders[0].delegate,\\n                tokenId\\n            );\\n        }\\n    }\\n\\n    function _safeTransferWETH(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20Transfer.safeERC20Transfer(WETH, from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x81a90c92917d982947dfc5750a0de6ca5b132eb8c4798e9b755dff140214ae64\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IClowderCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\ninterface IClowderCallee {\\n    function clowderCall(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5707cc39917b654929640894d36fb8cbcd27f190d1d1c1a544e8e352629277f7\",\"license\":\"MIT\"},\"contracts/interfaces/IWeth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x02aab500fc220ae4f26cda3eefc351b7a1532cd89cdc8239011f0fccdde6acc8\",\"license\":\"MIT\"},\"contracts/libraries/NftCollection.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nlibrary NftCollectionFunctions {\\n\\n    // interface IDs\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    function transferNft(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\\n        } else {\\n            revert(\\\"Collection does not support ERC721\\\");\\n        }\\n    }\\n\\n    function ownerOf(\\n        address collection,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\n            return IERC721(collection).ownerOf(tokenId);\\n        } else {\\n            revert(\\\"Collection does not support ERC721\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe15e65bb4ac894bd6aba7871b0aaaf9d6fb08fcb0f639a399f9929b28d26a927\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SignatureUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\nlibrary SignatureUtil {\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"SignatureUtil: Invalid signer\\\");\\n        bytes memory signature = abi.encodePacked(r, s, v);\\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\\n    }\\n}\\n\",\"keccak256\":\"0x21f8f5bc63bd44f68c1c1bb715d963a865d86b30ccebf4953089c15388176add\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/assettransfer/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary SafeERC20Transfer {\\n    using SafeERC20 for IERC20;\\n\\n    function safeERC20Transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount != 0) {\\n            IERC20(token).safeTransferFrom(from, to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec633409011657ce1047e8a4fd2de2f4d65e6eb514ba0af2a8e58b2d430ee82e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/execution/Execution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nstruct Execution {\\n    address collection; // zero to evaluate as non-existant\\n    uint256 buyPrice;\\n    uint256 tokenId;\\n}\\n\",\"keccak256\":\"0x3e29676f8c2e236b64498f8b3854e7e0cac14a662dee9a08908f4d337f4753c2\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/passiveorders/BuyOrderV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.13;\\n\\nimport {SignatureUtil} from \\\"./../SignatureUtil.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Execution} from \\\"./../execution/Execution.sol\\\";\\n\\nusing BuyOrderV1Functions for BuyOrderV1 global;\\n\\n// DO NOT CHANGE the struct, create a new order file instead.\\n// If chaging the struct is extremely necessary, don't forget to \\n// update the hash constant and hash function below.\\nstruct BuyOrderV1 {\\n    \\n    address signer; // order signer\\n\\n    // general order parameters\\n    address collection; // collection address\\n    uint256 executionId; // buy order execution id\\n    uint256 contribution; // WETH contribution\\n\\n    // buy order parameters\\n    uint256 buyPrice; // buy WETH price\\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\\n\\n    // delegate\\n    address delegate;\\n\\n    // signature parameters\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n\\n    // On another note: maybe be careful when using bytes (no fixed) in this struct\\n    // Read the wyvern 2.2 exploit: https://nft.mirror.xyz/VdF3BYwuzXgLrJglw5xF6CHcQfAVbqeJVtueCr4BUzs\\n}\\n\\n/**\\n * @title PassiveTradeOrders\\n * @notice\\n */\\nlibrary BuyOrderV1Functions {\\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x5747656214602028f3803e6af1a359d7948c36532bd38d033969d6c4b13e73eb;\\n\\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    PASSIVE_BUY_ORDER_HASH,\\n                    passiveOrder.signer,\\n                    passiveOrder.collection,\\n                    passiveOrder.executionId,\\n                    passiveOrder.contribution,\\n                    passiveOrder.buyPrice,\\n                    passiveOrder.buyPriceEndTime,\\n                    passiveOrder.buyNonce,\\n                    passiveOrder.delegate\\n                )\\n            );\\n    }\\n\\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\n        return passiveOrder.buyPrice >= price;\\n    }\\n\\n    \\n    // Validate signatures (includes interaction with\\n    // other contracts)\\n    // Remember that we give away execution flow\\n    // in case the signer is a contract (isValidSignature)\\n    // function validateSignatures(\\n    //     BuyOrderV1[] calldata orders,\\n    //     bytes32 domainSeparator\\n    // ) public view {\\n    //     for (uint256 i = 0; i < orders.length; i++) {\\n    //         BuyOrderV1 calldata order = orders[i];\\n    //         // Validate order signature\\n    //         bytes32 orderHash = hash(order);\\n    //         require(\\n    //             SignatureUtil.verify(\\n    //                 orderHash,\\n    //                 order.signer,\\n    //                 order.v,\\n    //                 order.r,\\n    //                 order.s,\\n    //                 domainSeparator\\n    //             ),\\n    //             \\\"Signature: Invalid\\\"\\n    //         );\\n    //     }\\n    // }\\n}\\n\",\"keccak256\":\"0xf90a22e9ff34f0d4609e3c9d744c8948d28a078c2e56c443017244dc57639a47\",\"license\":\"BUSL-1.1\"},\"contracts/test/ClowderCalleeExample.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nimport {IClowderCallee} from \\\"../interfaces/IClowderCallee.sol\\\";\\n\\nimport {BuyOrderV1} from \\\"../libraries/passiveorders/BuyOrderV1.sol\\\";\\nimport {ClowderMain} from \\\"../ClowderMain.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWeth.sol\\\";\\n\\nstruct CallInfo {\\n    uint256 value;\\n    address to;\\n    bytes data;\\n}\\n\\ncontract ClowderCalleeExample is IClowderCallee, Ownable {\\n    ClowderMain public immutable clowderMain;\\n    IWETH public immutable wNativeToken;\\n\\n    constructor(address _clowderMain, address _wNativeToken) {\\n        clowderMain = ClowderMain(_clowderMain);\\n        wNativeToken = IWETH(_wNativeToken);\\n    }\\n\\n    error ExternalCallFailed(uint256 index);\\n\\n    // To be able to receive NFTs\\n    // Note: parameters must stay as it is a standard\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    // to be able to receive eth\\n    receive() external payable {}\\n\\n    function clowderCall(bytes calldata data) external {\\n        require(\\n            msg.sender == address(clowderMain),\\n            \\\"ClowderCalleeExample: clowderCall can only be called by ClowderMain\\\"\\n        );\\n        // it's not necessary to check who originally called ClowderMain.executeOnPassiveBuyOrders\\n        // because ClowderMain only calls this function on the sender of the transaction\\n\\n        // intented to buy and transfer the NFT, left open for the\\n        // caller to implement according to each marketplace's API\\n        (CallInfo[] memory calls, address _excessWNativeTokenReceiver) = abi\\n            .decode(data, (CallInfo[], address));\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool _success, ) = calls[i].to.call{value: calls[i].value}(\\n                calls[i].data\\n            );\\n            if (!_success) {\\n                revert ExternalCallFailed(i);\\n            }\\n        }\\n\\n        // transfer any excess wNativeToken to _excessWNativeTokenReceiver\\n        // as this contract shouldn't keep any wNativeToken\\n        uint256 _excessWNativeToken = wNativeToken.balanceOf(address(this));\\n        if (_excessWNativeToken > 0) {\\n            wNativeToken.transfer(\\n                _excessWNativeTokenReceiver,\\n                _excessWNativeToken\\n            );\\n        }\\n    }\\n\\n    function execute(\\n        BuyOrderV1[] calldata buyOrders,\\n        uint256 executorPrice,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable onlyOwner {\\n        clowderMain.executeOnPassiveBuyOrders(\\n            buyOrders,\\n            executorPrice,\\n            tokenId,\\n            data\\n        );\\n    }\\n\\n    // arbitrary call for pre-approvals, etc\\n    function call(\\n        address payable _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external payable onlyOwner returns (bytes memory) {\\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\\n        require(_success, \\\"ClowderCalleeExample: external call failed\\\");\\n        return _result;\\n    }\\n}\\n\",\"keccak256\":\"0xeb585596c4b59deee3a0c951eb30d681ab4d4c86ddbccd30b805c259df483e2a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c03461009257601f610dc038819003918201601f19168301916001600160401b038311848410176100975780849260409485528339810103126100925780610056602061004f61005c946100ad565b92016100ad565b906100c1565b604051610ca8908161011882396080518181816101ed015281816103fc0152610aae015260a0518181816101a701526104d30152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361009257565b60008054336001600160a01b03198216811783556040516001600160a01b039594869490938516917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3166080521660a05256fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063150b7a02146100cf57806359c91f19146100c65780635fb7bd57146100bd5780636dbf2fa0146100b4578063715018a6146100ab578063883b03c7146100a25780638da5cb5b14610099578063b27acf77146100905763f2fde38b0361000e5761008b610675565b61000e565b5061008b610600565b5061008b6105d6565b5061008b6103b4565b5061008b610352565b5061008b610273565b5061008b6101d6565b5061008b610190565b5061008b610129565b6001600160a01b038116036100e957565b600080fd5b35906100f9826100d8565b565b9181601f840112156100e95782359167ffffffffffffffff83116100e957602083818601950101116100e957565b50346100e95760803660031901126100e9576101466004356100d8565b6101516024356100d8565b60643567ffffffffffffffff81116100e9576101719036906004016100fb565b5050604051630a85bd0160e11b8152602090f35b60009103126100e957565b50346100e95760003660031901126100e9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346100e95760003660031901126100e9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b919091602080825283519081818401526000945b82861061025d575050806040939411610250575b601f01601f1916010190565b6000838284010152610244565b8581018201518487016040015294810194610230565b5060603660031901126100e95760043561028c816100d8565b60443567ffffffffffffffff81116100e9576000916102b0839236906004016100fb565b906102b9610742565b81604051928392833781018481520391602435906001600160a01b03165af16102e0610a3a565b90156102fa576102f6906040519182918261021c565b0390f35b60405162461bcd60e51b815260206004820152602a60248201527f436c6f7764657243616c6c65654578616d706c653a2065787465726e616c2063604482015269185b1b0819985a5b195960b21b6064820152608490fd5b50346100e9576000806003193601126103b15761036d610742565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346100e9576020806003193601126100e957600480359167ffffffffffffffff83116100e9576103eb61042b93369084016100fb565b6001600160a01b03949190610423337f000000000000000000000000000000000000000000000000000000000000000088161461079a565b8101906108b9565b9360005b82518110156104b657610455846104468386610a10565b5101516001600160a01b031690565b6000806104628487610a10565b515160409384610472878a610a10565b510151918983519301915af1610486610a3a565b501561049b5750610496906109eb565b61042f565b5163e3b41f2160e01b81528086019182529081906020010390fd5b6040516370a0823160e01b815230818701908152859190889088907f000000000000000000000000000000000000000000000000000000000000000087169087908690869081906020010381855afa9485156105c9575b60009561059a575b508461051d57005b600086946105566040519788968795869463a9059cbb60e01b86521690840160209093929193604081019460018060a01b031681520152565b03925af1801561058d575b61056757005b8161001992903d10610586575b61057e818361086c565b810190610a86565b503d610574565b610595610a79565b610561565b6105bb919550863d88116105c2575b6105b3818361086c565b810190610a6a565b9386610515565b503d6105a9565b6105d1610a79565b61050d565b50346100e95760003660031901126100e9576000546040516001600160a01b039091168152602090f35b5060803660031901126100e95767ffffffffffffffff6004358181116100e957366023820112156100e9578060040135908282116100e9573660246101608402830101116100e9576064359283116100e9576106636100199336906004016100fb565b92909160443591602480359201610a9e565b50346100e95760203660031901126100e957600435610693816100d8565b61069b610742565b6001600160a01b039081169081156106ee57600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6000546001600160a01b0316330361075657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156107a157565b60405162461bcd60e51b815260206004820152604360248201527f436c6f7764657243616c6c65654578616d706c653a20636c6f7764657243616c60448201527f6c2063616e206f6e6c792062652063616c6c656420627920436c6f776465724d60648201526230b4b760e91b608482015260a490fd5b50634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761084b57604052565b610853610818565b604052565b67ffffffffffffffff811161084b57604052565b90601f8019910116810190811067ffffffffffffffff82111761084b57604052565b60209067ffffffffffffffff81116108ac575b601f01601f19160190565b6108b4610818565b6108a1565b919060409081848203126100e95767ffffffffffffffff9184358381116100e95785019082601f830112156100e9578135938085116109de575b8460051b9082519460209661090a8885018861086c565b86528680870193860101948186116100e957878101935b86851061093e57505050505050509061093b9193016100ee565b90565b84358481116100e95782019060609182601f1982870301126100e9578751926109668461082f565b8b820135845288820135610979816100d8565b8c850152810135908682116100e957019084603f830112156100e9578a820135926109a38461088e565b6109af8a51918261086c565b848152868a86860101116100e95760008d8681978d839801838601378301015289820152815201940193610921565b6109e6610818565b6108f3565b60001981146109fa5760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015610a245760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b3d15610a65573d90610a4b8261088e565b91610a59604051938461086c565b82523d6000602084013e565b606090565b908160209103126100e9575190565b506040513d6000823e3d90fd5b908160209103126100e9575180151581036100e95790565b929491939094610aac610742565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031694853b156100e95760408051631b0e15a560e01b8152608060048201819052608482018a90529098899760a48901979695949390926000915b838310610b7657505050505060009694869488948694610b449460248701526044860152600319858403016064860152610c51565b03925af18015610b69575b610b565750565b80610b636100f992610858565b80610185565b610b71610a79565b610b4f565b9193995091939495969780610b9d600192610b908d6100ee565b6001600160a01b03169052565b610bbc6020610bad818e016100ee565b6001600160a01b031690830152565b8a830135818401526060808c013590820152838b01358482015260a0808c01359082015260c0808c013590820152610bfa60e0610bad818e016100ee565b610c14610100610c0b818e01610c43565b60ff1690830152565b610120808c013590820152610140808c0135908201526101608091019a01930190918b99989796959492610b0f565b359060ff821682036100e957565b908060209392818452848401376000828201840152601f01601f191601019056fea26469706673582212203a216e8dec4adefca124fc01e4b20b5e7178c5b40334315db16e9e9fb787258664736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063150b7a02146100cf57806359c91f19146100c65780635fb7bd57146100bd5780636dbf2fa0146100b4578063715018a6146100ab578063883b03c7146100a25780638da5cb5b14610099578063b27acf77146100905763f2fde38b0361000e5761008b610675565b61000e565b5061008b610600565b5061008b6105d6565b5061008b6103b4565b5061008b610352565b5061008b610273565b5061008b6101d6565b5061008b610190565b5061008b610129565b6001600160a01b038116036100e957565b600080fd5b35906100f9826100d8565b565b9181601f840112156100e95782359167ffffffffffffffff83116100e957602083818601950101116100e957565b50346100e95760803660031901126100e9576101466004356100d8565b6101516024356100d8565b60643567ffffffffffffffff81116100e9576101719036906004016100fb565b5050604051630a85bd0160e11b8152602090f35b60009103126100e957565b50346100e95760003660031901126100e9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346100e95760003660031901126100e9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b919091602080825283519081818401526000945b82861061025d575050806040939411610250575b601f01601f1916010190565b6000838284010152610244565b8581018201518487016040015294810194610230565b5060603660031901126100e95760043561028c816100d8565b60443567ffffffffffffffff81116100e9576000916102b0839236906004016100fb565b906102b9610742565b81604051928392833781018481520391602435906001600160a01b03165af16102e0610a3a565b90156102fa576102f6906040519182918261021c565b0390f35b60405162461bcd60e51b815260206004820152602a60248201527f436c6f7764657243616c6c65654578616d706c653a2065787465726e616c2063604482015269185b1b0819985a5b195960b21b6064820152608490fd5b50346100e9576000806003193601126103b15761036d610742565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b50346100e9576020806003193601126100e957600480359167ffffffffffffffff83116100e9576103eb61042b93369084016100fb565b6001600160a01b03949190610423337f000000000000000000000000000000000000000000000000000000000000000088161461079a565b8101906108b9565b9360005b82518110156104b657610455846104468386610a10565b5101516001600160a01b031690565b6000806104628487610a10565b515160409384610472878a610a10565b510151918983519301915af1610486610a3a565b501561049b5750610496906109eb565b61042f565b5163e3b41f2160e01b81528086019182529081906020010390fd5b6040516370a0823160e01b815230818701908152859190889088907f000000000000000000000000000000000000000000000000000000000000000087169087908690869081906020010381855afa9485156105c9575b60009561059a575b508461051d57005b600086946105566040519788968795869463a9059cbb60e01b86521690840160209093929193604081019460018060a01b031681520152565b03925af1801561058d575b61056757005b8161001992903d10610586575b61057e818361086c565b810190610a86565b503d610574565b610595610a79565b610561565b6105bb919550863d88116105c2575b6105b3818361086c565b810190610a6a565b9386610515565b503d6105a9565b6105d1610a79565b61050d565b50346100e95760003660031901126100e9576000546040516001600160a01b039091168152602090f35b5060803660031901126100e95767ffffffffffffffff6004358181116100e957366023820112156100e9578060040135908282116100e9573660246101608402830101116100e9576064359283116100e9576106636100199336906004016100fb565b92909160443591602480359201610a9e565b50346100e95760203660031901126100e957600435610693816100d8565b61069b610742565b6001600160a01b039081169081156106ee57600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6000546001600160a01b0316330361075657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156107a157565b60405162461bcd60e51b815260206004820152604360248201527f436c6f7764657243616c6c65654578616d706c653a20636c6f7764657243616c60448201527f6c2063616e206f6e6c792062652063616c6c656420627920436c6f776465724d60648201526230b4b760e91b608482015260a490fd5b50634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761084b57604052565b610853610818565b604052565b67ffffffffffffffff811161084b57604052565b90601f8019910116810190811067ffffffffffffffff82111761084b57604052565b60209067ffffffffffffffff81116108ac575b601f01601f19160190565b6108b4610818565b6108a1565b919060409081848203126100e95767ffffffffffffffff9184358381116100e95785019082601f830112156100e9578135938085116109de575b8460051b9082519460209661090a8885018861086c565b86528680870193860101948186116100e957878101935b86851061093e57505050505050509061093b9193016100ee565b90565b84358481116100e95782019060609182601f1982870301126100e9578751926109668461082f565b8b820135845288820135610979816100d8565b8c850152810135908682116100e957019084603f830112156100e9578a820135926109a38461088e565b6109af8a51918261086c565b848152868a86860101116100e95760008d8681978d839801838601378301015289820152815201940193610921565b6109e6610818565b6108f3565b60001981146109fa5760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015610a245760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b3d15610a65573d90610a4b8261088e565b91610a59604051938461086c565b82523d6000602084013e565b606090565b908160209103126100e9575190565b506040513d6000823e3d90fd5b908160209103126100e9575180151581036100e95790565b929491939094610aac610742565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031694853b156100e95760408051631b0e15a560e01b8152608060048201819052608482018a90529098899760a48901979695949390926000915b838310610b7657505050505060009694869488948694610b449460248701526044860152600319858403016064860152610c51565b03925af18015610b69575b610b565750565b80610b636100f992610858565b80610185565b610b71610a79565b610b4f565b9193995091939495969780610b9d600192610b908d6100ee565b6001600160a01b03169052565b610bbc6020610bad818e016100ee565b6001600160a01b031690830152565b8a830135818401526060808c013590820152838b01358482015260a0808c01359082015260c0808c013590820152610bfa60e0610bad818e016100ee565b610c14610100610c0b818e01610c43565b60ff1690830152565b610120808c013590820152610140808c0135908201526101608091019a01930190918b99989796959492610b0f565b359060ff821682036100e957565b908060209392818452848401376000828201840152601f01601f191601019056fea26469706673582212203a216e8dec4adefca124fc01e4b20b5e7178c5b40334315db16e9e9fb787258664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/test/ClowderCalleeExample.sol:ClowderCalleeExample",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}