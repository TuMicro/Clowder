{
  "language": "Solidity",
  "sources": {
    "contracts/ClowderMain.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\n// _________ .__                   .___\r\n// \\_   ___ \\|  |   ______  _  ____| _/___________\r\n// /    \\  \\/|  |  /  _ \\ \\/ \\/ / __ |/ __ \\_  __ \\\r\n// \\     \\___|  |_(  <_> )     / /_/ \\  ___/|  | \\/\r\n//  \\______  /____/\\____/ \\/\\_/\\____ |\\___  >__|\r\n//         \\/                       \\/    \\/\r\n\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\r\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\r\n\r\nimport {BuyOrderV1, BuyOrderV1Functions} from \"./libraries/passiveorders/BuyOrderV1.sol\";\r\nimport {Execution} from \"./libraries/execution/Execution.sol\";\r\nimport {SafeERC20Transfer} from \"./libraries/assettransfer/SafeERC20Transfer.sol\";\r\nimport {SignatureUtil} from \"./libraries/SignatureUtil.sol\";\r\n// import {OpenSeaUtil} from \"./libraries/externalmarketplaces/OpenSeaUtil.sol\";\r\n// import {LooksRareUtil} from \"./libraries/externalmarketplaces/LooksRareUtil.sol\";\r\nimport {NftCollectionFunctions} from \"./libraries/NftCollection.sol\";\r\n\r\ncontract ClowderMainOwnable is Ownable {\r\n    address public protocolFeeReceiver;\r\n    uint256 public protocolFeeFraction = 100; // out of 10_000\r\n    uint256 public protocolFeeFractionFromSelling = 100; // out of 10_000\r\n    uint256 public minConsensusForSellingOverBuyPrice = 5_000; // out of 10_000\r\n    uint256 public minConsensusForSellingUnderOrEqualBuyPrice = 10_000; // out of 10_000\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the protocol fee receiver\r\n     * @param _protocolFeeReceiver new receiver\r\n     */\r\n    function changeProtocolFeeReceiver(address _protocolFeeReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        protocolFeeReceiver = _protocolFeeReceiver;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the protocol fee fraction\r\n     * @param _protocolFeeFraction new fee fraction (out of 10_000)\r\n     */\r\n    function changeProtocolFeeFraction(uint256 _protocolFeeFraction)\r\n        external\r\n        onlyOwner\r\n    {\r\n        protocolFeeFraction = _protocolFeeFraction;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the protocol fee fraction from selling\r\n     * @param _protocolFeeFractionFromSelling new fee fraction (out of 10_000)\r\n     */\r\n    function changeProtocolFeeFractionFromSelling(\r\n        uint256 _protocolFeeFractionFromSelling\r\n    ) external onlyOwner {\r\n        protocolFeeFractionFromSelling = _protocolFeeFractionFromSelling;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the min consensus for selling over or equal to buy price\r\n     * @param _minConsensusForSellingOverBuyPrice new min consensus (out of 10_000)\r\n     */\r\n    function changeminConsensusForSellingOverBuyPrice(\r\n        uint256 _minConsensusForSellingOverBuyPrice\r\n    ) external onlyOwner {\r\n        minConsensusForSellingOverBuyPrice = _minConsensusForSellingOverBuyPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the min consensus for selling under buy price\r\n     * @param _minConsensusForSellingUnderOrEqualBuyPrice new min consensus (out of 10_000)\r\n     */\r\n    function changeminConsensusForSellingUnderOrEqualBuyPrice(\r\n        uint256 _minConsensusForSellingUnderOrEqualBuyPrice\r\n    ) external onlyOwner {\r\n        minConsensusForSellingUnderOrEqualBuyPrice = _minConsensusForSellingUnderOrEqualBuyPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Allow the owner to withdraw any NFT owned by the contract.\r\n     * Will be used to delegate management of groupally owned NFTs to other contracts.\r\n     * @param _to address to send the NFT to\r\n     * @param _nftCollection address of the NFT collection\r\n     * @param _tokenId ID of the NFT\r\n     */\r\n    function transferNft(\r\n        address _to,\r\n        address _nftCollection,\r\n        uint256 _tokenId\r\n    ) external onlyOwner {\r\n        NftCollectionFunctions.transferNft(\r\n            _nftCollection,\r\n            address(this),\r\n            _to,\r\n            _tokenId\r\n        );\r\n        // TODO: maybe mark the execution as sold so\r\n        // in case it is bought again by another execution\r\n        // the old owners can't approve/execute sell orders over the NFT.\r\n        // Although we probably will separate/remove any \r\n        // post-buy handling mechanism from this contract.\r\n    }\r\n}\r\n\r\ncontract ClowderMain is\r\n    ClowderMainOwnable,\r\n    ReentrancyGuard,\r\n    ERC721Holder,\r\n    ERC1155Holder,\r\n    IERC1271\r\n{\r\n    address public immutable WETH;\r\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\r\n\r\n    // user => nonce => isUsedBuyNonce\r\n    mapping(address => mapping(uint256 => bool)) public isUsedBuyNonce;\r\n    // user => nonce => isUsedSellNonce\r\n    mapping(address => mapping(uint256 => bool)) public isUsedSellNonce;\r\n    // buyer => executionId => real contribution\r\n    // Returns to zero when the owner is given their part of the\r\n    // sale proceeds (claimProceeds).\r\n    mapping(address => mapping(uint256 => uint256)) public realContributions;\r\n    // executionId => Execution\r\n    mapping(uint256 => Execution) public executions;\r\n\r\n    /* Events */\r\n    // event OpenSeaOrderSet(\r\n    //     OpenSeaUtil.OpenSeaOrder order,\r\n    //     bytes32 paramsOrderHash\r\n    // );\r\n\r\n    constructor(address _WETH, address _protocolFeeReceiver) {\r\n        WETH = _WETH;\r\n        protocolFeeReceiver = _protocolFeeReceiver;\r\n\r\n        EIP712_DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ), // EIP712 domain typehash\r\n                keccak256(\"Clowder\"), // name\r\n                keccak256(bytes(\"0.1\")), // version\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function cancelBuyOrders(uint256[] calldata buyOrderNonces) external {\r\n        require(\r\n            buyOrderNonces.length > 0,\r\n            \"Cancel: Must provide at least one nonce\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < buyOrderNonces.length; i++) {\r\n            // if (!isUsedBuyNonce[msg.sender][buyOrderNonces[i]]) {\r\n            isUsedBuyNonce[msg.sender][buyOrderNonces[i]] = true; // used\r\n            // }\r\n        }\r\n    }\r\n\r\n    function cancelSellOrders(uint256[] calldata sellOrderNonces) external {\r\n        require(\r\n            sellOrderNonces.length > 0,\r\n            \"Cancel: Must provide at least one nonce\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < sellOrderNonces.length; i++) {\r\n            isUsedSellNonce[msg.sender][sellOrderNonces[i]] = true; // cancelled\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Executes on an array of passive buy orders\r\n     */\r\n    function executeOnPassiveBuyOrders(\r\n        BuyOrderV1[] calldata buyOrders,\r\n        uint256 executorPrice,\r\n        uint256 tokenId\r\n    ) external nonReentrant {\r\n        require(buyOrders.length > 0, \"Execute: Must have at least one order\");\r\n\r\n        uint256 protocolFee = (protocolFeeFraction * executorPrice) / 10_000;\r\n        uint256 price = executorPrice + protocolFee;\r\n        address collection = buyOrders[0].collection;\r\n        uint256 executionId = buyOrders[0].executionId;\r\n\r\n        require(\r\n            executions[executionId].collection == address(0),\r\n            \"Execute: Id already executed\"\r\n        );\r\n        // creating the execution object immediately (extra measure to prevent reentrancy)\r\n        executions[executionId] = Execution({\r\n            collection: collection,\r\n            buyPrice: price,\r\n            tokenId: tokenId,\r\n            sold: false,\r\n            sellPrice: 0,\r\n            listingEndTime: 0,\r\n            sellProtocolFee: 0,\r\n            openSeaOrderHash: bytes32(0),\r\n            looksRareOrderHash: bytes32(0)\r\n        });\r\n\r\n        uint256 protocolFeeTransferred = 0;\r\n        uint256 executorPriceTransferred = 0;\r\n\r\n        // TODO: maybe group contributions by signer\r\n        // so that we save gas by doing only one or two transfers per signer\r\n        // Possibly recieve the data grouped from outside blockchain to \r\n        // save gas on the grouping.\r\n\r\n        // validate and process all the buy orders\r\n        for (uint256 i = 0; i < buyOrders.length; i++) {\r\n            BuyOrderV1 calldata order = buyOrders[i];\r\n            // Validate order nonce usability\r\n            require(\r\n                !isUsedBuyNonce[order.signer][order.buyNonce],\r\n                \"Order nonce is unusable\"\r\n            );\r\n            // Invalidating order nonce immediately (to avoid reentrancy\r\n            // or even reusing the signature in this loop)\r\n            // DO NOT separate from the above check, otherwise the order\r\n            // nonce could be reused (you can check the\r\n            // executeOnPassiveSellOrders for guidance). If you need separation\r\n            // probably you can check the signer/nonces before \"i\".\r\n            isUsedBuyNonce[order.signer][order.buyNonce] = true;\r\n            // Validate order signature\r\n            bytes32 orderHash = order.hash();\r\n            require(\r\n                SignatureUtil.verify(\r\n                    orderHash,\r\n                    order.signer,\r\n                    order.v,\r\n                    order.r,\r\n                    order.s,\r\n                    EIP712_DOMAIN_SEPARATOR\r\n                ),\r\n                \"Signature: Invalid\"\r\n            );\r\n            // Validate the order is not expired\r\n            require(order.buyPriceEndTime >= block.timestamp, \"Order expired\");\r\n\r\n            // Validate the order can accept the price\r\n            require(order.canAcceptBuyPrice(price), \"Order can't accept price\");\r\n            // Validate collection\r\n            require(\r\n                order.collection == collection,\r\n                \"Order collection mismatch\"\r\n            );\r\n            // Validate executionId\r\n            require(\r\n                order.executionId == executionId,\r\n                \"Order executionId mismatch\"\r\n            );\r\n\r\n            uint256 contribution = order.contribution;\r\n\r\n            // transferring the protocol fee\r\n            uint256 protocolWethAmount = Math.min(\r\n                protocolFee - protocolFeeTransferred,\r\n                contribution\r\n            );\r\n            protocolFeeTransferred += protocolWethAmount;\r\n            _safeTransferWETH(\r\n                order.signer,\r\n                protocolFeeReceiver,\r\n                protocolWethAmount\r\n            );\r\n\r\n            // transferring the protocol executor price\r\n            uint256 executorPriceAmount = Math.min(\r\n                executorPrice - executorPriceTransferred,\r\n                contribution - protocolWethAmount\r\n            );\r\n            executorPriceTransferred += executorPriceAmount;\r\n            _safeTransferWETH(order.signer, msg.sender, executorPriceAmount);\r\n\r\n            // adding to the real contribution of the signer\r\n            uint256 realContribution = protocolWethAmount + executorPriceAmount;\r\n            realContributions[order.signer][executionId] += realContribution;\r\n        } // ends the orders for loop\r\n\r\n        // validating that we transferred the correct amounts of WETH\r\n        require(\r\n            protocolFeeTransferred == protocolFee,\r\n            \"Protocol fee not transferred correctly\"\r\n        );\r\n        require(\r\n            executorPriceTransferred == executorPrice,\r\n            \"Executor price not transferred correctly\"\r\n        );\r\n\r\n        // transferring the NFT\r\n        NftCollectionFunctions.transferNft(\r\n            collection,\r\n            msg.sender,\r\n            address(this),\r\n            tokenId\r\n        );\r\n    }\r\n\r\n    function _invalidateNonces(BuyOrderV1[] calldata orders) internal {\r\n        // Invalidating nonces\r\n        for (uint256 i = 0; i < orders.length; i++) {\r\n            BuyOrderV1 calldata order = orders[i];\r\n            // Invalidating order nonce (to avoid reentrancy)\r\n            isUsedSellNonce[order.signer][order.sellNonce] = true;\r\n        }\r\n    }\r\n\r\n    function executeOnPassiveSellOrders(\r\n        BuyOrderV1[] calldata orders,\r\n        uint256 executorPrice\r\n    ) external nonReentrant {\r\n        require(orders.length > 0, \"ExecuteSell: Must have at least one order\");\r\n\r\n        uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\r\n            10_000;\r\n        uint256 price = executorPrice - protocolFee;\r\n        uint256 executionId = orders[0].executionId;\r\n\r\n        Execution storage execution = executions[executionId];\r\n\r\n        /* Validations */\r\n\r\n        require(execution.collection != address(0), \"Execution doesn't exist\");\r\n\r\n        require(!execution.sold, \"Execution already sold\");\r\n\r\n        BuyOrderV1Functions.validateSellOrdersParameters(\r\n            isUsedSellNonce,\r\n            realContributions,\r\n            orders,\r\n            executionId,\r\n            execution,\r\n            price,\r\n            minConsensusForSellingOverBuyPrice,\r\n            minConsensusForSellingUnderOrEqualBuyPrice\r\n        );\r\n\r\n        /* Invalidations */\r\n\r\n        _invalidateNonces(orders);\r\n\r\n        // marking as sold (to prevent reentrancy)\r\n        execution.sold = true;\r\n\r\n        // storing the price to be distributed among the owners\r\n        execution.sellPrice = price;\r\n\r\n        // We don't store protocol fees here as they are only used for\r\n        // claiming them, and we don't need claiming here because\r\n        // we are already transferring them.\r\n\r\n        /* Giving away execution flow */\r\n\r\n        // Validate signatures (includes interaction with\r\n        // other contracts)\r\n        BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\r\n\r\n        // transferring the WETH from the caller to Clowder\r\n        _safeTransferWETH(msg.sender, address(this), price);\r\n\r\n        // transferring the protocol fee\r\n        _safeTransferWETH(msg.sender, protocolFeeReceiver, protocolFee);\r\n\r\n        // transferring the NFT\r\n        NftCollectionFunctions.transferNft(\r\n            execution.collection,\r\n            address(this),\r\n            msg.sender,\r\n            execution.tokenId\r\n        );\r\n\r\n        // TODO: should we do this?:\r\n        // require(clowder is new owner of tokenId in collection, according to collection of course);\r\n        // hmm, but, if the collection contract said transfer was successful, then\r\n        // it could also lie in here when asking for the new owner of the tokenId\r\n    }\r\n\r\n    function _beforeStoringTheListingHash(\r\n        uint256 expirationTime,\r\n        uint256 sellPrice,\r\n        uint256 executionId,\r\n        uint256 protocolFee\r\n    ) internal {\r\n        Execution storage execution = executions[executionId];\r\n\r\n        // Disable old listing signatures in case new listing parameters are different\r\n        // from the ones in the execution object.\r\n        // This is done to due to the fact that we don't support concurrent listings\r\n        // with different prices.\r\n        if (\r\n            execution.listingEndTime != expirationTime ||\r\n            execution.sellPrice != sellPrice\r\n        ) {\r\n            execution.openSeaOrderHash = 0;\r\n            execution.looksRareOrderHash = 0;\r\n        }\r\n        // storing the listing end time\r\n        execution.listingEndTime = expirationTime;\r\n        // storing the last list price so we know how much to\r\n        // to be awarded to each owner\r\n        execution.sellPrice = sellPrice;\r\n        // storing the protocol fee\r\n        execution.sellProtocolFee = protocolFee;\r\n    }\r\n\r\n    // function listOnOpenSea(\r\n    //     BuyOrderV1[] calldata orders,\r\n    //     uint256 executorPrice,\r\n    //     uint256 marketplaceFee // out of 10_000\r\n    // ) external nonReentrant {\r\n    //     require(\r\n    //         orders.length > 0,\r\n    //         \"ListOnMarketplace: Must have at least one order\"\r\n    //     );\r\n\r\n    //     uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\r\n    //         10_000;\r\n    //     uint256 price = executorPrice - protocolFee;\r\n    //     uint256 executionId = orders[0].executionId;\r\n\r\n    //     Execution storage execution = executions[executionId];\r\n\r\n    //     /* Validations */\r\n\r\n    //     require(execution.collection != address(0), \"Execution doesn't exist\");\r\n\r\n    //     require(!execution.sold, \"Execution already sold\");\r\n\r\n    //     uint256 minExpirationTime = BuyOrderV1Functions\r\n    //         .validateSellOrdersParameters(\r\n    //             isUsedSellNonce,\r\n    //             realContributions,\r\n    //             orders,\r\n    //             executionId,\r\n    //             execution,\r\n    //             price,\r\n    //             minConsensusForSellingOverBuyPrice,\r\n    //             minConsensusForSellingUnderOrEqualBuyPrice\r\n    //         );\r\n\r\n    //     // Validate signatures (includes interaction with\r\n    //     // other contracts)\r\n    //     BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\r\n\r\n    //     OpenSeaUtil.initializationAndPermissions(\r\n    //         address(this),\r\n    //         execution.collection,\r\n    //         WETH\r\n    //     );\r\n\r\n    //     {\r\n    //         // OpenSea listing\r\n\r\n    //         // creating the OpenSea sell order\r\n    //         (\r\n    //             bytes32 _hash,\r\n    //             bytes32 paramsOrderHash,\r\n    //             OpenSeaUtil.OpenSeaOrder memory openSeaOrder\r\n    //         ) = OpenSeaUtil.buildAndGetOpenSeaOrderHash(\r\n    //                 address(this),\r\n    //                 execution.collection,\r\n    //                 execution.tokenId,\r\n    //                 // calculating list price:\r\n    //                 (10_000 * executorPrice) / (10_000 - marketplaceFee) + 1,\r\n    //                 minExpirationTime,\r\n    //                 marketplaceFee,\r\n    //                 WETH\r\n    //             );\r\n    //         require(_hash != 0, \"Hash must not be 0\");\r\n\r\n    //         _beforeStoringTheListingHash(\r\n    //             minExpirationTime,\r\n    //             price,\r\n    //             executionId,\r\n    //             protocolFee\r\n    //         );\r\n\r\n    //         // storing the corresponding hash by executionId\r\n    //         execution.openSeaOrderHash = _hash;\r\n\r\n    //         emit OpenSeaOrderSet(openSeaOrder, paramsOrderHash);\r\n    //     }\r\n    // }\r\n\r\n    // function listOnLooksRare(\r\n    //     BuyOrderV1[] calldata orders,\r\n    //     uint256 executorPrice,\r\n    //     uint256 marketplaceFee, // out of 10_000\r\n    //     uint256 nonce\r\n    // ) external nonReentrant {\r\n    //     require(\r\n    //         orders.length > 0,\r\n    //         \"ListOnMarketplace: Must have at least one order\"\r\n    //     );\r\n\r\n    //     uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\r\n    //         10_000;\r\n    //     uint256 price = executorPrice - protocolFee;\r\n    //     uint256 executionId = orders[0].executionId;\r\n\r\n    //     Execution storage execution = executions[executionId];\r\n\r\n    //     /* Validations */\r\n\r\n    //     require(execution.collection != address(0), \"Execution doesn't exist\");\r\n\r\n    //     require(!execution.sold, \"Execution already sold\");\r\n\r\n    //     uint256 minExpirationTime = BuyOrderV1Functions\r\n    //         .validateSellOrdersParameters(\r\n    //             isUsedSellNonce,\r\n    //             realContributions,\r\n    //             orders,\r\n    //             executionId,\r\n    //             execution,\r\n    //             price,\r\n    //             minConsensusForSellingOverBuyPrice,\r\n    //             minConsensusForSellingUnderOrEqualBuyPrice\r\n    //         );\r\n\r\n    //     // Validate signatures (includes interaction with\r\n    //     // other contracts)\r\n    //     BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\r\n\r\n    //     LooksRareUtil.initializationAndPermissions(\r\n    //         address(this),\r\n    //         execution.collection\r\n    //     );\r\n\r\n    //     {\r\n    //         // LooksRare listing\r\n    //         (\r\n    //             bytes32 _hash, // LooksRareUtil.MakerOrder memory order\r\n\r\n    //         ) = LooksRareUtil.buildAndGetMarketplaceOrderHash(\r\n    //                 address(this),\r\n    //                 execution.collection,\r\n    //                 execution.tokenId,\r\n    //                 // calculating list price:\r\n    //                 (10_000 * executorPrice) / (10_000 - marketplaceFee) + 1,\r\n    //                 minExpirationTime,\r\n    //                 marketplaceFee,\r\n    //                 WETH,\r\n    //                 nonce\r\n    //             );\r\n    //         require(_hash != 0, \"Hash must not be 0\");\r\n\r\n    //         _beforeStoringTheListingHash(\r\n    //             minExpirationTime,\r\n    //             price,\r\n    //             executionId,\r\n    //             protocolFee\r\n    //         );\r\n\r\n    //         // storing the corresponding hash by executionId\r\n    //         execution.looksRareOrderHash = _hash;\r\n\r\n    //         // emit OpenSeaOrderSet(openSeaOrder, paramsOrderHash);\r\n    //     }\r\n    // }\r\n\r\n    // TODO: invalidate signature once detected it was used by a marketplace\r\n    // to prevent reusing it.\r\n    // Although we probably will separate/remove any \r\n    // post-buy handling mechanism from this contract.\r\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\r\n        external\r\n        view\r\n        override\r\n        returns (bytes4)\r\n    {\r\n        require(_hash != 0, \"Hash must not be 0\");\r\n        uint256 executionId = uint256(bytes32(_signature[:32]));\r\n        uint256 marketplaceId = uint256(bytes32(_signature[32:64]));\r\n\r\n        // Validate signatures\r\n        if (\r\n            (marketplaceId == 0 &&\r\n                executions[executionId].openSeaOrderHash == _hash) ||\r\n            (marketplaceId == 1 &&\r\n                executions[executionId].looksRareOrderHash == _hash)\r\n        ) {\r\n            return 0x1626ba7e;\r\n        }\r\n        return 0xffffffff;\r\n    }\r\n\r\n    function claimNft(uint256 executionId, address to) external nonReentrant {\r\n        Execution storage execution = executions[executionId];\r\n        require(\r\n            execution.collection != address(0),\r\n            \"ClaimNft: Execution doesn't exist\"\r\n        );\r\n        require(!execution.sold, \"ClaimNft: Execution already sold\");\r\n        /*\r\n         * Invalidating immediately (extra measure to prevent reentrancy)\r\n         * TODO: maybe we can zero the execution struct instead (?),\r\n         * that way we save gas and also allow re-using the executionId\r\n         */\r\n        executions[executionId].sold = true;\r\n        // validating real contribution\r\n        uint256 realContribution = realContributions[msg.sender][executionId];\r\n        require(\r\n            execution.buyPrice == realContribution,\r\n            \"ClaimNft: wrong real contribution\"\r\n        );\r\n        // just for claiming gas deductions\r\n        realContributions[msg.sender][executionId] = 0;\r\n        // transferring the NFT\r\n        NftCollectionFunctions.transferNft(\r\n            execution.collection,\r\n            address(this),\r\n            to,\r\n            execution.tokenId\r\n        );\r\n    }\r\n\r\n    function _preClaim(uint256[] calldata executionIds) internal {\r\n        // loop over the executions\r\n        for (uint256 i = 0; i < executionIds.length; i++) {\r\n            uint256 executionId = executionIds[i];\r\n            Execution storage execution = executions[executionId];\r\n\r\n            require(\r\n                execution.collection != address(0),\r\n                \"PreClaim: Execution doesn't exist\"\r\n            );\r\n            // Validating that we already sold the NFT\r\n            // or that we don't have it anymore (if NFT was sold through a marketplace).\r\n            // What about if nobody has claimed their proceeds from an old execution of the same NFT?\r\n            // They wouldn't be allowed to claim proceeds until the current execution NFT is sold.\r\n            // That's why the fee receiver should mark the execution as sold\r\n            // as soon as the NFT is gone (sold), for now only\r\n            // the fee receiver can receive the protocol sell fee. Do we need\r\n            // to allow external arbitragers?\r\n            // Another option is create a new contract per execution,\r\n            // so this new contract holds the NFT, WETH and the execution struct,\r\n            // would that be a bit more gas-expensive?\r\n            bool clowderOwnsTheNft = IERC721(execution.collection).ownerOf(\r\n                execution.tokenId\r\n            ) == address(this);\r\n            require(\r\n                execution.sold || !clowderOwnsTheNft,\r\n                \"PreClaim: NFT has not been sold nor ask has been taken\"\r\n            );\r\n            // Marking the execution as sold so future claimers don't need to\r\n            // rely on checking whether Clowder owns the NFT or not\r\n            if (!execution.sold) {\r\n                execution.sold = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimProceeds(uint256[] calldata executionIds, address to)\r\n        external\r\n    {\r\n        _preClaim(executionIds);\r\n\r\n        uint256 proceedsSum = 0;\r\n        // loop over the executions\r\n        for (uint256 i = 0; i < executionIds.length; i++) {\r\n            uint256 executionId = executionIds[i];\r\n            Execution storage execution = executions[executionId];\r\n\r\n            // transferring the WETH to the signer\r\n            uint256 realContribution = realContributions[msg.sender][\r\n                executionId\r\n            ];\r\n            uint256 price = execution.sellPrice;\r\n            // dust remains for the smart contract, that's ok\r\n            uint256 proceeds = (realContribution * price) / execution.buyPrice;\r\n            // to prevent double claiming:\r\n            realContributions[msg.sender][executionId] = 0;\r\n            proceedsSum += proceeds;\r\n        }\r\n        _safeTransferWETH(address(this), to, proceedsSum);\r\n    }\r\n\r\n    function claimProtocolFees(uint256[] calldata executionIds) external {\r\n        _preClaim(executionIds);\r\n\r\n        uint256 feesSum = 0;\r\n        // loop over the executions\r\n        for (uint256 i = 0; i < executionIds.length; i++) {\r\n            uint256 executionId = executionIds[i];\r\n            Execution storage execution = executions[executionId];\r\n\r\n            feesSum += execution.sellProtocolFee;\r\n            // marking it zero so the protocol fee receiever can't receive it again\r\n            execution.sellProtocolFee = 0;\r\n        }\r\n        _safeTransferWETH(address(this), protocolFeeReceiver, feesSum);\r\n    }\r\n\r\n    function _safeTransferWETH(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        SafeERC20Transfer.safeERC20Transfer(WETH, from, to, amount);\r\n    }\r\n\r\n    // function getSnowAccessKey(address addr) external pure returns (bytes32) {\r\n    //     return keccak256(abi.encodePacked(addr));\r\n    // }\r\n}\r\n"
    },
    "contracts/libraries/passiveorders/BuyOrderV1.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nimport {SignatureUtil} from \"./../SignatureUtil.sol\";\r\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport {Execution} from \"./../execution/Execution.sol\";\r\n\r\nusing BuyOrderV1Functions for BuyOrderV1 global;\r\n\r\n// DO NOT CHANGE the struct, create a new order file instead.\r\n// If chaging the struct is extremely necessary, don't forget to \r\n// update the hash constant and hash function below.\r\nstruct BuyOrderV1 {\r\n    \r\n    address signer; // order signer\r\n\r\n    // general order parameters\r\n    address collection; // collection address\r\n    uint256 executionId; // buy order execution id\r\n    uint256 contribution; // WETH contribution\r\n\r\n    // buy order parameters\r\n    uint256 buyPrice; // buy WETH price\r\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\r\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\r\n\r\n    // sell order parameters\r\n    uint256 sellPrice; // sell WETH price \r\n    uint256 sellPriceEndTime; // sell order expiration time (set 0 for omitting)\r\n    uint256 sellNonce;\r\n\r\n    // signature parameters\r\n    uint8 v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n\r\n    // On another note: maybe be careful when using bytes (no fixed) in this struct\r\n    // Read the wyvern 2.2 exploit: https://nft.mirror.xyz/VdF3BYwuzXgLrJglw5xF6CHcQfAVbqeJVtueCr4BUzs\r\n}\r\n\r\n/**\r\n * @title PassiveTradeOrders\r\n * @notice\r\n */\r\nlibrary BuyOrderV1Functions {\r\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f;\r\n\r\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    PASSIVE_BUY_ORDER_HASH,\r\n                    passiveOrder.signer,\r\n                    passiveOrder.collection,\r\n                    passiveOrder.executionId,\r\n                    passiveOrder.contribution,\r\n                    passiveOrder.buyPrice,\r\n                    passiveOrder.buyPriceEndTime,\r\n                    passiveOrder.buyNonce,\r\n                    passiveOrder.sellPrice,\r\n                    passiveOrder.sellPriceEndTime,\r\n                    passiveOrder.sellNonce\r\n                )\r\n            );\r\n    }\r\n\r\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\r\n        return passiveOrder.buyPrice >= price;\r\n    }\r\n    \r\n    function canAcceptSellPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\r\n        return passiveOrder.sellPrice <= price;\r\n    }\r\n\r\n    \r\n    // Validate signatures (includes interaction with\r\n    // other contracts)\r\n    // Remember that we give away execution flow\r\n    // in case the signer is a contract (isValidSignature)\r\n    function validateSignatures(\r\n        BuyOrderV1[] calldata orders,\r\n        bytes32 domainSeparator\r\n    ) public view {\r\n        for (uint256 i = 0; i < orders.length; i++) {\r\n            BuyOrderV1 calldata order = orders[i];\r\n            // Validate order signature\r\n            bytes32 orderHash = hash(order);\r\n            require(\r\n                SignatureUtil.verify(\r\n                    orderHash,\r\n                    order.signer,\r\n                    order.v,\r\n                    order.r,\r\n                    order.s,\r\n                    domainSeparator\r\n                ),\r\n                \"Signature: Invalid\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function validateSellOrdersParameters(\r\n        mapping(address => mapping(uint256 => bool)) storage _isUsedSellNonce,\r\n        mapping(address => mapping(uint256 => uint256)) storage _realContributions,\r\n        BuyOrderV1[] calldata orders,\r\n        uint256 executionId,\r\n        Execution storage execution,\r\n        uint256 price,\r\n        uint256 minConsensusForSellingOverBuyPrice,\r\n        uint256 minConsensusForSellingUnderOrEqualBuyPrice\r\n    ) public view returns (uint256) {\r\n        // mapping(address => mapping(uint256 => bool))\r\n        //     storage _isUsedSellNonce = isUsedSellNonce;\r\n        // mapping(address => mapping(uint256 => uint256))\r\n        //     storage _realContributions = realContributions;\r\n        // Execution storage execution = executions[executionId];\r\n\r\n        uint256 minExpirationTime = type(uint256).max;\r\n        uint256 realContributionOnBoard = 0;\r\n        // Validate orders parameters, no need to access state\r\n        for (uint256 i = 0; i < orders.length; i++) {\r\n            BuyOrderV1 calldata order = orders[i];\r\n\r\n            // Validate the order is not expired\r\n            require(order.sellPriceEndTime >= block.timestamp, \"Order expired\");\r\n            // Validate collection\r\n            require(\r\n                order.collection == execution.collection,\r\n                \"Order collection mismatch\"\r\n            );\r\n            // Validate executionId\r\n            require(\r\n                order.executionId == executionId,\r\n                \"Order executionId mismatch\"\r\n            );\r\n            // Validating that the signer has not voted yet\r\n            for (uint256 j = 0; j < i; j++) {\r\n                if (orders[j].signer == order.signer) {\r\n                    require(false, \"Signer already voted\");\r\n                }\r\n            }\r\n            // Validating price acceptance\r\n            require(\r\n                canAcceptSellPrice(order, price),\r\n                \"Order can't accept price\"\r\n            );\r\n            // updating the min expiration time\r\n            minExpirationTime = Math.min(\r\n                minExpirationTime,\r\n                order.sellPriceEndTime\r\n            );\r\n\r\n            /* State required for tne following lines */\r\n\r\n            // Validate order nonce usability\r\n            require(\r\n                !_isUsedSellNonce[order.signer][order.sellNonce],\r\n                \"Order nonce is unusable\"\r\n            );\r\n            // counting the \"votes\" in favor of this price\r\n            realContributionOnBoard += _realContributions[order.signer][\r\n                executionId\r\n            ];\r\n        } // ends the voters for loop\r\n\r\n        // Validating price consensus\r\n        if (price > execution.buyPrice) {\r\n\r\n            if (minConsensusForSellingOverBuyPrice == 10_000) {\r\n                // we need 10_000 out of 10_000 consensus\r\n                require(\r\n                    realContributionOnBoard == execution.buyPrice,\r\n                    \"Selling over or equal buyPrice: consensus not reached\"\r\n                );\r\n            } else {\r\n                // we need more than N out of 10_000 consensus\r\n                require(\r\n                    realContributionOnBoard * 10_000 >\r\n                        execution.buyPrice *\r\n                            minConsensusForSellingOverBuyPrice,\r\n                    \"Selling over or equal buyPrice: consensus not reached\"\r\n                );\r\n            }\r\n            \r\n        } else {\r\n            // we need a different consensus ratio\r\n            require(\r\n                realContributionOnBoard * 10_000 >=\r\n                    execution.buyPrice * minConsensusForSellingUnderOrEqualBuyPrice,\r\n                \"Selling under buyPrice: consensus not reached\"\r\n            );\r\n        }\r\n\r\n        return minExpirationTime;\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/execution/Execution.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nstruct Execution {\r\n    address collection; // zero to evaluate as non-existant\r\n    uint256 buyPrice;\r\n    uint256 tokenId;\r\n    bool sold;\r\n    \r\n    /* Marketplace listing parameters */\r\n    uint256 sellPrice; // if not sold yet, this is the amount we will recieve\r\n    // from a marketplace in case it is listed for sale\r\n    uint256 listingEndTime; // expiration time of the listing\r\n    uint256 sellProtocolFee; // only has value when a marketplace listing happens\r\n    // otherwise it is zero because the protocol fee is transferred immediately\r\n    \r\n    /* Marketplace listing hashes */\r\n    bytes32 openSeaOrderHash;\r\n    bytes32 looksRareOrderHash;\r\n}\r\n"
    },
    "contracts/libraries/assettransfer/SafeERC20Transfer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nlibrary SafeERC20Transfer {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function safeERC20Transfer(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount != 0) {\r\n            IERC20(token).safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SignatureUtil.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\r\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\r\n\r\nlibrary SignatureUtil {\r\n    function verify(\r\n        bytes32 hash,\r\n        address signer,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 domainSeparator\r\n    ) internal view returns (bool) {\r\n        require(signer != address(0), \"SignatureUtil: Invalid signer\");\r\n        bytes memory signature = abi.encodePacked(r, s, v);\r\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\r\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/NftCollection.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nlibrary NftCollectionFunctions {\r\n\r\n    // interface IDs\r\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    function transferNft(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\r\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\r\n        } else {\r\n            revert(\"Collection does not support ERC721\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}