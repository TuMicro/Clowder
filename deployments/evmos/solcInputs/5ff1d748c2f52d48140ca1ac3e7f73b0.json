{
  "language": "Solidity",
  "sources": {
    "contracts/ClowderMain.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\n// _________ .__                   .___\r\n// \\_   ___ \\|  |   ______  _  ____| _/___________\r\n// /    \\  \\/|  |  /  _ \\ \\/ \\/ / __ |/ __ \\_  __ \\\r\n// \\     \\___|  |_(  <_> )     / /_/ \\  ___/|  | \\/\r\n//  \\______  /____/\\____/ \\/\\_/\\____ |\\___  >__|\r\n//         \\/                       \\/    \\/\r\n\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\r\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\r\n\r\nimport {BuyOrderV1, BuyOrderV1Functions} from \"./libraries/passiveorders/BuyOrderV1.sol\";\r\nimport {Execution} from \"./libraries/execution/Execution.sol\";\r\nimport {SafeERC20Transfer} from \"./libraries/assettransfer/SafeERC20Transfer.sol\";\r\nimport {SignatureUtil} from \"./libraries/SignatureUtil.sol\";\r\n// import {OpenSeaUtil} from \"./libraries/externalmarketplaces/OpenSeaUtil.sol\";\r\n// import {LooksRareUtil} from \"./libraries/externalmarketplaces/LooksRareUtil.sol\";\r\nimport {NftCollectionFunctions} from \"./libraries/NftCollection.sol\";\r\n\r\ncontract ClowderMainOwnable is Ownable {\r\n    address public protocolFeeReceiver;\r\n    uint256 public protocolFeeFraction = 100; // out of 10_000\r\n    uint256 public protocolFeeFractionFromSelling = 100; // out of 10_000\r\n    uint256 public minConsensusForSellingOverBuyPrice = 5_000; // out of 10_000\r\n    uint256 public minConsensusForSellingUnderOrEqualBuyPrice = 10_000; // out of 10_000\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the protocol fee receiver\r\n     * @param _protocolFeeReceiver new receiver\r\n     */\r\n    function changeProtocolFeeReceiver(address _protocolFeeReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        protocolFeeReceiver = _protocolFeeReceiver;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the protocol fee fraction\r\n     * @param _protocolFeeFraction new fee fraction (out of 10_000)\r\n     */\r\n    function changeProtocolFeeFraction(uint256 _protocolFeeFraction)\r\n        external\r\n        onlyOwner\r\n    {\r\n        protocolFeeFraction = _protocolFeeFraction;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the protocol fee fraction from selling\r\n     * @param _protocolFeeFractionFromSelling new fee fraction (out of 10_000)\r\n     */\r\n    function changeProtocolFeeFractionFromSelling(\r\n        uint256 _protocolFeeFractionFromSelling\r\n    ) external onlyOwner {\r\n        protocolFeeFractionFromSelling = _protocolFeeFractionFromSelling;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the min consensus for selling over or equal to buy price\r\n     * @param _minConsensusForSellingOverBuyPrice new min consensus (out of 10_000)\r\n     */\r\n    function changeminConsensusForSellingOverBuyPrice(\r\n        uint256 _minConsensusForSellingOverBuyPrice\r\n    ) external onlyOwner {\r\n        minConsensusForSellingOverBuyPrice = _minConsensusForSellingOverBuyPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Change the min consensus for selling under buy price\r\n     * @param _minConsensusForSellingUnderOrEqualBuyPrice new min consensus (out of 10_000)\r\n     */\r\n    function changeminConsensusForSellingUnderOrEqualBuyPrice(\r\n        uint256 _minConsensusForSellingUnderOrEqualBuyPrice\r\n    ) external onlyOwner {\r\n        minConsensusForSellingUnderOrEqualBuyPrice = _minConsensusForSellingUnderOrEqualBuyPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice [onlyOwner] Allow the owner to withdraw any NFT owned by the contract.\r\n     * Will be used to delegate management of groupally owned NFTs to other contracts.\r\n     * @param _to address to send the NFT to\r\n     * @param _nftCollection address of the NFT collection\r\n     * @param _tokenId ID of the NFT\r\n     */\r\n    function transferNft(\r\n        address _to,\r\n        address _nftCollection,\r\n        uint256 _tokenId\r\n    ) external onlyOwner {\r\n        NftCollectionFunctions.transferNft(\r\n            _nftCollection,\r\n            address(this),\r\n            _to,\r\n            _tokenId\r\n        );\r\n    }\r\n}\r\n\r\ncontract ClowderMain is\r\n    ClowderMainOwnable,\r\n    ReentrancyGuard,\r\n    ERC721Holder,\r\n    ERC1155Holder,\r\n    IERC1271\r\n{\r\n    address public immutable WETH;\r\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\r\n\r\n    // user => nonce => isUsedBuyNonce\r\n    mapping(address => mapping(uint256 => bool)) public isUsedBuyNonce;\r\n    // user => nonce => isUsedSellNonce\r\n    mapping(address => mapping(uint256 => bool)) public isUsedSellNonce;\r\n    // buyer => executionId => real contribution\r\n    // Returns to zero when the owner is given their part of the\r\n    // sale proceeds (claimProceeds).\r\n    mapping(address => mapping(uint256 => uint256)) public realContributions;\r\n    // executionId => Execution\r\n    mapping(uint256 => Execution) public executions;\r\n\r\n    /* Events */\r\n    // event OpenSeaOrderSet(\r\n    //     OpenSeaUtil.OpenSeaOrder order,\r\n    //     bytes32 paramsOrderHash\r\n    // );\r\n\r\n    constructor(address _WETH, address _protocolFeeReceiver) {\r\n        WETH = _WETH;\r\n        protocolFeeReceiver = _protocolFeeReceiver;\r\n\r\n        EIP712_DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ), // EIP712 domain typehash\r\n                keccak256(\"Clowder\"), // name\r\n                keccak256(bytes(\"0.1\")), // version\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function cancelBuyOrders(uint256[] calldata buyOrderNonces) external {\r\n        require(\r\n            buyOrderNonces.length > 0,\r\n            \"Cancel: Must provide at least one nonce\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < buyOrderNonces.length; i++) {\r\n            // if (!isUsedBuyNonce[msg.sender][buyOrderNonces[i]]) {\r\n            isUsedBuyNonce[msg.sender][buyOrderNonces[i]] = true; // used\r\n            // }\r\n        }\r\n    }\r\n\r\n    function cancelSellOrders(uint256[] calldata sellOrderNonces) external {\r\n        require(\r\n            sellOrderNonces.length > 0,\r\n            \"Cancel: Must provide at least one nonce\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < sellOrderNonces.length; i++) {\r\n            isUsedSellNonce[msg.sender][sellOrderNonces[i]] = true; // cancelled\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Executes on an array of passive buy orders\r\n     */\r\n    function executeOnPassiveBuyOrders(\r\n        BuyOrderV1[] calldata buyOrders,\r\n        uint256 executorPrice,\r\n        uint256 tokenId\r\n    ) external nonReentrant {\r\n        require(buyOrders.length > 0, \"Execute: Must have at least one order\");\r\n\r\n        uint256 protocolFee = (protocolFeeFraction * executorPrice) / 10_000;\r\n        uint256 price = executorPrice + protocolFee;\r\n        address collection = buyOrders[0].collection;\r\n        uint256 executionId = buyOrders[0].executionId;\r\n\r\n        require(\r\n            executions[executionId].collection == address(0),\r\n            \"Execute: Id already executed\"\r\n        );\r\n        // creating the execution object immediately (extra measure to prevent reentrancy)\r\n        executions[executionId] = Execution({\r\n            collection: collection,\r\n            buyPrice: price,\r\n            tokenId: tokenId,\r\n            sold: false,\r\n            sellPrice: 0,\r\n            listingEndTime: 0,\r\n            sellProtocolFee: 0,\r\n            openSeaOrderHash: bytes32(0),\r\n            looksRareOrderHash: bytes32(0)\r\n        });\r\n\r\n        uint256 protocolFeeTransferred = 0;\r\n        uint256 executorPriceTransferred = 0;\r\n\r\n        // validate and process all the buy orders\r\n        for (uint256 i = 0; i < buyOrders.length; i++) {\r\n            BuyOrderV1 calldata order = buyOrders[i];\r\n            // Validate order nonce usability\r\n            require(\r\n                !isUsedBuyNonce[order.signer][order.buyNonce],\r\n                \"Order nonce is unusable\"\r\n            );\r\n            // Invalidating order nonce immediately (to avoid reentrancy\r\n            // or even reusing the signature in this loop)\r\n            // DO NOT separate from the above check, otherwise the order\r\n            // nonce could be reused (you can check the\r\n            // executeOnPassiveSellOrders for guidance). If you need separation\r\n            // probably you can check the signer/nonces before \"i\".\r\n            isUsedBuyNonce[order.signer][order.buyNonce] = true;\r\n            // Validate order signature\r\n            bytes32 orderHash = order.hash();\r\n            require(\r\n                SignatureUtil.verify(\r\n                    orderHash,\r\n                    order.signer,\r\n                    order.v,\r\n                    order.r,\r\n                    order.s,\r\n                    EIP712_DOMAIN_SEPARATOR\r\n                ),\r\n                \"Signature: Invalid\"\r\n            );\r\n            // Validate the order is not expired\r\n            require(order.buyPriceEndTime >= block.timestamp, \"Order expired\");\r\n\r\n            // Validate the order can accept the price\r\n            require(order.canAcceptBuyPrice(price), \"Order can't accept price\");\r\n            // Validate collection\r\n            require(\r\n                order.collection == collection,\r\n                \"Order collection mismatch\"\r\n            );\r\n            // Validate executionId\r\n            require(\r\n                order.executionId == executionId,\r\n                \"Order executionId mismatch\"\r\n            );\r\n\r\n            uint256 contribution = order.contribution;\r\n\r\n            // transferring the protocol fee\r\n            uint256 protocolWethAmount = Math.min(\r\n                protocolFee - protocolFeeTransferred,\r\n                contribution\r\n            );\r\n            protocolFeeTransferred += protocolWethAmount;\r\n            _safeTransferWETH(\r\n                order.signer,\r\n                protocolFeeReceiver,\r\n                protocolWethAmount\r\n            );\r\n\r\n            // transferring the protocol executor price\r\n            uint256 executorPriceAmount = Math.min(\r\n                executorPrice - executorPriceTransferred,\r\n                contribution - protocolWethAmount\r\n            );\r\n            executorPriceTransferred += executorPriceAmount;\r\n            _safeTransferWETH(order.signer, msg.sender, executorPriceAmount);\r\n\r\n            // adding to the real contribution of the signer\r\n            uint256 realContribution = protocolWethAmount + executorPriceAmount;\r\n            realContributions[order.signer][executionId] += realContribution;\r\n        } // ends the orders for loop\r\n\r\n        // validating that we transferred the correct amounts of WETH\r\n        require(\r\n            protocolFeeTransferred == protocolFee,\r\n            \"Protocol fee not transferred correctly\"\r\n        );\r\n        require(\r\n            executorPriceTransferred == executorPrice,\r\n            \"Executor price not transferred correctly\"\r\n        );\r\n\r\n        // transferring the NFT\r\n        NftCollectionFunctions.transferNft(\r\n            collection,\r\n            msg.sender,\r\n            address(this),\r\n            tokenId\r\n        );\r\n    }\r\n\r\n    function _invalidateNonces(BuyOrderV1[] calldata orders) internal {\r\n        // Invalidating nonces\r\n        for (uint256 i = 0; i < orders.length; i++) {\r\n            BuyOrderV1 calldata order = orders[i];\r\n            // Invalidating order nonce (to avoid reentrancy)\r\n            isUsedSellNonce[order.signer][order.sellNonce] = true;\r\n        }\r\n    }\r\n\r\n    function executeOnPassiveSellOrders(\r\n        BuyOrderV1[] calldata orders,\r\n        uint256 executorPrice\r\n    ) external nonReentrant {\r\n        require(orders.length > 0, \"ExecuteSell: Must have at least one order\");\r\n\r\n        uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\r\n            10_000;\r\n        uint256 price = executorPrice - protocolFee;\r\n        uint256 executionId = orders[0].executionId;\r\n\r\n        Execution storage execution = executions[executionId];\r\n\r\n        /* Validations */\r\n\r\n        require(execution.collection != address(0), \"Execution doesn't exist\");\r\n\r\n        require(!execution.sold, \"Execution already sold\");\r\n\r\n        BuyOrderV1Functions.validateSellOrdersParameters(\r\n            isUsedSellNonce,\r\n            realContributions,\r\n            orders,\r\n            executionId,\r\n            execution,\r\n            price,\r\n            minConsensusForSellingOverBuyPrice,\r\n            minConsensusForSellingUnderOrEqualBuyPrice\r\n        );\r\n\r\n        /* Invalidations */\r\n\r\n        _invalidateNonces(orders);\r\n\r\n        // marking as sold (to prevent reentrancy)\r\n        execution.sold = true;\r\n\r\n        // storing the price to be distributed among the owners\r\n        execution.sellPrice = price;\r\n\r\n        // We don't store protocol fees here as they are only used for\r\n        // claiming them, and we don't need claiming here because\r\n        // we are already transferring them.\r\n\r\n        /* Giving away execution flow */\r\n\r\n        // Validate signatures (includes interaction with\r\n        // other contracts)\r\n        BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\r\n\r\n        // transferring the WETH from the caller to Clowder\r\n        _safeTransferWETH(msg.sender, address(this), price);\r\n\r\n        // transferring the protocol fee\r\n        _safeTransferWETH(msg.sender, protocolFeeReceiver, protocolFee);\r\n\r\n        // transferring the NFT\r\n        NftCollectionFunctions.transferNft(\r\n            execution.collection,\r\n            address(this),\r\n            msg.sender,\r\n            execution.tokenId\r\n        );\r\n\r\n        // TODO: should we do this?:\r\n        // require(clowder is new owner of tokenId in collection, according to collection of course);\r\n        // hmm, but, if the collection contract said transfer was successful, then\r\n        // it could also lie in here when asking for the new owner of the tokenId\r\n    }\r\n\r\n    function _beforeStoringTheListingHash(\r\n        uint256 expirationTime,\r\n        uint256 sellPrice,\r\n        uint256 executionId,\r\n        uint256 protocolFee\r\n    ) internal {\r\n        Execution storage execution = executions[executionId];\r\n\r\n        // Disable old listing signatures in case new listing parameters are different\r\n        // from the ones in the execution object.\r\n        // This is done to due to the fact that we don't support concurrent listings\r\n        // with different prices.\r\n        if (\r\n            execution.listingEndTime != expirationTime ||\r\n            execution.sellPrice != sellPrice\r\n        ) {\r\n            execution.openSeaOrderHash = 0;\r\n            execution.looksRareOrderHash = 0;\r\n        }\r\n        // storing the listing end time\r\n        execution.listingEndTime = expirationTime;\r\n        // storing the last list price so we know how much to\r\n        // to be awarded to each owner\r\n        execution.sellPrice = sellPrice;\r\n        // storing the protocol fee\r\n        execution.sellProtocolFee = protocolFee;\r\n    }\r\n\r\n    // function listOnOpenSea(\r\n    //     BuyOrderV1[] calldata orders,\r\n    //     uint256 executorPrice,\r\n    //     uint256 marketplaceFee // out of 10_000\r\n    // ) external nonReentrant {\r\n    //     require(\r\n    //         orders.length > 0,\r\n    //         \"ListOnMarketplace: Must have at least one order\"\r\n    //     );\r\n\r\n    //     uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\r\n    //         10_000;\r\n    //     uint256 price = executorPrice - protocolFee;\r\n    //     uint256 executionId = orders[0].executionId;\r\n\r\n    //     Execution storage execution = executions[executionId];\r\n\r\n    //     /* Validations */\r\n\r\n    //     require(execution.collection != address(0), \"Execution doesn't exist\");\r\n\r\n    //     require(!execution.sold, \"Execution already sold\");\r\n\r\n    //     uint256 minExpirationTime = BuyOrderV1Functions\r\n    //         .validateSellOrdersParameters(\r\n    //             isUsedSellNonce,\r\n    //             realContributions,\r\n    //             orders,\r\n    //             executionId,\r\n    //             execution,\r\n    //             price,\r\n    //             minConsensusForSellingOverBuyPrice,\r\n    //             minConsensusForSellingUnderOrEqualBuyPrice\r\n    //         );\r\n\r\n    //     // Validate signatures (includes interaction with\r\n    //     // other contracts)\r\n    //     BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\r\n\r\n    //     OpenSeaUtil.initializationAndPermissions(\r\n    //         address(this),\r\n    //         execution.collection,\r\n    //         WETH\r\n    //     );\r\n\r\n    //     {\r\n    //         // OpenSea listing\r\n\r\n    //         // creating the OpenSea sell order\r\n    //         (\r\n    //             bytes32 _hash,\r\n    //             bytes32 paramsOrderHash,\r\n    //             OpenSeaUtil.OpenSeaOrder memory openSeaOrder\r\n    //         ) = OpenSeaUtil.buildAndGetOpenSeaOrderHash(\r\n    //                 address(this),\r\n    //                 execution.collection,\r\n    //                 execution.tokenId,\r\n    //                 // calculating list price:\r\n    //                 (10_000 * executorPrice) / (10_000 - marketplaceFee) + 1,\r\n    //                 minExpirationTime,\r\n    //                 marketplaceFee,\r\n    //                 WETH\r\n    //             );\r\n    //         require(_hash != 0, \"Hash must not be 0\");\r\n\r\n    //         _beforeStoringTheListingHash(\r\n    //             minExpirationTime,\r\n    //             price,\r\n    //             executionId,\r\n    //             protocolFee\r\n    //         );\r\n\r\n    //         // storing the corresponding hash by executionId\r\n    //         execution.openSeaOrderHash = _hash;\r\n\r\n    //         emit OpenSeaOrderSet(openSeaOrder, paramsOrderHash);\r\n    //     }\r\n    // }\r\n\r\n    // function listOnLooksRare(\r\n    //     BuyOrderV1[] calldata orders,\r\n    //     uint256 executorPrice,\r\n    //     uint256 marketplaceFee, // out of 10_000\r\n    //     uint256 nonce\r\n    // ) external nonReentrant {\r\n    //     require(\r\n    //         orders.length > 0,\r\n    //         \"ListOnMarketplace: Must have at least one order\"\r\n    //     );\r\n\r\n    //     uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\r\n    //         10_000;\r\n    //     uint256 price = executorPrice - protocolFee;\r\n    //     uint256 executionId = orders[0].executionId;\r\n\r\n    //     Execution storage execution = executions[executionId];\r\n\r\n    //     /* Validations */\r\n\r\n    //     require(execution.collection != address(0), \"Execution doesn't exist\");\r\n\r\n    //     require(!execution.sold, \"Execution already sold\");\r\n\r\n    //     uint256 minExpirationTime = BuyOrderV1Functions\r\n    //         .validateSellOrdersParameters(\r\n    //             isUsedSellNonce,\r\n    //             realContributions,\r\n    //             orders,\r\n    //             executionId,\r\n    //             execution,\r\n    //             price,\r\n    //             minConsensusForSellingOverBuyPrice,\r\n    //             minConsensusForSellingUnderOrEqualBuyPrice\r\n    //         );\r\n\r\n    //     // Validate signatures (includes interaction with\r\n    //     // other contracts)\r\n    //     BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\r\n\r\n    //     LooksRareUtil.initializationAndPermissions(\r\n    //         address(this),\r\n    //         execution.collection\r\n    //     );\r\n\r\n    //     {\r\n    //         // LooksRare listing\r\n    //         (\r\n    //             bytes32 _hash, // LooksRareUtil.MakerOrder memory order\r\n\r\n    //         ) = LooksRareUtil.buildAndGetMarketplaceOrderHash(\r\n    //                 address(this),\r\n    //                 execution.collection,\r\n    //                 execution.tokenId,\r\n    //                 // calculating list price:\r\n    //                 (10_000 * executorPrice) / (10_000 - marketplaceFee) + 1,\r\n    //                 minExpirationTime,\r\n    //                 marketplaceFee,\r\n    //                 WETH,\r\n    //                 nonce\r\n    //             );\r\n    //         require(_hash != 0, \"Hash must not be 0\");\r\n\r\n    //         _beforeStoringTheListingHash(\r\n    //             minExpirationTime,\r\n    //             price,\r\n    //             executionId,\r\n    //             protocolFee\r\n    //         );\r\n\r\n    //         // storing the corresponding hash by executionId\r\n    //         execution.looksRareOrderHash = _hash;\r\n\r\n    //         // emit OpenSeaOrderSet(openSeaOrder, paramsOrderHash);\r\n    //     }\r\n    // }\r\n\r\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\r\n        external\r\n        view\r\n        override\r\n        returns (bytes4)\r\n    {\r\n        require(_hash != 0, \"Hash must not be 0\");\r\n        uint256 executionId = uint256(bytes32(_signature[:32]));\r\n        uint256 marketplaceId = uint256(bytes32(_signature[32:64]));\r\n\r\n        // Validate signatures\r\n        if (\r\n            (marketplaceId == 0 &&\r\n                executions[executionId].openSeaOrderHash == _hash) ||\r\n            (marketplaceId == 1 &&\r\n                executions[executionId].looksRareOrderHash == _hash)\r\n        ) {\r\n            return 0x1626ba7e;\r\n        }\r\n        return 0xffffffff;\r\n    }\r\n\r\n    function claimNft(uint256 executionId, address to) external nonReentrant {\r\n        Execution storage execution = executions[executionId];\r\n        require(\r\n            execution.collection != address(0),\r\n            \"ClaimNft: Execution doesn't exist\"\r\n        );\r\n        require(!execution.sold, \"ClaimNft: Execution already sold\");\r\n        /*\r\n         * Invalidating immediately (extra measure to prevent reentrancy)\r\n         * TODO: maybe we can zero the execution struct instead (?),\r\n         * that way we save gas and also allow re-using the executionId\r\n         */\r\n        executions[executionId].sold = true;\r\n        // validating real contribution\r\n        uint256 realContribution = realContributions[msg.sender][executionId];\r\n        require(\r\n            execution.buyPrice == realContribution,\r\n            \"ClaimNft: wrong real contribution\"\r\n        );\r\n        // just for claiming gas deductions\r\n        realContributions[msg.sender][executionId] = 0;\r\n        // transferring the NFT\r\n        NftCollectionFunctions.transferNft(\r\n            execution.collection,\r\n            address(this),\r\n            to,\r\n            execution.tokenId\r\n        );\r\n    }\r\n\r\n    function _preClaim(uint256[] calldata executionIds) internal {\r\n        // loop over the executions\r\n        for (uint256 i = 0; i < executionIds.length; i++) {\r\n            uint256 executionId = executionIds[i];\r\n            Execution storage execution = executions[executionId];\r\n\r\n            require(\r\n                execution.collection != address(0),\r\n                \"PreClaim: Execution doesn't exist\"\r\n            );\r\n            // Validating that we already sold the NFT\r\n            // or that we don't have it anymore (if NFT was sold through a marketplace).\r\n            // What about if nobody has claimed their proceeds from an old execution of the same NFT?\r\n            // They wouldn't be allowed to claim proceeds until the current execution NFT is sold.\r\n            // That's why the fee receiver should mark the execution as sold\r\n            // as soon as the NFT is gone (sold), for now only\r\n            // the fee receiver can receive the protocol sell fee. Do we need\r\n            // to allow external arbitragers?\r\n            // Another option is create a new contract per execution,\r\n            // so this new contract holds the NFT, WETH and the execution struct,\r\n            // would that be a bit more gas-expensive?\r\n            bool clowderOwnsTheNft = IERC721(execution.collection).ownerOf(\r\n                execution.tokenId\r\n            ) == address(this);\r\n            require(\r\n                execution.sold || !clowderOwnsTheNft,\r\n                \"PreClaim: NFT has not been sold nor ask has been taken\"\r\n            );\r\n            // Marking the execution as sold so future claimers don't need to\r\n            // rely on checking whether Clowder owns the NFT or not\r\n            if (!execution.sold) {\r\n                execution.sold = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimProceeds(uint256[] calldata executionIds, address to)\r\n        external\r\n    {\r\n        _preClaim(executionIds);\r\n\r\n        uint256 proceedsSum = 0;\r\n        // loop over the executions\r\n        for (uint256 i = 0; i < executionIds.length; i++) {\r\n            uint256 executionId = executionIds[i];\r\n            Execution storage execution = executions[executionId];\r\n\r\n            // transferring the WETH to the signer\r\n            uint256 realContribution = realContributions[msg.sender][\r\n                executionId\r\n            ];\r\n            uint256 price = execution.sellPrice;\r\n            // dust remains for the smart contract, that's ok\r\n            uint256 proceeds = (realContribution * price) / execution.buyPrice;\r\n            // to prevent double claiming:\r\n            realContributions[msg.sender][executionId] = 0;\r\n            proceedsSum += proceeds;\r\n        }\r\n        _safeTransferWETH(address(this), to, proceedsSum);\r\n    }\r\n\r\n    function claimProtocolFees(uint256[] calldata executionIds) external {\r\n        _preClaim(executionIds);\r\n\r\n        uint256 feesSum = 0;\r\n        // loop over the executions\r\n        for (uint256 i = 0; i < executionIds.length; i++) {\r\n            uint256 executionId = executionIds[i];\r\n            Execution storage execution = executions[executionId];\r\n\r\n            feesSum += execution.sellProtocolFee;\r\n            // marking it zero so the protocol fee receiever can't receive it again\r\n            execution.sellProtocolFee = 0;\r\n        }\r\n        _safeTransferWETH(address(this), protocolFeeReceiver, feesSum);\r\n    }\r\n\r\n    function _safeTransferWETH(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        SafeERC20Transfer.safeERC20Transfer(WETH, from, to, amount);\r\n    }\r\n\r\n    // function getSnowAccessKey(address addr) external pure returns (bytes32) {\r\n    //     return keccak256(abi.encodePacked(addr));\r\n    // }\r\n}\r\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/libraries/passiveorders/BuyOrderV1.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nimport {SignatureUtil} from \"./../SignatureUtil.sol\";\r\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport {Execution} from \"./../execution/Execution.sol\";\r\n\r\nusing BuyOrderV1Functions for BuyOrderV1 global;\r\n\r\n// DO NOT CHANGE the struct, create a new order file instead.\r\n// If chaging the struct is extremely necessary, don't forget to \r\n// update the hash constant and hash function below.\r\nstruct BuyOrderV1 {\r\n    \r\n    address signer; // order signer\r\n\r\n    // general order parameters\r\n    address collection; // collection address\r\n    uint256 executionId; // buy order execution id\r\n    uint256 contribution; // WETH contribution\r\n\r\n    // buy order parameters\r\n    uint256 buyPrice; // buy WETH price\r\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\r\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\r\n\r\n    // sell order parameters\r\n    uint256 sellPrice; // sell WETH price \r\n    uint256 sellPriceEndTime; // sell order expiration time (set 0 for omitting)\r\n    uint256 sellNonce;\r\n\r\n    // signature parameters\r\n    uint8 v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n\r\n    // On another note: maybe be careful when using bytes (no fixed) in this struct\r\n    // Read the wyvern 2.2 exploit: https://nft.mirror.xyz/VdF3BYwuzXgLrJglw5xF6CHcQfAVbqeJVtueCr4BUzs\r\n}\r\n\r\n/**\r\n * @title PassiveTradeOrders\r\n * @notice\r\n */\r\nlibrary BuyOrderV1Functions {\r\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f;\r\n\r\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    PASSIVE_BUY_ORDER_HASH,\r\n                    passiveOrder.signer,\r\n                    passiveOrder.collection,\r\n                    passiveOrder.executionId,\r\n                    passiveOrder.contribution,\r\n                    passiveOrder.buyPrice,\r\n                    passiveOrder.buyPriceEndTime,\r\n                    passiveOrder.buyNonce,\r\n                    passiveOrder.sellPrice,\r\n                    passiveOrder.sellPriceEndTime,\r\n                    passiveOrder.sellNonce\r\n                )\r\n            );\r\n    }\r\n\r\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\r\n        return passiveOrder.buyPrice >= price;\r\n    }\r\n    \r\n    function canAcceptSellPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\r\n        return passiveOrder.sellPrice <= price;\r\n    }\r\n\r\n    \r\n    // Validate signatures (includes interaction with\r\n    // other contracts)\r\n    // Remember that we give away execution flow\r\n    // in case the signer is a contract (isValidSignature)\r\n    function validateSignatures(\r\n        BuyOrderV1[] calldata orders,\r\n        bytes32 domainSeparator\r\n    ) public view {\r\n        for (uint256 i = 0; i < orders.length; i++) {\r\n            BuyOrderV1 calldata order = orders[i];\r\n            // Validate order signature\r\n            bytes32 orderHash = hash(order);\r\n            require(\r\n                SignatureUtil.verify(\r\n                    orderHash,\r\n                    order.signer,\r\n                    order.v,\r\n                    order.r,\r\n                    order.s,\r\n                    domainSeparator\r\n                ),\r\n                \"Signature: Invalid\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function validateSellOrdersParameters(\r\n        mapping(address => mapping(uint256 => bool)) storage _isUsedSellNonce,\r\n        mapping(address => mapping(uint256 => uint256)) storage _realContributions,\r\n        BuyOrderV1[] calldata orders,\r\n        uint256 executionId,\r\n        Execution storage execution,\r\n        uint256 price,\r\n        uint256 minConsensusForSellingOverBuyPrice,\r\n        uint256 minConsensusForSellingUnderOrEqualBuyPrice\r\n    ) public view returns (uint256) {\r\n        // mapping(address => mapping(uint256 => bool))\r\n        //     storage _isUsedSellNonce = isUsedSellNonce;\r\n        // mapping(address => mapping(uint256 => uint256))\r\n        //     storage _realContributions = realContributions;\r\n        // Execution storage execution = executions[executionId];\r\n\r\n        uint256 minExpirationTime = type(uint256).max;\r\n        uint256 realContributionOnBoard = 0;\r\n        // Validate orders parameters, no need to access state\r\n        for (uint256 i = 0; i < orders.length; i++) {\r\n            BuyOrderV1 calldata order = orders[i];\r\n\r\n            // Validate the order is not expired\r\n            require(order.sellPriceEndTime >= block.timestamp, \"Order expired\");\r\n            // Validate collection\r\n            require(\r\n                order.collection == execution.collection,\r\n                \"Order collection mismatch\"\r\n            );\r\n            // Validate executionId\r\n            require(\r\n                order.executionId == executionId,\r\n                \"Order executionId mismatch\"\r\n            );\r\n            // Validating that the signer has not voted yet\r\n            for (uint256 j = 0; j < i; j++) {\r\n                if (orders[j].signer == order.signer) {\r\n                    require(false, \"Signer already voted\");\r\n                }\r\n            }\r\n            // Validating price acceptance\r\n            require(\r\n                canAcceptSellPrice(order, price),\r\n                \"Order can't accept price\"\r\n            );\r\n            // updating the min expiration time\r\n            minExpirationTime = Math.min(\r\n                minExpirationTime,\r\n                order.sellPriceEndTime\r\n            );\r\n\r\n            /* State required for tne following lines */\r\n\r\n            // Validate order nonce usability\r\n            require(\r\n                !_isUsedSellNonce[order.signer][order.sellNonce],\r\n                \"Order nonce is unusable\"\r\n            );\r\n            // counting the \"votes\" in favor of this price\r\n            realContributionOnBoard += _realContributions[order.signer][\r\n                executionId\r\n            ];\r\n        } // ends the voters for loop\r\n\r\n        // Validating price consensus\r\n        if (price > execution.buyPrice) {\r\n            // we need at least N out of 10_000 consensus\r\n            require(\r\n                realContributionOnBoard * 10_000 >=\r\n                    execution.buyPrice *\r\n                        minConsensusForSellingOverBuyPrice,\r\n                \"Selling over or equal buyPrice: consensus not reached\"\r\n            );\r\n        } else {\r\n            // we need a different consensus ratio\r\n            require(\r\n                realContributionOnBoard * 10_000 >=\r\n                    execution.buyPrice * minConsensusForSellingUnderOrEqualBuyPrice,\r\n                \"Selling under buyPrice: consensus not reached\"\r\n            );\r\n        }\r\n\r\n        return minExpirationTime;\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/execution/Execution.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nstruct Execution {\r\n    address collection; // zero to evaluate as non-existant\r\n    uint256 buyPrice;\r\n    uint256 tokenId;\r\n    bool sold;\r\n    \r\n    /* Marketplace listing parameters */\r\n    uint256 sellPrice; // if not sold yet, this is the amount we will recieve\r\n    // from a marketplace in case it is listed for sale\r\n    uint256 listingEndTime; // expiration time of the listing\r\n    uint256 sellProtocolFee; // only has value when a marketplace listing happens\r\n    // otherwise it is zero because the protocol fee is transferred immediately\r\n    \r\n    /* Marketplace listing hashes */\r\n    bytes32 openSeaOrderHash;\r\n    bytes32 looksRareOrderHash;\r\n}\r\n"
    },
    "contracts/libraries/assettransfer/SafeERC20Transfer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nlibrary SafeERC20Transfer {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function safeERC20Transfer(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount != 0) {\r\n            IERC20(token).safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SignatureUtil.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\r\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\r\n\r\nlibrary SignatureUtil {\r\n    function verify(\r\n        bytes32 hash,\r\n        address signer,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 domainSeparator\r\n    ) internal view returns (bool) {\r\n        require(signer != address(0), \"SignatureUtil: Invalid signer\");\r\n        bytes memory signature = abi.encodePacked(r, s, v);\r\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\r\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/NftCollection.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity >=0.8.4;\r\n\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nlibrary NftCollectionFunctions {\r\n\r\n    // interface IDs\r\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    function transferNft(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\r\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\r\n        } else {\r\n            revert(\"Collection does not support ERC721\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/libraries/externalmarketplaces/LooksRareUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4;\r\n\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\r\n\r\nlibrary LooksRareUtil {\r\n    // rinkeby\r\n    address internal constant EXCHANGE =\r\n        0x1AA777972073Ff66DCFDeD85749bDD555C0665dA;\r\n    address internal constant TRANSFER_MANAGER_ERC721 =\r\n        0x3f65A762F15D01809cDC6B43d8849fF24949c86a;\r\n    address internal constant STRATEGY_STANDARD_SALE =\r\n        0x732319A3590E4fA838C111826f9584a9A2fDEa1a;\r\n    bytes32 internal constant DOMAIN_SEPARATOR = \r\n        0x6a8c50eacf3837f71a91496bc31832bb7e76c97cd16ce5830f970949edc565e5;\r\n\r\n    // mainnet\r\n    // address public constant EXCHANGE = 0x59728544B08AB483533076417FbBB2fD0B17CE3a;\r\n    // bytes32 internal constant DOMAIN_SEPARATOR = \r\n    //     0xad4d53a9c11a3edbe96e78e969291ab5248faeb3b8d4552c21e6bc72edb8cab3;\r\n    // ...\r\n\r\n    function initializationAndPermissions(address user, address erc721address)\r\n        public\r\n    {\r\n        IERC721 erc721 = IERC721(erc721address);\r\n        if (!erc721.isApprovedForAll(user, TRANSFER_MANAGER_ERC721)) {\r\n            erc721.setApprovalForAll(TRANSFER_MANAGER_ERC721, true);\r\n        }\r\n    }\r\n\r\n    function buildAndGetMarketplaceOrderHash(\r\n        address seller,\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 listPrice, // to be paid by buyer, the amount the seller receives is affected by fees\r\n        uint256 expiration,\r\n        uint256 feesFraction, // (royalties + protocol fee fraction) out of 10_000\r\n        address paymentToken,\r\n        uint256 nonce\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            bytes32 finalOrderHash,\r\n            MakerOrder memory order\r\n        )\r\n    {\r\n        order = MakerOrder({\r\n          isOrderAsk: true,\r\n          signer: seller,\r\n          collection: collection,\r\n          price: listPrice,\r\n          tokenId: tokenId,\r\n          amount: 1, // we only support ERC721 for now\r\n          strategy: STRATEGY_STANDARD_SALE,\r\n          currency: paymentToken,\r\n          nonce: nonce,\r\n          startTime: block.timestamp,\r\n          endTime: expiration,\r\n          minPercentageToAsk: 10_000 - feesFraction,\r\n          params: \"\",\r\n\r\n          v: 0,\r\n          r: 0,\r\n          s: 0\r\n        });\r\n        finalOrderHash = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hash(order));\r\n    }\r\n\r\n    // keccak256(\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\")\r\n    bytes32 internal constant MAKER_ORDER_HASH =\r\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\r\n\r\n    struct MakerOrder {\r\n        bool isOrderAsk; // true --> ask / false --> bid\r\n        address signer; // signer of the maker order\r\n        address collection; // collection address\r\n        uint256 price; // price (used as )\r\n        uint256 tokenId; // id of the token\r\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\r\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\r\n        address currency; // currency (e.g., WETH)\r\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\r\n        uint256 startTime; // startTime in timestamp\r\n        uint256 endTime; // endTime in timestamp\r\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\r\n        bytes params; // additional parameters\r\n        uint8 v; // v: parameter (27 or 28)\r\n        bytes32 r; // r: parameter\r\n        bytes32 s; // s: parameter\r\n    }\r\n\r\n    function hash(MakerOrder memory makerOrder)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    MAKER_ORDER_HASH,\r\n                    makerOrder.isOrderAsk,\r\n                    makerOrder.signer,\r\n                    makerOrder.collection,\r\n                    makerOrder.price,\r\n                    makerOrder.tokenId,\r\n                    makerOrder.amount,\r\n                    makerOrder.strategy,\r\n                    makerOrder.currency,\r\n                    makerOrder.nonce,\r\n                    makerOrder.startTime,\r\n                    makerOrder.endTime,\r\n                    makerOrder.minPercentageToAsk,\r\n                    keccak256(makerOrder.params)\r\n                )\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/externalmarketplaces/OpenSeaUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.4;\r\n\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n\r\ninterface OpenSea {\r\n    // mapping(address => uint256) public nonces;\r\n    function nonces(address user) external view returns (uint256);\r\n}\r\n\r\ninterface OpenSeaOwnableDelegateProxy {}\r\n\r\ninterface OpenSeaProxyRegistry {\r\n    // mapping(address => OpenSeaOwnableDelegateProxy) public proxies;\r\n    function proxies(address user)\r\n        external\r\n        view\r\n        returns (OpenSeaOwnableDelegateProxy);\r\n\r\n    function registerProxy() external returns (OpenSeaOwnableDelegateProxy);\r\n}\r\n\r\nlibrary OpenSeaUtil {\r\n    // mainnet\r\n    // OpenSea public constant openSea =\r\n    //     OpenSea(0x7f268357A8c2552623316e2562D90e642bB538E5);\r\n    // address public constant WyvernTokenTransferProxy = 0xe5c783ee536cf5e63e792988335c4255169be4e1;\r\n    // bytes32 internal constant OPENSEA_DOMAIN_SEPARATOR =\r\n    //     0x72982d92449bfb3d338412ce4738761aff47fb975ceb17a1bc3712ec716a5a68;\r\n    // bytes32 internal constant _OPENSEA_ORDER_TYPEHASH =\r\n    //     0xdba08a88a748f356e8faf8578488343eab21b1741728779c9dcfdc782bc800f8;\r\n    // address internal constant openSeaFeeRecipient =\r\n    //     0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\r\n    // address internal constant openSeaMerkleValidator =\r\n    //     0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7;\r\n    // address public constant WyvernProxyRegistry =\r\n    // 0xa5409ec958c83c3f309868babaca7c86dcb077c1;\r\n\r\n    // rinkeby\r\n    OpenSea public constant openSea =\r\n        OpenSea(0xdD54D660178B28f6033a953b0E55073cFA7e3744);\r\n    OpenSeaProxyRegistry public constant wyvernProxyRegistry =\r\n        OpenSeaProxyRegistry(0x1E525EEAF261cA41b809884CBDE9DD9E1619573A);\r\n    address public constant WyvernTokenTransferProxy =\r\n        0xCdC9188485316BF6FA416d02B4F680227c50b89e;\r\n    bytes32 internal constant OPENSEA_DOMAIN_SEPARATOR =\r\n        0xd38471a54d114ee69fbb07d1769a0bbecd4f429ddf5932c7098093908e24bd9d;\r\n    bytes32 internal constant _OPENSEA_ORDER_TYPEHASH =\r\n        0xdba08a88a748f356e8faf8578488343eab21b1741728779c9dcfdc782bc800f8;\r\n    address internal constant openSeaFeeRecipient =\r\n        0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\r\n    address internal constant openSeaMerkleValidator =\r\n        0x45B594792a5CDc008D0dE1C1d69FAA3D16B3DDc1;\r\n\r\n    enum FeeMethod {\r\n        ProtocolFee,\r\n        SplitFee\r\n    }\r\n\r\n    /* An order on the exchange. */\r\n    struct OpenSeaOrder {\r\n        /* Exchange address, intended as a versioning mechanism. */\r\n        address exchange;\r\n        /* Order maker address. */\r\n        address maker;\r\n        /* Order taker address, if specified. */\r\n        address taker;\r\n        /* Maker relayer fee of the order, unused for taker order. */\r\n        uint makerRelayerFee;\r\n        /* Taker relayer fee of the order, or maximum taker fee for a taker order. */\r\n        uint takerRelayerFee;\r\n        /* Maker protocol fee of the order, unused for taker order. */\r\n        uint makerProtocolFee;\r\n        /* Taker protocol fee of the order, or maximum taker fee for a taker order. */\r\n        uint takerProtocolFee;\r\n        /* Order fee recipient or zero address for taker order. */\r\n        address feeRecipient;\r\n        /* Fee method (protocol token or split fee). */\r\n        FeeMethod feeMethod;\r\n        /* Side (buy/sell). */\r\n        SaleKindInterface.Side side;\r\n        /* Kind of sale. */\r\n        SaleKindInterface.SaleKind saleKind;\r\n        /* Target. */\r\n        address target;\r\n        /* HowToCall. */\r\n        AuthenticatedProxy.HowToCall howToCall;\r\n        /* Calldata. */\r\n        bytes calldata2; // changed 'calldata' name because of compilation error\r\n        /* Calldata replacement pattern, or an empty byte array for no replacement. */\r\n        bytes replacementPattern;\r\n        /* Static call target, zero-address for no static call. */\r\n        address staticTarget;\r\n        /* Static call extra data. */\r\n        bytes staticExtradata;\r\n        /* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */\r\n        address paymentToken;\r\n        /* Base price of the order (in paymentTokens). */\r\n        uint basePrice;\r\n        /* Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. */\r\n        uint extra;\r\n        /* Listing timestamp. */\r\n        uint listingTime;\r\n        /* Expiration timestamp - 0 for no expiry. */\r\n        uint expirationTime;\r\n        /* Order salt, used to prevent duplicate hashes. */\r\n        uint salt;\r\n        /* NOTE: uint nonce is an additional component of the order but is read from storage */\r\n    }\r\n\r\n    function hashOpenSeaOrder(OpenSeaOrder memory order, uint nonce)\r\n        internal\r\n        pure\r\n        returns (bytes32 hash)\r\n    {\r\n        /* Unfortunately abi.encodePacked doesn't work here, stack size constraints. */\r\n        uint size = 800;\r\n        bytes memory array = new bytes(size);\r\n        uint index;\r\n        assembly {\r\n            index := add(array, 0x20)\r\n        }\r\n        index = ArrayUtils.unsafeWriteBytes32(index, _OPENSEA_ORDER_TYPEHASH);\r\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.exchange);\r\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.maker);\r\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.taker);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.makerRelayerFee);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.takerRelayerFee);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.makerProtocolFee);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.takerProtocolFee);\r\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.feeRecipient);\r\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.feeMethod));\r\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.side));\r\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.saleKind));\r\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.target);\r\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.howToCall));\r\n        index = ArrayUtils.unsafeWriteBytes32(\r\n            index,\r\n            keccak256(order.calldata2)\r\n        );\r\n        index = ArrayUtils.unsafeWriteBytes32(\r\n            index,\r\n            keccak256(order.replacementPattern)\r\n        );\r\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.staticTarget);\r\n        index = ArrayUtils.unsafeWriteBytes32(\r\n            index,\r\n            keccak256(order.staticExtradata)\r\n        );\r\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.paymentToken);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.basePrice);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.extra);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.listingTime);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.expirationTime);\r\n        index = ArrayUtils.unsafeWriteUint(index, order.salt);\r\n        index = ArrayUtils.unsafeWriteUint(index, nonce);\r\n        assembly {\r\n            hash := keccak256(add(array, 0x20), size)\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    function getOpenSeaAskOrderHash(OpenSeaOrder memory order)\r\n        internal\r\n        view\r\n        returns (\r\n            bytes32 finalOrderHash,\r\n            bytes32 openSeaParamsOrderWithNonceHash\r\n        )\r\n    {\r\n        openSeaParamsOrderWithNonceHash = hashOpenSeaOrder(\r\n            order,\r\n            openSea.nonces(order.maker)\r\n        );\r\n        finalOrderHash = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                OPENSEA_DOMAIN_SEPARATOR,\r\n                openSeaParamsOrderWithNonceHash\r\n            )\r\n        );\r\n    }\r\n\r\n    function initializationAndPermissions(\r\n        address user, \r\n        address erc721address, \r\n        address WETH\r\n    ) public {\r\n        // OpenSea initialization and permissions\r\n\r\n        // Approving OpenSea to move the item (if not approved already) and WETH (yes, OpenSea requires this for the way it works)\r\n        // initialize opensea proxy (check opensea-js)\r\n        OpenSeaOwnableDelegateProxy myProxy = OpenSeaUtil\r\n            .wyvernProxyRegistry\r\n            .proxies(user);\r\n\r\n        if (address(myProxy) == address(0)) {\r\n            myProxy = OpenSeaUtil.wyvernProxyRegistry.registerProxy();\r\n        }\r\n\r\n        IERC721 erc721 = IERC721(erc721address);\r\n        if (!erc721.isApprovedForAll(user, address(myProxy))) {\r\n            erc721.setApprovalForAll(address(myProxy), true);\r\n        }\r\n\r\n        IERC20 erc20 = IERC20(WETH);\r\n        if (\r\n            erc20.allowance(\r\n                user,\r\n                OpenSeaUtil.WyvernTokenTransferProxy\r\n            ) < type(uint256).max\r\n        ) {\r\n            erc20.approve(\r\n                OpenSeaUtil.WyvernTokenTransferProxy,\r\n                type(uint256).max\r\n            );\r\n        }\r\n    }\r\n\r\n    function buildAndGetOpenSeaOrderHash(\r\n        address seller,\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 listPrice, // to be paid by buyer, the amount the seller receives is affected by feesFraction\r\n        uint256 expiration,\r\n        uint256 feesFraction, // (royalties + protocol fee fraction) out of 10_000\r\n        address paymentToken\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            bytes32 finalOrderHash,\r\n            bytes32 paramsOrderHash,\r\n            OpenSeaOrder memory order\r\n        )\r\n    {\r\n        order = OpenSeaUtil.OpenSeaOrder({\r\n            exchange: address(openSea),\r\n            maker: seller,\r\n            taker: address(0),\r\n            makerRelayerFee: feesFraction,\r\n            takerRelayerFee: 0,\r\n            makerProtocolFee: 0,\r\n            takerProtocolFee: 0,\r\n            feeMethod: FeeMethod.SplitFee,\r\n            feeRecipient: openSeaFeeRecipient,\r\n            side: SaleKindInterface.Side.Sell,\r\n            saleKind: SaleKindInterface.SaleKind.FixedPrice,\r\n            target: openSeaMerkleValidator,\r\n            howToCall: AuthenticatedProxy.HowToCall.DelegateCall,\r\n            staticTarget: address(0),\r\n            staticExtradata: \"\",\r\n            paymentToken: paymentToken,\r\n            basePrice: listPrice,\r\n            extra: 0,\r\n            calldata2: bytes.concat(\r\n                hex\"fb16a595000000000000000000000000\",\r\n                abi.encodePacked(seller),\r\n                hex\"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n                abi.encodePacked(collection),\r\n                abi.encodePacked(tokenId),\r\n                hex\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\"\r\n            ),\r\n            replacementPattern: hex\"000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\r\n            listingTime: block.timestamp,\r\n            expirationTime: expiration,\r\n            salt: block.timestamp\r\n        });\r\n        (finalOrderHash, paramsOrderHash) = getOpenSeaAskOrderHash(order);\r\n    }\r\n}\r\n\r\nlibrary ArrayUtils {\r\n    function guardedArrayReplace(\r\n        bytes memory array,\r\n        bytes memory desired,\r\n        bytes memory mask\r\n    ) internal pure {\r\n        require(array.length == desired.length);\r\n        require(array.length == mask.length);\r\n\r\n        uint words = array.length / 0x20;\r\n        uint index = words * 0x20;\r\n        assert(index / 0x20 == words);\r\n        uint i;\r\n\r\n        for (i = 0; i < words; i++) {\r\n            /* Conceptually: array[i] = (!mask[i] && array[i]) || (mask[i] && desired[i]), bitwise in word chunks. */\r\n            assembly {\r\n                let commonIndex := mul(0x20, add(1, i))\r\n                let maskValue := mload(add(mask, commonIndex))\r\n                mstore(\r\n                    add(array, commonIndex),\r\n                    or(\r\n                        and(not(maskValue), mload(add(array, commonIndex))),\r\n                        and(maskValue, mload(add(desired, commonIndex)))\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        /* Deal with the last section of the byte array. */\r\n        if (words > 0) {\r\n            /* This overlaps with bytes already set but is still more efficient than iterating through each of the remaining bytes individually. */\r\n            i = words;\r\n            assembly {\r\n                let commonIndex := mul(0x20, add(1, i))\r\n                let maskValue := mload(add(mask, commonIndex))\r\n                mstore(\r\n                    add(array, commonIndex),\r\n                    or(\r\n                        and(not(maskValue), mload(add(array, commonIndex))),\r\n                        and(maskValue, mload(add(desired, commonIndex)))\r\n                    )\r\n                )\r\n            }\r\n        } else {\r\n            /* If the byte array is shorter than a word, we must unfortunately do the whole thing bytewise.\r\n               (bounds checks could still probably be optimized away in assembly, but this is a rare case) */\r\n            for (i = index; i < array.length; i++) {\r\n                array[i] =\r\n                    ((mask[i] ^ 0xff) & array[i]) |\r\n                    (mask[i] & desired[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if two arrays are equal\r\n     * @param a First array\r\n     * @param b Second array\r\n     * @return Whether or not all bytes in the arrays are equal\r\n     */\r\n    function arrayEq(bytes memory a, bytes memory b)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return keccak256(a) == keccak256(b);\r\n    }\r\n\r\n    /**\r\n     * Unsafe write byte array into a memory location\r\n     *\r\n     * @param index Memory location\r\n     * @param source Byte array to write\r\n     * @return End memory index\r\n     */\r\n    function unsafeWriteBytes(uint index, bytes memory source)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        if (source.length > 0) {\r\n            assembly {\r\n                let length := mload(source)\r\n                let end := add(source, add(0x20, length))\r\n                let arrIndex := add(source, 0x20)\r\n                let tempIndex := index\r\n                for {\r\n\r\n                } eq(lt(arrIndex, end), 1) {\r\n                    arrIndex := add(arrIndex, 0x20)\r\n                    tempIndex := add(tempIndex, 0x20)\r\n                } {\r\n                    mstore(tempIndex, mload(arrIndex))\r\n                }\r\n                index := add(index, length)\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Unsafe write address into a memory location\r\n     *\r\n     * @param index Memory location\r\n     * @param source Address to write\r\n     * @return End memory index\r\n     */\r\n    function unsafeWriteAddress(uint index, address source)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        uint conv = uint(uint160(source)) << 0x60;\r\n        assembly {\r\n            mstore(index, conv)\r\n            index := add(index, 0x14)\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Unsafe write address into a memory location using entire word\r\n     *\r\n     * @param index Memory location\r\n     * @param source uint to write\r\n     * @return End memory index\r\n     */\r\n    function unsafeWriteAddressWord(uint index, address source)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        assembly {\r\n            mstore(index, source)\r\n            index := add(index, 0x20)\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Unsafe write uint into a memory location\r\n     *\r\n     * @param index Memory location\r\n     * @param source uint to write\r\n     * @return End memory index\r\n     */\r\n    function unsafeWriteUint(uint index, uint source)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        assembly {\r\n            mstore(index, source)\r\n            index := add(index, 0x20)\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Unsafe write uint8 into a memory location\r\n     *\r\n     * @param index Memory location\r\n     * @param source uint8 to write\r\n     * @return End memory index\r\n     */\r\n    function unsafeWriteUint8(uint index, uint8 source)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        assembly {\r\n            mstore8(index, source)\r\n            index := add(index, 0x1)\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Unsafe write uint8 into a memory location using entire word\r\n     *\r\n     * @param index Memory location\r\n     * @param source uint to write\r\n     * @return End memory index\r\n     */\r\n    function unsafeWriteUint8Word(uint index, uint8 source)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        assembly {\r\n            mstore(index, source)\r\n            index := add(index, 0x20)\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Unsafe write bytes32 into a memory location using entire word\r\n     *\r\n     * @param index Memory location\r\n     * @param source uint to write\r\n     * @return End memory index\r\n     */\r\n    function unsafeWriteBytes32(uint index, bytes32 source)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        assembly {\r\n            mstore(index, source)\r\n            index := add(index, 0x20)\r\n        }\r\n        return index;\r\n    }\r\n}\r\n\r\n//// starts more OPENSEA stuff\r\n\r\nlibrary SaleKindInterface {\r\n    /**\r\n     * Side: buy or sell.\r\n     */\r\n    enum Side {\r\n        Buy,\r\n        Sell\r\n    }\r\n\r\n    /**\r\n     * Currently supported kinds of sale: fixed price, Dutch auction.\r\n     * English auctions cannot be supported without stronger escrow guarantees.\r\n     * Future interesting options: Vickrey auction, nonlinear Dutch auctions.\r\n     */\r\n    enum SaleKind {\r\n        FixedPrice,\r\n        DutchAuction\r\n    }\r\n}\r\n\r\nlibrary AuthenticatedProxy {\r\n    enum HowToCall {\r\n        Call,\r\n        DelegateCall\r\n    }\r\n}\r\n\r\n//// ends OPENSEA stuff\r\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../extensions/ERC721Enumerable.sol\";\nimport \"../extensions/ERC721Burnable.sol\";\nimport \"../extensions/ERC721Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC721PresetMinterPauserAutoId is\n    Context,\n    AccessControlEnumerable,\n    ERC721Enumerable,\n    ERC721Burnable,\n    ERC721Pausable\n{\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) ERC721(name, symbol) {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/test/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT (taken from LooksRareExchange)\r\npragma solidity >=0.8.4;\r\n\r\nimport {ERC721PresetMinterPauserAutoId} from \"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\";\r\n\r\ncontract TestERC721 is ERC721PresetMinterPauserAutoId {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory baseTokenURI\r\n    ) ERC721PresetMinterPauserAutoId(name, symbol, baseTokenURI) {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}