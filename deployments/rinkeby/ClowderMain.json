{
  "address": "0x0012292bCfbD99fde00faE872668379E5F0090C5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makerRelayerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerRelayerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerProtocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerProtocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "enum OpenSeaUtil.FeeMethod",
              "name": "feeMethod",
              "type": "uint8"
            },
            {
              "internalType": "enum SaleKindInterface.Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "enum SaleKindInterface.SaleKind",
              "name": "saleKind",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum AuthenticatedProxy.HowToCall",
              "name": "howToCall",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "calldata2",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "replacementPattern",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "staticTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "staticExtradata",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "extra",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct OpenSeaUtil.OpenSeaOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "paramsOrderHash",
          "type": "bytes32"
        }
      ],
      "name": "OpenSeaOrderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "buyOrderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "sellOrderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minConsensusForSellingOverOrEqualBuyPrice",
          "type": "uint256"
        }
      ],
      "name": "changeMinConsensusForSellingOverOrEqualBuyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minConsensusForSellingUnderBuyPrice",
          "type": "uint256"
        }
      ],
      "name": "changeMinConsensusForSellingUnderBuyPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeFraction",
          "type": "uint256"
        }
      ],
      "name": "changeProtocolFeeFraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeFractionFromSelling",
          "type": "uint256"
        }
      ],
      "name": "changeProtocolFeeFractionFromSelling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "name": "changeProtocolFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "executionIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "executionIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "buyOrders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "executeOnPassiveBuyOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        }
      ],
      "name": "executeOnPassiveSellOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "executions",
      "outputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sellPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "openSeaOrderHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "looksRareOrderHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isUsedBuyNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isUsedSellNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketplaceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "listOnLooksRare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "executorPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketplaceFee",
          "type": "uint256"
        }
      ],
      "name": "listOnOpenSea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minConsensusForSellingOverOrEqualBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minConsensusForSellingUnderBuyPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeFractionFromSelling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "realContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa80cf81c2c48f3439a11298e5ae5298f221fee5a0b3380903ac7974218d3ce7b",
  "receipt": {
    "to": null,
    "from": "0xC103d1b071AFA925714eE55b2F4869300C4331C4",
    "contractAddress": "0x0012292bCfbD99fde00faE872668379E5F0090C5",
    "transactionIndex": 6,
    "gasUsed": "3622479",
    "logsBloom": "0x
    "blockHash": "0xe826a380086db2af73f5fb1c773202a8763085723097976492c220a1ad91afe2",
    "transactionHash": "0xa80cf81c2c48f3439a11298e5ae5298f221fee5a0b3380903ac7974218d3ce7b",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10783880,
        "transactionHash": "0xa80cf81c2c48f3439a11298e5ae5298f221fee5a0b3380903ac7974218d3ce7b",
        "address": "0x0012292bCfbD99fde00faE872668379E5F0090C5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c103d1b071afa925714ee55b2f4869300c4331c4"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe826a380086db2af73f5fb1c773202a8763085723097976492c220a1ad91afe2"
      }
    ],
    "blockNumber": 10783880,
    "cumulativeGasUsed": "6782134",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    "0xC103d1b071AFA925714eE55b2F4869300C4331C4"
  ],
  "numDeployments": 5,
  "solcInputHash": "542e7778796973ccd2d52cdf9adbbc1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"enum OpenSeaUtil.FeeMethod\",\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"internalType\":\"enum SaleKindInterface.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum SaleKindInterface.SaleKind\",\"name\":\"saleKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum AuthenticatedProxy.HowToCall\",\"name\":\"howToCall\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"calldata2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"staticTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct OpenSeaUtil.OpenSeaOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paramsOrderHash\",\"type\":\"bytes32\"}],\"name\":\"OpenSeaOrderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyOrderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sellOrderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minConsensusForSellingOverOrEqualBuyPrice\",\"type\":\"uint256\"}],\"name\":\"changeMinConsensusForSellingOverOrEqualBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minConsensusForSellingUnderBuyPrice\",\"type\":\"uint256\"}],\"name\":\"changeMinConsensusForSellingUnderBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeFraction\",\"type\":\"uint256\"}],\"name\":\"changeProtocolFeeFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeFractionFromSelling\",\"type\":\"uint256\"}],\"name\":\"changeProtocolFeeFractionFromSelling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"changeProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"executionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"executionIds\",\"type\":\"uint256[]\"}],\"name\":\"claimProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"executeOnPassiveBuyOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"}],\"name\":\"executeOnPassiveSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"openSeaOrderHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"looksRareOrderHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUsedBuyNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUsedSellNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"listOnLooksRare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketplaceFee\",\"type\":\"uint256\"}],\"name\":\"listOnOpenSea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minConsensusForSellingOverOrEqualBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minConsensusForSellingUnderBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeFractionFromSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeMinConsensusForSellingOverOrEqualBuyPrice(uint256)\":{\"params\":{\"_minConsensusForSellingOverOrEqualBuyPrice\":\"new min consensus (out of 10_000)\"}},\"changeMinConsensusForSellingUnderBuyPrice(uint256)\":{\"params\":{\"_minConsensusForSellingUnderBuyPrice\":\"new min consensus (out of 10_000)\"}},\"changeProtocolFeeFraction(uint256)\":{\"params\":{\"_protocolFeeFraction\":\"new fee fraction (out of 10_000)\"}},\"changeProtocolFeeFractionFromSelling(uint256)\":{\"params\":{\"_protocolFeeFractionFromSelling\":\"new fee fraction (out of 10_000)\"}},\"changeProtocolFeeReceiver(address)\":{\"params\":{\"_protocolFeeReceiver\":\"new receiver\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeMinConsensusForSellingOverOrEqualBuyPrice(uint256)\":{\"notice\":\"[onlyOwner] Change the min consensus for selling over or equal to buy price\"},\"changeMinConsensusForSellingUnderBuyPrice(uint256)\":{\"notice\":\"[onlyOwner] Change the min consensus for selling under buy price\"},\"changeProtocolFeeFraction(uint256)\":{\"notice\":\"[onlyOwner] Change the protocol fee fraction\"},\"changeProtocolFeeFractionFromSelling(uint256)\":{\"notice\":\"[onlyOwner] Change the protocol fee fraction from selling\"},\"changeProtocolFeeReceiver(address)\":{\"notice\":\"[onlyOwner] Change the protocol fee receiver\"},\"executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256)\":{\"notice\":\"Executes on an array of passive buy orders\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClowderMain.sol\":\"ClowderMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/ClowderMain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n// _________ .__                   .___\\r\\n// \\\\_   ___ \\\\|  |   ______  _  ____| _/___________\\r\\n// /    \\\\  \\\\/|  |  /  _ \\\\ \\\\/ \\\\/ / __ |/ __ \\\\_  __ \\\\\\r\\n// \\\\     \\\\___|  |_(  <_> )     / /_/ \\\\  ___/|  | \\\\/\\r\\n//  \\\\______  /____/\\\\____/ \\\\/\\\\_/\\\\____ |\\\\___  >__|\\r\\n//         \\\\/                       \\\\/    \\\\/\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\nimport {BuyOrderV1, BuyOrderV1Functions} from \\\"./libraries/passiveorders/BuyOrderV1.sol\\\";\\r\\nimport {Execution} from \\\"./libraries/execution/Execution.sol\\\";\\r\\nimport {SafeERC20Transfer} from \\\"./libraries/assettransfer/SafeERC20Transfer.sol\\\";\\r\\nimport {SignatureUtil} from \\\"./libraries/SignatureUtil.sol\\\";\\r\\nimport {OpenSeaUtil} from \\\"./libraries/externalmarketplaces/OpenSeaUtil.sol\\\";\\r\\nimport {LooksRareUtil} from \\\"./libraries/externalmarketplaces/LooksRareUtil.sol\\\";\\r\\nimport {NftCollectionFunctions} from \\\"./libraries/NftCollection.sol\\\";\\r\\n\\r\\ncontract ClowderMainOwnable is Ownable {\\r\\n    address public protocolFeeReceiver;\\r\\n    uint256 public protocolFeeFraction = 100; // out of 10_000\\r\\n    uint256 public protocolFeeFractionFromSelling = 100; // out of 10_000\\r\\n    uint256 public minConsensusForSellingOverOrEqualBuyPrice = 5_000; // out of 10_000\\r\\n    uint256 public minConsensusForSellingUnderBuyPrice = 10_000; // out of 10_000\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the protocol fee receiver\\r\\n     * @param _protocolFeeReceiver new receiver\\r\\n     */\\r\\n    function changeProtocolFeeReceiver(address _protocolFeeReceiver)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        protocolFeeReceiver = _protocolFeeReceiver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the protocol fee fraction\\r\\n     * @param _protocolFeeFraction new fee fraction (out of 10_000)\\r\\n     */\\r\\n    function changeProtocolFeeFraction(uint256 _protocolFeeFraction)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        protocolFeeFraction = _protocolFeeFraction;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the protocol fee fraction from selling\\r\\n     * @param _protocolFeeFractionFromSelling new fee fraction (out of 10_000)\\r\\n     */\\r\\n    function changeProtocolFeeFractionFromSelling(\\r\\n        uint256 _protocolFeeFractionFromSelling\\r\\n    ) external onlyOwner {\\r\\n        protocolFeeFractionFromSelling = _protocolFeeFractionFromSelling;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the min consensus for selling over or equal to buy price\\r\\n     * @param _minConsensusForSellingOverOrEqualBuyPrice new min consensus (out of 10_000)\\r\\n     */\\r\\n    function changeMinConsensusForSellingOverOrEqualBuyPrice(\\r\\n        uint256 _minConsensusForSellingOverOrEqualBuyPrice\\r\\n    ) external onlyOwner {\\r\\n        minConsensusForSellingOverOrEqualBuyPrice = _minConsensusForSellingOverOrEqualBuyPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice [onlyOwner] Change the min consensus for selling under buy price\\r\\n     * @param _minConsensusForSellingUnderBuyPrice new min consensus (out of 10_000)\\r\\n     */\\r\\n    function changeMinConsensusForSellingUnderBuyPrice(\\r\\n        uint256 _minConsensusForSellingUnderBuyPrice\\r\\n    ) external onlyOwner {\\r\\n        minConsensusForSellingUnderBuyPrice = _minConsensusForSellingUnderBuyPrice;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ClowderMain is\\r\\n    ClowderMainOwnable,\\r\\n    ReentrancyGuard,\\r\\n    ERC721Holder,\\r\\n    ERC1155Holder,\\r\\n    IERC1271\\r\\n{\\r\\n    address public immutable WETH;\\r\\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\\r\\n\\r\\n    // user => nonce => isUsedBuyNonce\\r\\n    mapping(address => mapping(uint256 => bool)) public isUsedBuyNonce;\\r\\n    // user => nonce => isUsedSellNonce\\r\\n    mapping(address => mapping(uint256 => bool)) public isUsedSellNonce;\\r\\n    // buyer => executionId => real contribution\\r\\n    // Returns to zero when the owner is given their part of the\\r\\n    // sale proceeds (claimProceeds).\\r\\n    mapping(address => mapping(uint256 => uint256)) public realContributions;\\r\\n    // executionId => Execution\\r\\n    mapping(uint256 => Execution) public executions;\\r\\n\\r\\n    /* Events */\\r\\n    event OpenSeaOrderSet(\\r\\n        OpenSeaUtil.OpenSeaOrder order,\\r\\n        bytes32 paramsOrderHash\\r\\n    );\\r\\n\\r\\n    constructor(address _WETH, address _protocolFeeReceiver) {\\r\\n        WETH = _WETH;\\r\\n        protocolFeeReceiver = _protocolFeeReceiver;\\r\\n\\r\\n        EIP712_DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                ), // EIP712 domain typehash\\r\\n                keccak256(\\\"Clowder\\\"), // name\\r\\n                keccak256(bytes(\\\"0.1\\\")), // version\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function cancelBuyOrders(uint256[] calldata buyOrderNonces) external {\\r\\n        require(\\r\\n            buyOrderNonces.length > 0,\\r\\n            \\\"Cancel: Must provide at least one nonce\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < buyOrderNonces.length; i++) {\\r\\n            isUsedBuyNonce[msg.sender][buyOrderNonces[i]] = true; // used\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function cancelSellOrders(uint256[] calldata sellOrderNonces) external {\\r\\n        require(\\r\\n            sellOrderNonces.length > 0,\\r\\n            \\\"Cancel: Must provide at least one nonce\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < sellOrderNonces.length; i++) {\\r\\n            isUsedSellNonce[msg.sender][sellOrderNonces[i]] = true; // cancelled\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes on an array of passive buy orders\\r\\n     */\\r\\n    function executeOnPassiveBuyOrders(\\r\\n        BuyOrderV1[] calldata buyOrders,\\r\\n        uint256 executorPrice,\\r\\n        uint256 tokenId\\r\\n    ) external nonReentrant {\\r\\n        require(buyOrders.length > 0, \\\"Execute: Must have at least one order\\\");\\r\\n\\r\\n        uint256 protocolFee = (protocolFeeFraction * executorPrice) / 10_000;\\r\\n        uint256 price = executorPrice + protocolFee;\\r\\n        address collection = buyOrders[0].collection;\\r\\n        uint256 executionId = buyOrders[0].executionId;\\r\\n\\r\\n        require(\\r\\n            executions[executionId].collection == address(0),\\r\\n            \\\"Execute: Id already executed\\\"\\r\\n        );\\r\\n        // creating the execution object immediately (extra measure to prevent reentrancy)\\r\\n        executions[executionId] = Execution({\\r\\n            collection: collection,\\r\\n            buyPrice: price,\\r\\n            tokenId: tokenId,\\r\\n            sold: false,\\r\\n            sellPrice: 0,\\r\\n            listingEndTime: 0,\\r\\n            sellProtocolFee: 0,\\r\\n            openSeaOrderHash: bytes32(0),\\r\\n            looksRareOrderHash: bytes32(0)\\r\\n        });\\r\\n\\r\\n        uint256 protocolFeeTransferred = 0;\\r\\n        uint256 executorPriceTransferred = 0;\\r\\n\\r\\n        // validate and process all the buy orders\\r\\n        for (uint256 i = 0; i < buyOrders.length; i++) {\\r\\n            BuyOrderV1 calldata order = buyOrders[i];\\r\\n            // Validate order nonce usability\\r\\n            require(\\r\\n                !isUsedBuyNonce[order.signer][order.buyNonce],\\r\\n                \\\"Order nonce is unusable\\\"\\r\\n            );\\r\\n            // Invalidating order nonce immediately (to avoid reentrancy\\r\\n            // or even reusing the signature in this loop)\\r\\n            // DO NOT separate from the above check, otherwise the order\\r\\n            // nonce could be reused (you can check the\\r\\n            // executeOnPassiveSellOrders for guidance). If you need separation\\r\\n            // probably you can check the signer/nonces before \\\"i\\\".\\r\\n            isUsedBuyNonce[order.signer][order.buyNonce] = true;\\r\\n            // Validate order signature\\r\\n            bytes32 orderHash = order.hash();\\r\\n            require(\\r\\n                SignatureUtil.verify(\\r\\n                    orderHash,\\r\\n                    order.signer,\\r\\n                    order.v,\\r\\n                    order.r,\\r\\n                    order.s,\\r\\n                    EIP712_DOMAIN_SEPARATOR\\r\\n                ),\\r\\n                \\\"Signature: Invalid\\\"\\r\\n            );\\r\\n            // Validate the order is not expired\\r\\n            require(order.buyPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\r\\n\\r\\n            // Validate the order can accept the price\\r\\n            require(order.canAcceptBuyPrice(price), \\\"Order can't accept price\\\");\\r\\n            // Validate collection\\r\\n            require(\\r\\n                order.collection == collection,\\r\\n                \\\"Order collection mismatch\\\"\\r\\n            );\\r\\n            // Validate executionId\\r\\n            require(\\r\\n                order.executionId == executionId,\\r\\n                \\\"Order executionId mismatch\\\"\\r\\n            );\\r\\n\\r\\n            uint256 contribution = order.contribution;\\r\\n\\r\\n            // transferring the protocol fee\\r\\n            uint256 protocolWethAmount = Math.min(\\r\\n                protocolFee - protocolFeeTransferred,\\r\\n                contribution\\r\\n            );\\r\\n            protocolFeeTransferred += protocolWethAmount;\\r\\n            _safeTransferWETH(\\r\\n                order.signer,\\r\\n                protocolFeeReceiver,\\r\\n                protocolWethAmount\\r\\n            );\\r\\n\\r\\n            // transferring the protocol executor price\\r\\n            uint256 executorPriceAmount = Math.min(\\r\\n                executorPrice - executorPriceTransferred,\\r\\n                contribution - protocolWethAmount\\r\\n            );\\r\\n            executorPriceTransferred += executorPriceAmount;\\r\\n            _safeTransferWETH(order.signer, msg.sender, executorPriceAmount);\\r\\n\\r\\n            // adding to the real contribution of the signer\\r\\n            uint256 realContribution = protocolWethAmount + executorPriceAmount;\\r\\n            realContributions[order.signer][executionId] += realContribution;\\r\\n        } // ends the orders for loop\\r\\n\\r\\n        // validating that we transferred the correct amounts of WETH\\r\\n        require(\\r\\n            protocolFeeTransferred == protocolFee,\\r\\n            \\\"Protocol fee not transferred correctly\\\"\\r\\n        );\\r\\n        require(\\r\\n            executorPriceTransferred == executorPrice,\\r\\n            \\\"Executor price not transferred correctly\\\"\\r\\n        );\\r\\n\\r\\n        // transferring the NFT\\r\\n        NftCollectionFunctions.transferNft(\\r\\n            collection,\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            tokenId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _invalidateNonces(BuyOrderV1[] calldata orders) internal {\\r\\n        // Invalidating nonces\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            BuyOrderV1 calldata order = orders[i];\\r\\n            // Invalidating order nonce (to avoid reentrancy)\\r\\n            isUsedSellNonce[order.signer][order.sellNonce] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function executeOnPassiveSellOrders(\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        uint256 executorPrice\\r\\n    ) external nonReentrant {\\r\\n        require(orders.length > 0, \\\"ExecuteSell: Must have at least one order\\\");\\r\\n\\r\\n        uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\\r\\n            10_000;\\r\\n        uint256 price = executorPrice - protocolFee;\\r\\n        uint256 executionId = orders[0].executionId;\\r\\n\\r\\n        Execution storage execution = executions[executionId];\\r\\n\\r\\n        /* Validations */\\r\\n\\r\\n        require(execution.collection != address(0), \\\"Execution doesn't exist\\\");\\r\\n\\r\\n        require(!execution.sold, \\\"Execution already sold\\\");\\r\\n\\r\\n        BuyOrderV1Functions.validateSellOrdersParameters(\\r\\n            isUsedSellNonce,\\r\\n            realContributions,\\r\\n            orders,\\r\\n            executionId,\\r\\n            execution,\\r\\n            price,\\r\\n            minConsensusForSellingOverOrEqualBuyPrice,\\r\\n            minConsensusForSellingUnderBuyPrice\\r\\n        );\\r\\n\\r\\n        /* Invalidations */\\r\\n\\r\\n        _invalidateNonces(orders);\\r\\n\\r\\n        // marking as sold (to prevent reentrancy)\\r\\n        execution.sold = true;\\r\\n\\r\\n        // storing the price to be distributed among the owners\\r\\n        execution.sellPrice = price;\\r\\n\\r\\n        // We don't store protocol fees here as they are only used for\\r\\n        // claiming them, and we don't need claiming here because\\r\\n        // we are already transferring them.\\r\\n\\r\\n        /* Giving away execution flow */\\r\\n\\r\\n        // Validate signatures (includes interaction with\\r\\n        // other contracts)\\r\\n        BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\\r\\n\\r\\n        // transferring the WETH from the caller to Clowder\\r\\n        _safeTransferWETH(msg.sender, address(this), price);\\r\\n\\r\\n        // transferring the protocol fee\\r\\n        _safeTransferWETH(msg.sender, protocolFeeReceiver, protocolFee);\\r\\n\\r\\n        // transferring the NFT\\r\\n        NftCollectionFunctions.transferNft(\\r\\n            execution.collection,\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            execution.tokenId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _beforeStoringTheListingHash(\\r\\n        uint256 expirationTime,\\r\\n        uint256 sellPrice,\\r\\n        uint256 executionId,\\r\\n        uint256 protocolFee\\r\\n    ) internal {\\r\\n        Execution storage execution = executions[executionId];\\r\\n\\r\\n        // Disable old listing signatures in case new listing parameters are different\\r\\n        // from the ones in the execution object.\\r\\n        // This is done to due to the fact that we don't support concurrent listings\\r\\n        // with different prices.\\r\\n        if (\\r\\n            execution.listingEndTime != expirationTime ||\\r\\n            execution.sellPrice != sellPrice\\r\\n        ) {\\r\\n            execution.openSeaOrderHash = 0;\\r\\n            execution.looksRareOrderHash = 0;\\r\\n        }\\r\\n        // storing the listing end time\\r\\n        execution.listingEndTime = expirationTime;\\r\\n        // storing the last list price so we know how much to\\r\\n        // to be awarded to each owner\\r\\n        execution.sellPrice = sellPrice;\\r\\n        // storing the protocol fee\\r\\n        execution.sellProtocolFee = protocolFee;\\r\\n    }\\r\\n\\r\\n    function listOnOpenSea(\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        uint256 executorPrice,\\r\\n        uint256 marketplaceFee // out of 10_000\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            orders.length > 0,\\r\\n            \\\"ListOnMarketplace: Must have at least one order\\\"\\r\\n        );\\r\\n\\r\\n        uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\\r\\n            10_000;\\r\\n        uint256 price = executorPrice - protocolFee;\\r\\n        uint256 executionId = orders[0].executionId;\\r\\n\\r\\n        Execution storage execution = executions[executionId];\\r\\n\\r\\n        /* Validations */\\r\\n\\r\\n        require(execution.collection != address(0), \\\"Execution doesn't exist\\\");\\r\\n\\r\\n        require(!execution.sold, \\\"Execution already sold\\\");\\r\\n\\r\\n        uint256 minExpirationTime = BuyOrderV1Functions\\r\\n            .validateSellOrdersParameters(\\r\\n                isUsedSellNonce,\\r\\n                realContributions,\\r\\n                orders,\\r\\n                executionId,\\r\\n                execution,\\r\\n                price,\\r\\n                minConsensusForSellingOverOrEqualBuyPrice,\\r\\n                minConsensusForSellingUnderBuyPrice\\r\\n            );\\r\\n\\r\\n        // Validate signatures (includes interaction with\\r\\n        // other contracts)\\r\\n        BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\\r\\n\\r\\n        OpenSeaUtil.initializationAndPermissions(\\r\\n            address(this),\\r\\n            execution.collection,\\r\\n            WETH\\r\\n        );\\r\\n\\r\\n        {\\r\\n            // OpenSea listing\\r\\n\\r\\n            // creating the OpenSea sell order\\r\\n            (\\r\\n                bytes32 _hash,\\r\\n                bytes32 paramsOrderHash,\\r\\n                OpenSeaUtil.OpenSeaOrder memory openSeaOrder\\r\\n            ) = OpenSeaUtil.buildAndGetOpenSeaOrderHash(\\r\\n                    address(this),\\r\\n                    execution.collection,\\r\\n                    execution.tokenId,\\r\\n                    // calculating list price:\\r\\n                    (10_000 * executorPrice) / (10_000 - marketplaceFee) + 1,\\r\\n                    minExpirationTime,\\r\\n                    marketplaceFee,\\r\\n                    WETH\\r\\n                );\\r\\n            require(_hash != 0, \\\"Hash must not be 0\\\");\\r\\n\\r\\n            _beforeStoringTheListingHash(\\r\\n                minExpirationTime,\\r\\n                price,\\r\\n                executionId,\\r\\n                protocolFee\\r\\n            );\\r\\n\\r\\n            // storing the corresponding hash by executionId\\r\\n            execution.openSeaOrderHash = _hash;\\r\\n\\r\\n            emit OpenSeaOrderSet(openSeaOrder, paramsOrderHash);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function listOnLooksRare(\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        uint256 executorPrice,\\r\\n        uint256 marketplaceFee, // out of 10_000\\r\\n        uint256 nonce\\r\\n    ) external nonReentrant {\\r\\n        require(\\r\\n            orders.length > 0,\\r\\n            \\\"ListOnMarketplace: Must have at least one order\\\"\\r\\n        );\\r\\n\\r\\n        uint256 protocolFee = (protocolFeeFractionFromSelling * executorPrice) /\\r\\n            10_000;\\r\\n        uint256 price = executorPrice - protocolFee;\\r\\n        uint256 executionId = orders[0].executionId;\\r\\n\\r\\n        Execution storage execution = executions[executionId];\\r\\n\\r\\n        /* Validations */\\r\\n\\r\\n        require(execution.collection != address(0), \\\"Execution doesn't exist\\\");\\r\\n\\r\\n        require(!execution.sold, \\\"Execution already sold\\\");\\r\\n\\r\\n        uint256 minExpirationTime = BuyOrderV1Functions\\r\\n            .validateSellOrdersParameters(\\r\\n                isUsedSellNonce,\\r\\n                realContributions,\\r\\n                orders,\\r\\n                executionId,\\r\\n                execution,\\r\\n                price,\\r\\n                minConsensusForSellingOverOrEqualBuyPrice,\\r\\n                minConsensusForSellingUnderBuyPrice\\r\\n            );\\r\\n\\r\\n        // Validate signatures (includes interaction with\\r\\n        // other contracts)\\r\\n        BuyOrderV1Functions.validateSignatures(orders, EIP712_DOMAIN_SEPARATOR);\\r\\n\\r\\n        LooksRareUtil.initializationAndPermissions(\\r\\n            address(this),\\r\\n            execution.collection\\r\\n        );\\r\\n\\r\\n        {\\r\\n            // LooksRare listing\\r\\n            (\\r\\n                bytes32 _hash,\\r\\n                // LooksRareUtil.MakerOrder memory order\\r\\n            ) = LooksRareUtil.buildAndGetOpenSeaOrderHash(\\r\\n                    address(this),\\r\\n                    execution.collection,\\r\\n                    execution.tokenId,\\r\\n                    // calculating list price:\\r\\n                    (10_000 * executorPrice) / (10_000 - marketplaceFee) + 1,\\r\\n                    minExpirationTime,\\r\\n                    marketplaceFee,\\r\\n                    WETH,\\r\\n                    nonce\\r\\n                );\\r\\n            require(_hash != 0, \\\"Hash must not be 0\\\");\\r\\n\\r\\n            _beforeStoringTheListingHash(\\r\\n                minExpirationTime,\\r\\n                price,\\r\\n                executionId,\\r\\n                protocolFee\\r\\n            );\\r\\n\\r\\n            // storing the corresponding hash by executionId\\r\\n            execution.looksRareOrderHash = _hash;\\r\\n\\r\\n            // emit OpenSeaOrderSet(openSeaOrder, paramsOrderHash);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bytes4)\\r\\n    {\\r\\n        require(_hash != 0, \\\"Hash must not be 0\\\");\\r\\n        uint256 executionId = uint256(bytes32(_signature[:32]));\\r\\n        uint256 marketplaceId = uint256(bytes32(_signature[32:64]));\\r\\n\\r\\n        // Validate signatures\\r\\n        if (\\r\\n            (marketplaceId == 0 &&\\r\\n                executions[executionId].openSeaOrderHash == _hash) ||\\r\\n            (marketplaceId == 1 &&\\r\\n                executions[executionId].looksRareOrderHash == _hash)\\r\\n        ) {\\r\\n            return 0x1626ba7e;\\r\\n        }\\r\\n        return 0xffffffff;\\r\\n    }\\r\\n\\r\\n    function claimNft(uint256 executionId, address to) external nonReentrant {\\r\\n        Execution storage execution = executions[executionId];\\r\\n        require(\\r\\n            execution.collection != address(0),\\r\\n            \\\"ClaimNft: Execution doesn't exist\\\"\\r\\n        );\\r\\n        require(!execution.sold, \\\"ClaimNft: Execution already sold\\\");\\r\\n        /*\\r\\n         * Invalidating immediately (extra measure to prevent reentrancy)\\r\\n         * TODO: maybe we can zero the execution struct instead (?),\\r\\n         * that way we save gas and also allow re-using the executionId\\r\\n         */\\r\\n        executions[executionId].sold = true;\\r\\n        // validating real contribution\\r\\n        uint256 realContribution = realContributions[msg.sender][executionId];\\r\\n        require(\\r\\n            execution.buyPrice == realContribution,\\r\\n            \\\"ClaimNft: wrong real contribution\\\"\\r\\n        );\\r\\n        // just for claiming gas deductions\\r\\n        realContributions[msg.sender][executionId] = 0;\\r\\n        // transferring the NFT\\r\\n        NftCollectionFunctions.transferNft(\\r\\n            execution.collection,\\r\\n            address(this),\\r\\n            to,\\r\\n            execution.tokenId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _preClaim(uint256[] calldata executionIds) internal {\\r\\n        // loop over the executions\\r\\n        for (uint256 i = 0; i < executionIds.length; i++) {\\r\\n            uint256 executionId = executionIds[i];\\r\\n            Execution storage execution = executions[executionId];\\r\\n\\r\\n            require(\\r\\n                execution.collection != address(0),\\r\\n                \\\"PreClaim: Execution doesn't exist\\\"\\r\\n            );\\r\\n            // Validating that we already sold the NFT\\r\\n            // or that we don't have it anymore (if NFT was sold through a marketplace).\\r\\n            // What about if nobody has claimed their proceeds from an old execution of the same NFT?\\r\\n            // They wouldn't be allowed to claim proceeds until the current execution NFT is sold.\\r\\n            // That's why the fee receiver should mark the execution as sold\\r\\n            // as soon as the NFT is gone (sold), for now only\\r\\n            // the fee receiver can receive the protocol sell fee. Do we need\\r\\n            // to allow external arbitragers?\\r\\n            // Another option is create a new contract per execution,\\r\\n            // so this new contract holds the NFT, WETH and the execution struct,\\r\\n            // would that be a bit more gas-expensive?\\r\\n            bool clowderOwnsTheNft = IERC721(execution.collection).ownerOf(\\r\\n                execution.tokenId\\r\\n            ) == address(this);\\r\\n            require(\\r\\n                execution.sold || !clowderOwnsTheNft,\\r\\n                \\\"PreClaim: NFT has not been sold nor ask has been taken\\\"\\r\\n            );\\r\\n            // Marking the execution as sold so future claimers don't need to\\r\\n            // rely on checking whether Clowder owns the NFT or not\\r\\n            if (!execution.sold) {\\r\\n                execution.sold = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimProceeds(uint256[] calldata executionIds, address to)\\r\\n        external\\r\\n    {\\r\\n        _preClaim(executionIds);\\r\\n\\r\\n        uint256 proceedsSum = 0;\\r\\n        // loop over the executions\\r\\n        for (uint256 i = 0; i < executionIds.length; i++) {\\r\\n            uint256 executionId = executionIds[i];\\r\\n            Execution storage execution = executions[executionId];\\r\\n\\r\\n            // transferring the WETH to the signer\\r\\n            uint256 realContribution = realContributions[msg.sender][\\r\\n                executionId\\r\\n            ];\\r\\n            uint256 price = execution.sellPrice;\\r\\n            // dust remains for the smart contract, that's ok\\r\\n            uint256 proceeds = (realContribution * price) / execution.buyPrice;\\r\\n            // to prevent double claiming:\\r\\n            realContributions[msg.sender][executionId] = 0;\\r\\n            proceedsSum += proceeds;\\r\\n        }\\r\\n        _safeTransferWETH(address(this), to, proceedsSum);\\r\\n    }\\r\\n\\r\\n    function claimProtocolFees(uint256[] calldata executionIds) external {\\r\\n        _preClaim(executionIds);\\r\\n\\r\\n        uint256 feesSum = 0;\\r\\n        // loop over the executions\\r\\n        for (uint256 i = 0; i < executionIds.length; i++) {\\r\\n            uint256 executionId = executionIds[i];\\r\\n            Execution storage execution = executions[executionId];\\r\\n\\r\\n            feesSum += execution.sellProtocolFee;\\r\\n            // marking it zero so the protocol fee receiever can't receive it again\\r\\n            execution.sellProtocolFee = 0;\\r\\n        }\\r\\n        _safeTransferWETH(address(this), protocolFeeReceiver, feesSum);\\r\\n    }\\r\\n\\r\\n    function _safeTransferWETH(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        SafeERC20Transfer.safeERC20Transfer(WETH, from, to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc24492048cbe51d4e71317431aa624c3f40139d8971a7b8eb05efdd05c8633d7\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/NftCollection.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nlibrary NftCollectionFunctions {\\r\\n\\r\\n    // interface IDs\\r\\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n    function transferNft(\\r\\n        address collection,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal {\\r\\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\\r\\n            IERC721(collection).safeTransferFrom(from, to, tokenId);\\r\\n        } else {\\r\\n            revert(\\\"Collection does not support ERC721\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4d595340de0c0ca8ea311db1704f1e317bbe25ba0ed7f496c5504be4e00feadd\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SignatureUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\r\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\nlibrary SignatureUtil {\\r\\n    function verify(\\r\\n        bytes32 hash,\\r\\n        address signer,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s,\\r\\n        bytes32 domainSeparator\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"SignatureUtil: Invalid signer\\\");\\r\\n        bytes memory signature = abi.encodePacked(r, s, v);\\r\\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\\r\\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8bc4bf2343815c4e0d5af099cfce669c35c32dd3d4c379f0f460b48044e02451\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/assettransfer/SafeERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary SafeERC20Transfer {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function safeERC20Transfer(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount != 0) {\\r\\n            IERC20(token).safeTransferFrom(from, to, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe15515dccce559802b2f873507d5e1798564ec4a26fe8bb00859ca0bb1106561\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/execution/Execution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nstruct Execution {\\r\\n    address collection; // zero to evaluate as non-existant\\r\\n    uint256 buyPrice;\\r\\n    uint256 tokenId;\\r\\n    bool sold;\\r\\n    \\r\\n    /* Marketplace listing parameters */\\r\\n    uint256 sellPrice; // if not sold yet, this is the amount we will recieve\\r\\n    // from a marketplace in case it is listed for sale\\r\\n    uint256 listingEndTime; // expiration time of the listing\\r\\n    uint256 sellProtocolFee; // only has value when a marketplace listing happens\\r\\n    // otherwise it is zero because the protocol fee is transferred immediately\\r\\n    \\r\\n    /* Marketplace listing hashes */\\r\\n    bytes32 openSeaOrderHash;\\r\\n    bytes32 looksRareOrderHash;\\r\\n}\\r\\n\",\"keccak256\":\"0x390494b7a86217ab67effff754173baee2f7b66e22472427d358dd777e0a3303\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/externalmarketplaces/LooksRareUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\nlibrary LooksRareUtil {\\r\\n    // rinkeby\\r\\n    address internal constant EXCHANGE =\\r\\n        0x1AA777972073Ff66DCFDeD85749bDD555C0665dA;\\r\\n    address internal constant TRANSFER_MANAGER_ERC721 =\\r\\n        0x3f65A762F15D01809cDC6B43d8849fF24949c86a;\\r\\n    address internal constant STRATEGY_STANDARD_SALE =\\r\\n        0x732319A3590E4fA838C111826f9584a9A2fDEa1a;\\r\\n    bytes32 internal constant DOMAIN_SEPARATOR = \\r\\n        0x6a8c50eacf3837f71a91496bc31832bb7e76c97cd16ce5830f970949edc565e5;\\r\\n\\r\\n    // mainnet\\r\\n    // address public constant EXCHANGE = 0x59728544B08AB483533076417FbBB2fD0B17CE3a;\\r\\n    // bytes32 internal constant DOMAIN_SEPARATOR = \\r\\n    //     0xad4d53a9c11a3edbe96e78e969291ab5248faeb3b8d4552c21e6bc72edb8cab3;\\r\\n    // ...\\r\\n\\r\\n    function initializationAndPermissions(address user, address erc721address)\\r\\n        public\\r\\n    {\\r\\n        IERC721 erc721 = IERC721(erc721address);\\r\\n        if (!erc721.isApprovedForAll(user, TRANSFER_MANAGER_ERC721)) {\\r\\n            erc721.setApprovalForAll(TRANSFER_MANAGER_ERC721, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buildAndGetOpenSeaOrderHash(\\r\\n        address seller,\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        uint256 listPrice, // to be paid by buyer, the amount the seller receives is affected by fees\\r\\n        uint256 expiration,\\r\\n        uint256 feesFraction, // (royalties + protocol fee fraction) out of 10_000\\r\\n        address paymentToken,\\r\\n        uint256 nonce\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            bytes32 finalOrderHash,\\r\\n            MakerOrder memory order\\r\\n        )\\r\\n    {\\r\\n        order = MakerOrder({\\r\\n          isOrderAsk: true,\\r\\n          signer: seller,\\r\\n          collection: collection,\\r\\n          price: listPrice,\\r\\n          tokenId: tokenId,\\r\\n          amount: 1, // we only support ERC721 for now\\r\\n          strategy: STRATEGY_STANDARD_SALE,\\r\\n          currency: paymentToken,\\r\\n          nonce: nonce,\\r\\n          startTime: block.timestamp,\\r\\n          endTime: expiration,\\r\\n          minPercentageToAsk: 10_000 - feesFraction,\\r\\n          params: \\\"\\\",\\r\\n\\r\\n          v: 0,\\r\\n          r: 0,\\r\\n          s: 0\\r\\n        });\\r\\n        finalOrderHash = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hash(order));\\r\\n    }\\r\\n\\r\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\r\\n    bytes32 internal constant MAKER_ORDER_HASH =\\r\\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\r\\n\\r\\n    struct MakerOrder {\\r\\n        bool isOrderAsk; // true --> ask / false --> bid\\r\\n        address signer; // signer of the maker order\\r\\n        address collection; // collection address\\r\\n        uint256 price; // price (used as )\\r\\n        uint256 tokenId; // id of the token\\r\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\r\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\r\\n        address currency; // currency (e.g., WETH)\\r\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\r\\n        uint256 startTime; // startTime in timestamp\\r\\n        uint256 endTime; // endTime in timestamp\\r\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\r\\n        bytes params; // additional parameters\\r\\n        uint8 v; // v: parameter (27 or 28)\\r\\n        bytes32 r; // r: parameter\\r\\n        bytes32 s; // s: parameter\\r\\n    }\\r\\n\\r\\n    function hash(MakerOrder memory makerOrder)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    MAKER_ORDER_HASH,\\r\\n                    makerOrder.isOrderAsk,\\r\\n                    makerOrder.signer,\\r\\n                    makerOrder.collection,\\r\\n                    makerOrder.price,\\r\\n                    makerOrder.tokenId,\\r\\n                    makerOrder.amount,\\r\\n                    makerOrder.strategy,\\r\\n                    makerOrder.currency,\\r\\n                    makerOrder.nonce,\\r\\n                    makerOrder.startTime,\\r\\n                    makerOrder.endTime,\\r\\n                    makerOrder.minPercentageToAsk,\\r\\n                    keccak256(makerOrder.params)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeeac9debcae648071c7bbe198ba9b230cd40d4ac7b177d3687f4061496fe0d6a\",\"license\":\"MIT\"},\"contracts/libraries/externalmarketplaces/OpenSeaUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface OpenSea {\\r\\n    // mapping(address => uint256) public nonces;\\r\\n    function nonces(address user) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface OpenSeaOwnableDelegateProxy {}\\r\\n\\r\\ninterface OpenSeaProxyRegistry {\\r\\n    // mapping(address => OpenSeaOwnableDelegateProxy) public proxies;\\r\\n    function proxies(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (OpenSeaOwnableDelegateProxy);\\r\\n\\r\\n    function registerProxy() external returns (OpenSeaOwnableDelegateProxy);\\r\\n}\\r\\n\\r\\nlibrary OpenSeaUtil {\\r\\n    // mainnet\\r\\n    // OpenSea public constant openSea =\\r\\n    //     OpenSea(0x7f268357A8c2552623316e2562D90e642bB538E5);\\r\\n    // address public constant WyvernTokenTransferProxy = 0xe5c783ee536cf5e63e792988335c4255169be4e1;\\r\\n    // bytes32 internal constant OPENSEA_DOMAIN_SEPARATOR =\\r\\n    //     0x72982d92449bfb3d338412ce4738761aff47fb975ceb17a1bc3712ec716a5a68;\\r\\n    // bytes32 internal constant _OPENSEA_ORDER_TYPEHASH =\\r\\n    //     0xdba08a88a748f356e8faf8578488343eab21b1741728779c9dcfdc782bc800f8;\\r\\n    // address internal constant openSeaFeeRecipient =\\r\\n    //     0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\\r\\n    // address internal constant openSeaMerkleValidator =\\r\\n    //     0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7;\\r\\n    // address public constant WyvernProxyRegistry =\\r\\n    // 0xa5409ec958c83c3f309868babaca7c86dcb077c1;\\r\\n\\r\\n    // rinkeby\\r\\n    OpenSea public constant openSea =\\r\\n        OpenSea(0xdD54D660178B28f6033a953b0E55073cFA7e3744);\\r\\n    OpenSeaProxyRegistry public constant wyvernProxyRegistry =\\r\\n        OpenSeaProxyRegistry(0x1E525EEAF261cA41b809884CBDE9DD9E1619573A);\\r\\n    address public constant WyvernTokenTransferProxy =\\r\\n        0xCdC9188485316BF6FA416d02B4F680227c50b89e;\\r\\n    bytes32 internal constant OPENSEA_DOMAIN_SEPARATOR =\\r\\n        0xd38471a54d114ee69fbb07d1769a0bbecd4f429ddf5932c7098093908e24bd9d;\\r\\n    bytes32 internal constant _OPENSEA_ORDER_TYPEHASH =\\r\\n        0xdba08a88a748f356e8faf8578488343eab21b1741728779c9dcfdc782bc800f8;\\r\\n    address internal constant openSeaFeeRecipient =\\r\\n        0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\\r\\n    address internal constant openSeaMerkleValidator =\\r\\n        0x45B594792a5CDc008D0dE1C1d69FAA3D16B3DDc1;\\r\\n\\r\\n    enum FeeMethod {\\r\\n        ProtocolFee,\\r\\n        SplitFee\\r\\n    }\\r\\n\\r\\n    /* An order on the exchange. */\\r\\n    struct OpenSeaOrder {\\r\\n        /* Exchange address, intended as a versioning mechanism. */\\r\\n        address exchange;\\r\\n        /* Order maker address. */\\r\\n        address maker;\\r\\n        /* Order taker address, if specified. */\\r\\n        address taker;\\r\\n        /* Maker relayer fee of the order, unused for taker order. */\\r\\n        uint makerRelayerFee;\\r\\n        /* Taker relayer fee of the order, or maximum taker fee for a taker order. */\\r\\n        uint takerRelayerFee;\\r\\n        /* Maker protocol fee of the order, unused for taker order. */\\r\\n        uint makerProtocolFee;\\r\\n        /* Taker protocol fee of the order, or maximum taker fee for a taker order. */\\r\\n        uint takerProtocolFee;\\r\\n        /* Order fee recipient or zero address for taker order. */\\r\\n        address feeRecipient;\\r\\n        /* Fee method (protocol token or split fee). */\\r\\n        FeeMethod feeMethod;\\r\\n        /* Side (buy/sell). */\\r\\n        SaleKindInterface.Side side;\\r\\n        /* Kind of sale. */\\r\\n        SaleKindInterface.SaleKind saleKind;\\r\\n        /* Target. */\\r\\n        address target;\\r\\n        /* HowToCall. */\\r\\n        AuthenticatedProxy.HowToCall howToCall;\\r\\n        /* Calldata. */\\r\\n        bytes calldata2; // changed 'calldata' name because of compilation error\\r\\n        /* Calldata replacement pattern, or an empty byte array for no replacement. */\\r\\n        bytes replacementPattern;\\r\\n        /* Static call target, zero-address for no static call. */\\r\\n        address staticTarget;\\r\\n        /* Static call extra data. */\\r\\n        bytes staticExtradata;\\r\\n        /* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */\\r\\n        address paymentToken;\\r\\n        /* Base price of the order (in paymentTokens). */\\r\\n        uint basePrice;\\r\\n        /* Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. */\\r\\n        uint extra;\\r\\n        /* Listing timestamp. */\\r\\n        uint listingTime;\\r\\n        /* Expiration timestamp - 0 for no expiry. */\\r\\n        uint expirationTime;\\r\\n        /* Order salt, used to prevent duplicate hashes. */\\r\\n        uint salt;\\r\\n        /* NOTE: uint nonce is an additional component of the order but is read from storage */\\r\\n    }\\r\\n\\r\\n    function hashOpenSeaOrder(OpenSeaOrder memory order, uint nonce)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 hash)\\r\\n    {\\r\\n        /* Unfortunately abi.encodePacked doesn't work here, stack size constraints. */\\r\\n        uint size = 800;\\r\\n        bytes memory array = new bytes(size);\\r\\n        uint index;\\r\\n        assembly {\\r\\n            index := add(array, 0x20)\\r\\n        }\\r\\n        index = ArrayUtils.unsafeWriteBytes32(index, _OPENSEA_ORDER_TYPEHASH);\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.exchange);\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.maker);\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.taker);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.makerRelayerFee);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.takerRelayerFee);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.makerProtocolFee);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.takerProtocolFee);\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.feeRecipient);\\r\\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.feeMethod));\\r\\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.side));\\r\\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.saleKind));\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.target);\\r\\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.howToCall));\\r\\n        index = ArrayUtils.unsafeWriteBytes32(\\r\\n            index,\\r\\n            keccak256(order.calldata2)\\r\\n        );\\r\\n        index = ArrayUtils.unsafeWriteBytes32(\\r\\n            index,\\r\\n            keccak256(order.replacementPattern)\\r\\n        );\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.staticTarget);\\r\\n        index = ArrayUtils.unsafeWriteBytes32(\\r\\n            index,\\r\\n            keccak256(order.staticExtradata)\\r\\n        );\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.paymentToken);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.basePrice);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.extra);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.listingTime);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.expirationTime);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.salt);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, nonce);\\r\\n        assembly {\\r\\n            hash := keccak256(add(array, 0x20), size)\\r\\n        }\\r\\n        return hash;\\r\\n    }\\r\\n\\r\\n    function getOpenSeaAskOrderHash(OpenSeaOrder memory order)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            bytes32 finalOrderHash,\\r\\n            bytes32 openSeaParamsOrderWithNonceHash\\r\\n        )\\r\\n    {\\r\\n        openSeaParamsOrderWithNonceHash = hashOpenSeaOrder(\\r\\n            order,\\r\\n            openSea.nonces(order.maker)\\r\\n        );\\r\\n        finalOrderHash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                OPENSEA_DOMAIN_SEPARATOR,\\r\\n                openSeaParamsOrderWithNonceHash\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function initializationAndPermissions(\\r\\n        address user, \\r\\n        address erc721address, \\r\\n        address WETH\\r\\n    ) public {\\r\\n        // OpenSea initialization and permissions\\r\\n\\r\\n        // Approving OpenSea to move the item (if not approved already) and WETH (yes, OpenSea requires this for the way it works)\\r\\n        // initialize opensea proxy (check opensea-js)\\r\\n        OpenSeaOwnableDelegateProxy myProxy = OpenSeaUtil\\r\\n            .wyvernProxyRegistry\\r\\n            .proxies(user);\\r\\n\\r\\n        if (address(myProxy) == address(0)) {\\r\\n            myProxy = OpenSeaUtil.wyvernProxyRegistry.registerProxy();\\r\\n        }\\r\\n\\r\\n        IERC721 erc721 = IERC721(erc721address);\\r\\n        if (!erc721.isApprovedForAll(user, address(myProxy))) {\\r\\n            erc721.setApprovalForAll(address(myProxy), true);\\r\\n        }\\r\\n\\r\\n        IERC20 erc20 = IERC20(WETH);\\r\\n        if (\\r\\n            erc20.allowance(\\r\\n                user,\\r\\n                OpenSeaUtil.WyvernTokenTransferProxy\\r\\n            ) < type(uint256).max\\r\\n        ) {\\r\\n            erc20.approve(\\r\\n                OpenSeaUtil.WyvernTokenTransferProxy,\\r\\n                type(uint256).max\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buildAndGetOpenSeaOrderHash(\\r\\n        address seller,\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        uint256 listPrice, // to be paid by buyer, the amount the seller receives is affected by feesFraction\\r\\n        uint256 expiration,\\r\\n        uint256 feesFraction, // (royalties + protocol fee fraction) out of 10_000\\r\\n        address paymentToken\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            bytes32 finalOrderHash,\\r\\n            bytes32 paramsOrderHash,\\r\\n            OpenSeaOrder memory order\\r\\n        )\\r\\n    {\\r\\n        order = OpenSeaUtil.OpenSeaOrder({\\r\\n            exchange: address(openSea),\\r\\n            maker: seller,\\r\\n            taker: address(0),\\r\\n            makerRelayerFee: feesFraction,\\r\\n            takerRelayerFee: 0,\\r\\n            makerProtocolFee: 0,\\r\\n            takerProtocolFee: 0,\\r\\n            feeMethod: FeeMethod.SplitFee,\\r\\n            feeRecipient: openSeaFeeRecipient,\\r\\n            side: SaleKindInterface.Side.Sell,\\r\\n            saleKind: SaleKindInterface.SaleKind.FixedPrice,\\r\\n            target: openSeaMerkleValidator,\\r\\n            howToCall: AuthenticatedProxy.HowToCall.DelegateCall,\\r\\n            staticTarget: address(0),\\r\\n            staticExtradata: \\\"\\\",\\r\\n            paymentToken: paymentToken,\\r\\n            basePrice: listPrice,\\r\\n            extra: 0,\\r\\n            calldata2: bytes.concat(\\r\\n                hex\\\"fb16a595000000000000000000000000\\\",\\r\\n                abi.encodePacked(seller),\\r\\n                hex\\\"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\r\\n                abi.encodePacked(collection),\\r\\n                abi.encodePacked(tokenId),\\r\\n                hex\\\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\n            ),\\r\\n            replacementPattern: hex\\\"000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\r\\n            listingTime: block.timestamp,\\r\\n            expirationTime: expiration,\\r\\n            salt: block.timestamp\\r\\n        });\\r\\n        (finalOrderHash, paramsOrderHash) = getOpenSeaAskOrderHash(order);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary ArrayUtils {\\r\\n    function guardedArrayReplace(\\r\\n        bytes memory array,\\r\\n        bytes memory desired,\\r\\n        bytes memory mask\\r\\n    ) internal pure {\\r\\n        require(array.length == desired.length);\\r\\n        require(array.length == mask.length);\\r\\n\\r\\n        uint words = array.length / 0x20;\\r\\n        uint index = words * 0x20;\\r\\n        assert(index / 0x20 == words);\\r\\n        uint i;\\r\\n\\r\\n        for (i = 0; i < words; i++) {\\r\\n            /* Conceptually: array[i] = (!mask[i] && array[i]) || (mask[i] && desired[i]), bitwise in word chunks. */\\r\\n            assembly {\\r\\n                let commonIndex := mul(0x20, add(1, i))\\r\\n                let maskValue := mload(add(mask, commonIndex))\\r\\n                mstore(\\r\\n                    add(array, commonIndex),\\r\\n                    or(\\r\\n                        and(not(maskValue), mload(add(array, commonIndex))),\\r\\n                        and(maskValue, mload(add(desired, commonIndex)))\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /* Deal with the last section of the byte array. */\\r\\n        if (words > 0) {\\r\\n            /* This overlaps with bytes already set but is still more efficient than iterating through each of the remaining bytes individually. */\\r\\n            i = words;\\r\\n            assembly {\\r\\n                let commonIndex := mul(0x20, add(1, i))\\r\\n                let maskValue := mload(add(mask, commonIndex))\\r\\n                mstore(\\r\\n                    add(array, commonIndex),\\r\\n                    or(\\r\\n                        and(not(maskValue), mload(add(array, commonIndex))),\\r\\n                        and(maskValue, mload(add(desired, commonIndex)))\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            /* If the byte array is shorter than a word, we must unfortunately do the whole thing bytewise.\\r\\n               (bounds checks could still probably be optimized away in assembly, but this is a rare case) */\\r\\n            for (i = index; i < array.length; i++) {\\r\\n                array[i] =\\r\\n                    ((mask[i] ^ 0xff) & array[i]) |\\r\\n                    (mask[i] & desired[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Test if two arrays are equal\\r\\n     * @param a First array\\r\\n     * @param b Second array\\r\\n     * @return Whether or not all bytes in the arrays are equal\\r\\n     */\\r\\n    function arrayEq(bytes memory a, bytes memory b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return keccak256(a) == keccak256(b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write byte array into a memory location\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source Byte array to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteBytes(uint index, bytes memory source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        if (source.length > 0) {\\r\\n            assembly {\\r\\n                let length := mload(source)\\r\\n                let end := add(source, add(0x20, length))\\r\\n                let arrIndex := add(source, 0x20)\\r\\n                let tempIndex := index\\r\\n                for {\\r\\n\\r\\n                } eq(lt(arrIndex, end), 1) {\\r\\n                    arrIndex := add(arrIndex, 0x20)\\r\\n                    tempIndex := add(tempIndex, 0x20)\\r\\n                } {\\r\\n                    mstore(tempIndex, mload(arrIndex))\\r\\n                }\\r\\n                index := add(index, length)\\r\\n            }\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write address into a memory location\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source Address to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteAddress(uint index, address source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint conv = uint(uint160(source)) << 0x60;\\r\\n        assembly {\\r\\n            mstore(index, conv)\\r\\n            index := add(index, 0x14)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write address into a memory location using entire word\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteAddressWord(uint index, address source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(index, source)\\r\\n            index := add(index, 0x20)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write uint into a memory location\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteUint(uint index, uint source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(index, source)\\r\\n            index := add(index, 0x20)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write uint8 into a memory location\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint8 to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteUint8(uint index, uint8 source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore8(index, source)\\r\\n            index := add(index, 0x1)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write uint8 into a memory location using entire word\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteUint8Word(uint index, uint8 source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(index, source)\\r\\n            index := add(index, 0x20)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write bytes32 into a memory location using entire word\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteBytes32(uint index, bytes32 source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(index, source)\\r\\n            index := add(index, 0x20)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n}\\r\\n\\r\\n//// starts more OPENSEA stuff\\r\\n\\r\\nlibrary SaleKindInterface {\\r\\n    /**\\r\\n     * Side: buy or sell.\\r\\n     */\\r\\n    enum Side {\\r\\n        Buy,\\r\\n        Sell\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Currently supported kinds of sale: fixed price, Dutch auction.\\r\\n     * English auctions cannot be supported without stronger escrow guarantees.\\r\\n     * Future interesting options: Vickrey auction, nonlinear Dutch auctions.\\r\\n     */\\r\\n    enum SaleKind {\\r\\n        FixedPrice,\\r\\n        DutchAuction\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary AuthenticatedProxy {\\r\\n    enum HowToCall {\\r\\n        Call,\\r\\n        DelegateCall\\r\\n    }\\r\\n}\\r\\n\\r\\n//// ends OPENSEA stuff\\r\\n\",\"keccak256\":\"0xca8fefb6b368cf95c06eec8e991d42c5ffd99f96b258d573aae4af6de06911ae\",\"license\":\"MIT\"},\"contracts/libraries/passiveorders/BuyOrderV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {SignatureUtil} from \\\"./../SignatureUtil.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {Execution} from \\\"./../execution/Execution.sol\\\";\\r\\n\\r\\nusing BuyOrderV1Functions for BuyOrderV1 global;\\r\\n\\r\\n// DO NOT CHANGE the struct, create a new order file instead.\\r\\n// If chaging the struct is extremely necessary, don't forget to \\r\\n// update the hash constant and hash function below.\\r\\nstruct BuyOrderV1 {\\r\\n    \\r\\n    address signer; // order signer\\r\\n\\r\\n    // general order parameters\\r\\n    address collection; // collection address\\r\\n    uint256 executionId; // buy order execution id\\r\\n    uint256 contribution; // WETH contribution\\r\\n\\r\\n    // buy order parameters\\r\\n    uint256 buyPrice; // buy WETH price\\r\\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\\r\\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\\r\\n\\r\\n    // sell order parameters\\r\\n    uint256 sellPrice; // sell WETH price \\r\\n    uint256 sellPriceEndTime; // sell order expiration time (set 0 for omitting)\\r\\n    uint256 sellNonce;\\r\\n\\r\\n    // signature parameters\\r\\n    uint8 v;\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title PassiveTradeOrders\\r\\n * @notice\\r\\n */\\r\\nlibrary BuyOrderV1Functions {\\r\\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f;\\r\\n\\r\\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    PASSIVE_BUY_ORDER_HASH,\\r\\n                    passiveOrder.signer,\\r\\n                    passiveOrder.collection,\\r\\n                    passiveOrder.executionId,\\r\\n                    passiveOrder.contribution,\\r\\n                    passiveOrder.buyPrice,\\r\\n                    passiveOrder.buyPriceEndTime,\\r\\n                    passiveOrder.buyNonce,\\r\\n                    passiveOrder.sellPrice,\\r\\n                    passiveOrder.sellPriceEndTime,\\r\\n                    passiveOrder.sellNonce\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\r\\n        return passiveOrder.buyPrice >= price;\\r\\n    }\\r\\n    \\r\\n    function canAcceptSellPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\r\\n        return passiveOrder.sellPrice <= price;\\r\\n    }\\r\\n\\r\\n    \\r\\n    // Validate signatures (includes interaction with\\r\\n    // other contracts)\\r\\n    // Remember that we give away execution flow\\r\\n    // in case the signer is a contract (isValidSignature)\\r\\n    function validateSignatures(\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        bytes32 domainSeparator\\r\\n    ) public view {\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            BuyOrderV1 calldata order = orders[i];\\r\\n            // Validate order signature\\r\\n            bytes32 orderHash = hash(order);\\r\\n            require(\\r\\n                SignatureUtil.verify(\\r\\n                    orderHash,\\r\\n                    order.signer,\\r\\n                    order.v,\\r\\n                    order.r,\\r\\n                    order.s,\\r\\n                    domainSeparator\\r\\n                ),\\r\\n                \\\"Signature: Invalid\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function validateSellOrdersParameters(\\r\\n        mapping(address => mapping(uint256 => bool)) storage _isUsedSellNonce,\\r\\n        mapping(address => mapping(uint256 => uint256)) storage _realContributions,\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        uint256 executionId,\\r\\n        Execution storage execution,\\r\\n        uint256 price,\\r\\n        uint256 minConsensusForSellingOverOrEqualBuyPrice,\\r\\n        uint256 minConsensusForSellingUnderBuyPrice\\r\\n    ) public view returns (uint256) {\\r\\n        // mapping(address => mapping(uint256 => bool))\\r\\n        //     storage _isUsedSellNonce = isUsedSellNonce;\\r\\n        // mapping(address => mapping(uint256 => uint256))\\r\\n        //     storage _realContributions = realContributions;\\r\\n        // Execution storage execution = executions[executionId];\\r\\n\\r\\n        uint256 minExpirationTime = type(uint256).max;\\r\\n        uint256 realContributionOnBoard = 0;\\r\\n        // Validate orders parameters, no need to access state\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            BuyOrderV1 calldata order = orders[i];\\r\\n\\r\\n            // Validate the order is not expired\\r\\n            require(order.sellPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\r\\n            // Validate collection\\r\\n            require(\\r\\n                order.collection == execution.collection,\\r\\n                \\\"Order collection mismatch\\\"\\r\\n            );\\r\\n            // Validate executionId\\r\\n            require(\\r\\n                order.executionId == executionId,\\r\\n                \\\"Order executionId mismatch\\\"\\r\\n            );\\r\\n            // Validating that the signer has not voted yet\\r\\n            for (uint256 j = 0; j < i; j++) {\\r\\n                if (orders[j].signer == order.signer) {\\r\\n                    require(false, \\\"Signer already voted\\\");\\r\\n                }\\r\\n            }\\r\\n            // Validating price acceptance\\r\\n            require(\\r\\n                canAcceptSellPrice(order, price),\\r\\n                \\\"Order can't accept price\\\"\\r\\n            );\\r\\n            // updating the min expiration time\\r\\n            minExpirationTime = Math.min(\\r\\n                minExpirationTime,\\r\\n                order.sellPriceEndTime\\r\\n            );\\r\\n\\r\\n            /* State required for tne following lines */\\r\\n\\r\\n            // Validate order nonce usability\\r\\n            require(\\r\\n                !_isUsedSellNonce[order.signer][order.sellNonce],\\r\\n                \\\"Order nonce is unusable\\\"\\r\\n            );\\r\\n            // counting the \\\"votes\\\" in favor of this price\\r\\n            realContributionOnBoard += _realContributions[order.signer][\\r\\n                executionId\\r\\n            ];\\r\\n        } // ends the voters for loop\\r\\n\\r\\n        // Validating price consensus\\r\\n        if (price >= execution.buyPrice) {\\r\\n            // we need at least N out of 10_000 consensus\\r\\n            require(\\r\\n                realContributionOnBoard * 10_000 >=\\r\\n                    execution.buyPrice *\\r\\n                        minConsensusForSellingOverOrEqualBuyPrice,\\r\\n                \\\"Selling over or equal buyPrice: consensus not reached\\\"\\r\\n            );\\r\\n        } else {\\r\\n            // we need a different consensus ratio\\r\\n            require(\\r\\n                realContributionOnBoard * 10_000 >=\\r\\n                    execution.buyPrice * minConsensusForSellingUnderBuyPrice,\\r\\n                \\\"Selling under buyPrice: consensus not reached\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return minExpirationTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45dea27e7ce72fe5c6949215972e4f298de769f90bd839bf3933528eb1d111dd\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c0604052606460025560646003556113886004556127106005553480156200002757600080fd5b5060405162003fe438038062003fe48339810160408190526200004a91620001ae565b620000553362000141565b600160068190556001600160a01b03928316608090815281546001600160a01b031916929093169190911790556040805180820182526003815262302e3160e81b60209182015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fc34e769714204ec364edbdd9fbc375bf7fd2e3b10f22abaf631ea6006a288fa7818401527f8cd160c72d102a6747abd189ac21d4a1f802e3fcc1bb8fc78cc4d558df0c7c21606082015246938101939093523060a08085019190915282518085038201815260c090940190925282519201919091209052620001e6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001a957600080fd5b919050565b60008060408385031215620001c257600080fd5b620001cd8362000191565b9150620001dd6020840162000191565b90509250929050565b60805160a051613da0620002446000396000818161045f01528181610a2301528181610e78015281816114010152611b5e0152600081816103fd01528181610aa001528181610bc801528181610fee01526120f80152613da06000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80636dd7a34e1161011a578063c18d89d3116100ad578063e80453841161007c578063e8045384146104a7578063f23a6e61146104d5578063f2fde38b146104f4578063f6f6712514610507578063f76c92291461051a57600080fd5b8063c18d89d314610451578063dab400f31461045a578063dce6b1f914610481578063e711bf1b1461049457600080fd5b8063ac8d590b116100e9578063ac8d590b146103e5578063ad5c4648146103f8578063bc197c811461041f578063bc7517241461043e57600080fd5b80636dd7a34e146103a6578063715018a6146103b95780638da5cb5b146103c15780639f9abd35146103d257600080fd5b8063323d01e5116101925780634bbe7882116101615780634bbe7882146103495780634c8a65761461035c5780635a2aa9d71461038a5780636c1438ca1461039d57600080fd5b8063323d01e5146102d7578063360f4d871461030257806339a51be5146103155780633a0298eb1461034057600080fd5b806318ecca46116101ce57806318ecca46146102875780631a7eeff21461029a5780632eb69403146102ad5780632ec16145146102c057600080fd5b806301ffc9a7146102005780630570490d14610228578063150b7a021461023d5780631626ba7e14610274575b600080fd5b61021361020e366004612b10565b6105cf565b60405190151581526020015b60405180910390f35b61023b610236366004612b71565b610606565b005b61025b61024b366004612d09565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161021f565b61025b610282366004612d74565b61069f565b61023b610295366004612def565b61076e565b61023b6102a8366004612e08565b61079d565b61023b6102bb366004612ea3565b61086a565b6102c960055481565b60405190815260200161021f565b6102c96102e5366004612ef3565b600960209081526000928352604080842090915290825290205481565b61023b610310366004612f1f565b610cbf565b600154610328906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b6102c960025481565b61023b610357366004612f78565b6110ae565b61021361036a366004612ef3565b600860209081526000928352604080842090915290825290205460ff1681565b61023b610398366004612b71565b6110fa565b6102c960035481565b61023b6103b4366004612def565b611185565b61023b6111b4565b6000546001600160a01b0316610328565b61023b6103e0366004612f95565b6111ea565b61023b6103f3366004612fe0565b6114a6565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b61025b61042d366004613084565b63bc197c8160e01b95945050505050565b61023b61044c366004612def565b611667565b6102c960045481565b6102c97f000000000000000000000000000000000000000000000000000000000000000081565b61023b61048f366004612def565b611696565b61023b6104a2366004612b71565b6116c5565b6102136104b5366004612ef3565b600760209081526000928352604080842090915290825290205460ff1681565b61025b6104e3366004613131565b63f23a6e6160e01b95945050505050565b61023b610502366004612f78565b611750565b61023b610515366004612ea3565b6117eb565b610581610528366004612def565b600a602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b03909716979596949560ff909416949293919290919089565b604080516001600160a01b03909a168a5260208a0198909852968801959095529215156060870152608086019190915260a085015260c084015260e08301526101008201526101200161021f565b60006001600160e01b03198216630271189760e51b148061060057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106108282611f1d565b6000805b8281101561068157600084848381811061063057610630613199565b9050602002013590506000600a6000838152602001908152602001600020905080600601548461066091906131c5565b93506000816006018190555050508080610679906131dd565b915050610614565b5060015461069a9030906001600160a01b0316836120f3565b505050565b60008381036106c95760405162461bcd60e51b81526004016106c0906131f6565b60405180910390fd5b60006106d86020828587613222565b6106e19161324c565b905060006106f3604060208688613222565b6106fc9161324c565b90508015801561071c57506000828152600a602052604090206007015486145b80610742575080600114801561074257506000828152600a602052604090206008015486145b156107595750630b135d3f60e11b91506107679050565b506001600160e01b03199150505b9392505050565b6000546001600160a01b031633146107985760405162461bcd60e51b81526004016106c09061326a565b600455565b6107a78383611f1d565b6000805b838110156108585760008585838181106107c7576107c7613199565b602090810292909201356000818152600a8452604080822033835260098652818320848452909552812054600485015460018601549396509093509161080d838561329f565b61081791906132be565b336000908152600960209081526040808320898452909152812055905061083e81886131c5565b965050505050508080610850906131dd565b9150506107ab565b506108643083836120f3565b50505050565b60026006540361088c5760405162461bcd60e51b81526004016106c0906132e0565b6002600655826108ae5760405162461bcd60e51b81526004016106c090613317565b6000612710836003546108c1919061329f565b6108cb91906132be565b905060006108d98285613366565b90506000868660008181106108f0576108f0613199565b6101a002919091016040908101356000818152600a60205291909120805491935091506001600160a01b03166109385760405162461bcd60e51b81526004016106c09061337d565b600381015460ff161561095d5760405162461bcd60e51b81526004016106c0906133b4565b60007379E24B4766011FB3461e1C2bf9f82D7a687361e563b95522d5600860098c8c88888b6004546005546040518a63ffffffff1660e01b81526004016109ac999897969594939291906134e3565b602060405180830381865af41580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190613531565b60405163345a3d9f60e11b81529091507379E24B4766011FB3461e1C2bf9f82D7a687361e5906368b47b3e90610a4b908c908c907f00000000000000000000000000000000000000000000000000000000000000009060040161354a565b60006040518083038186803b158015610a6357600080fd5b505af4158015610a77573d6000803e3d6000fd5b5050835460405163f06a206d60e01b81523060048201526001600160a01b0391821660248201527f00000000000000000000000000000000000000000000000000000000000000009091166044820152736d50Eb6A27b3FdD297A8EDAdFDe7D5025D9F2b4B925063f06a206d915060640160006040518083038186803b158015610b0057600080fd5b505af4158015610b14573d6000803e3d6000fd5b505083546002850154600093508392508291736d50Eb6A27b3FdD297A8EDAdFDe7D5025D9F2b4B9163d7a2b5689130916001600160a01b0390911690610b5c8e612710613366565b8f612710610b6a919061329f565b610b7491906132be565b610b7f9060016131c5565b60405160e086901b6001600160e01b03191681526001600160a01b0394851660048201529284166024840152604483019190915260648201526084810188905260a481018d90527f000000000000000000000000000000000000000000000000000000000000000090911660c482015260e401600060405180830381865af4158015610c0f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3791908101906135f9565b925092509250826000801b03610c5f5760405162461bcd60e51b81526004016106c0906131f6565b610c6b8488888b61211f565b600785018390556040517fd66e0d7ab0776700af7567767b69a1c8f3ebd0efb3632e3055f89fb2b9d2e6b590610ca49083908590613855565b60405180910390a15050600160065550505050505050505050565b600260065403610ce15760405162461bcd60e51b81526004016106c0906132e0565b600260065583610d035760405162461bcd60e51b81526004016106c090613317565b600061271084600354610d16919061329f565b610d2091906132be565b90506000610d2e8286613366565b9050600087876000818110610d4557610d45613199565b6101a002919091016040908101356000818152600a60205291909120805491935091506001600160a01b0316610d8d5760405162461bcd60e51b81526004016106c09061337d565b600381015460ff1615610db25760405162461bcd60e51b81526004016106c0906133b4565b60007379E24B4766011FB3461e1C2bf9f82D7a687361e563b95522d5600860098d8d88888b6004546005546040518a63ffffffff1660e01b8152600401610e01999897969594939291906134e3565b602060405180830381865af4158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190613531565b60405163345a3d9f60e11b81529091507379E24B4766011FB3461e1C2bf9f82D7a687361e5906368b47b3e90610ea0908d908d907f00000000000000000000000000000000000000000000000000000000000000009060040161354a565b60006040518083038186803b158015610eb857600080fd5b505af4158015610ecc573d6000803e3d6000fd5b50508354604051633a4691bf60e11b81523060048201526001600160a01b03909116602482015273020f20a352BcA41A9334a512c3EeAd28860814D8925063748d237e915060440160006040518083038186803b158015610f2c57600080fd5b505af4158015610f40573d6000803e3d6000fd5b5050835460028501546000935073020f20a352BcA41A9334a512c3EeAd28860814D89250631221a1ca9130916001600160a01b0390911690610f848d612710613366565b610f908f61271061329f565b610f9a91906132be565b610fa59060016131c5565b60405160e086901b6001600160e01b03191681526001600160a01b0394851660048201529284166024840152604483019190915260648201526084810186905260a481018c90527f000000000000000000000000000000000000000000000000000000000000000090911660c482015260e481018a905261010401600060405180830381865af415801561103d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110659190810190613a65565b50905060008190036110895760405162461bcd60e51b81526004016106c0906131f6565b6110958286868961211f565b6008909201919091555050600160065550505050505050565b6000546001600160a01b031633146110d85760405162461bcd60e51b81526004016106c09061326a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b806111175760405162461bcd60e51b81526004016106c090613bad565b60005b8181101561069a5733600090815260086020526040812060019185858581811061114657611146613199565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061117d906131dd565b91505061111a565b6000546001600160a01b031633146111af5760405162461bcd60e51b81526004016106c09061326a565b600355565b6000546001600160a01b031633146111de5760405162461bcd60e51b81526004016106c09061326a565b6111e86000612171565b565b60026006540361120c5760405162461bcd60e51b81526004016106c0906132e0565b6002600655816112705760405162461bcd60e51b815260206004820152602960248201527f4578656375746553656c6c3a204d7573742068617665206174206c656173742060448201526837b7329037b93232b960b91b60648201526084016106c0565b600061271082600354611283919061329f565b61128d91906132be565b9050600061129b8284613366565b90506000858560008181106112b2576112b2613199565b6101a002919091016040908101356000818152600a60205291909120805491935091506001600160a01b03166112fa5760405162461bcd60e51b81526004016106c09061337d565b600381015460ff161561131f5760405162461bcd60e51b81526004016106c0906133b4565b6004805460055460405163b95522d560e01b81527379E24B4766011FB3461e1C2bf9f82D7a687361e59363b95522d59361136b936008936009938f938f938c938c938f939291016134e3565b602060405180830381865af4158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190613531565b506113b787876121c1565b60038101805460ff19166001179055600480820184905560405163345a3d9f60e11b81527379E24B4766011FB3461e1C2bf9f82D7a687361e5916368b47b3e91611427918b918b917f0000000000000000000000000000000000000000000000000000000000000000910161354a565b60006040518083038186803b15801561143f57600080fd5b505af4158015611453573d6000803e3d6000fd5b505050506114623330856120f3565b60015461147a9033906001600160a01b0316866120f3565b80546002820154611498916001600160a01b0316903090339061224e565b505060016006555050505050565b6002600654036114c85760405162461bcd60e51b81526004016106c0906132e0565b60026006556000828152600a6020526040902080546001600160a01b031661153c5760405162461bcd60e51b815260206004820152602160248201527f436c61696d4e66743a20457865637574696f6e20646f65736e277420657869736044820152601d60fa1b60648201526084016106c0565b600381015460ff16156115915760405162461bcd60e51b815260206004820181905260248201527f436c61696d4e66743a20457865637574696f6e20616c726561647920736f6c6460448201526064016106c0565b6000838152600a60209081526040808320600301805460ff1916600190811790915533845260098352818420878552909252909120549082015481146116235760405162461bcd60e51b815260206004820152602160248201527f436c61696d4e66743a2077726f6e67207265616c20636f6e747269627574696f6044820152603760f91b60648201526084016106c0565b3360009081526009602090815260408083208784529091528120558154600283015461165c916001600160a01b0316903090869061224e565b505060016006555050565b6000546001600160a01b031633146116915760405162461bcd60e51b81526004016106c09061326a565b600255565b6000546001600160a01b031633146116c05760405162461bcd60e51b81526004016106c09061326a565b600555565b806116e25760405162461bcd60e51b81526004016106c090613bad565b60005b8181101561069a5733600090815260076020526040812060019185858581811061171157611711613199565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611748906131dd565b9150506116e5565b6000546001600160a01b0316331461177a5760405162461bcd60e51b81526004016106c09061326a565b6001600160a01b0381166117df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c0565b6117e881612171565b50565b60026006540361180d5760405162461bcd60e51b81526004016106c0906132e0565b60026006558261186d5760405162461bcd60e51b815260206004820152602560248201527f457865637574653a204d7573742068617665206174206c65617374206f6e652060448201526437b93232b960d91b60648201526084016106c0565b600061271083600254611880919061329f565b61188a91906132be565b9050600061189882856131c5565b90506000868660008181106118af576118af613199565b90506101a0020160200160208101906118c89190612f78565b90506000878760008181106118df576118df613199565b60406101a0909102929092018201356000818152600a6020529290922054919250506001600160a01b0316156119575760405162461bcd60e51b815260206004820152601c60248201527f457865637574653a20496420616c72656164792065786563757465640000000060448201526064016106c0565b60408051610120810182526001600160a01b03848116825260208083018781528385018a81526000606086018181526080870182815260a0880183815260c0890184815260e08a018581526101008b018681528d8752600a9099529a852099518a546001600160a01b031916991698909817895594516001890155925160028801555160038701805460ff191691151591909117905590516004860155905160058501559151600684015592516007830155915160089091015580805b89811015611e4157368b8b83818110611a2f57611a2f613199565b6101a002919091019150600790506000611a4c6020840184612f78565b6001600160a01b031681526020808201929092526040908101600090812060c0850135825290925290205460ff1615611ac75760405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c6500000000000000000060448201526064016106c0565b600160076000611ada6020850185612f78565b6001600160a01b031681526020808201929092526040908101600090812060c086013582529092528120805460ff191692151592909217909155611b2b611b2636849003840184613bf4565b612384565b9050611b8281611b3e6020850185612f78565b611b5061016086016101408701613cb0565b8561016001358661018001357f0000000000000000000000000000000000000000000000000000000000000000612465565b611bc35760405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b60448201526064016106c0565b428260a001351015611c075760405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b60448201526064016106c0565b611c2388611c1a36859003850185613bf4565b60800151101590565b611c6f5760405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e277420616363657074207072696365000000000000000060448201526064016106c0565b6001600160a01b038716611c896040840160208501612f78565b6001600160a01b031614611cdf5760405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d617463680000000000000060448201526064016106c0565b85826040013514611d325760405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d6174636800000000000060448201526064016106c0565b60608201356000611d4c611d46888d613366565b8361253c565b9050611d5881886131c5565b9650611d7c611d6a6020860186612f78565b6001546001600160a01b0316836120f3565b6000611d9c878f611d8d9190613366565b611d978486613366565b61253c565b9050611da881886131c5565b9650611dc1611dba6020870187612f78565b33836120f3565b6000611dcd82846131c5565b90508060096000611de160208a018a612f78565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c81526020019081526020016000206000828254611e2191906131c5565b925050819055505050505050508080611e39906131dd565b915050611a14565b50858214611ea05760405162461bcd60e51b815260206004820152602660248201527f50726f746f636f6c20666565206e6f74207472616e7366657272656420636f72604482015265726563746c7960d01b60648201526084016106c0565b878114611f005760405162461bcd60e51b815260206004820152602860248201527f4578656375746f72207072696365206e6f74207472616e7366657272656420636044820152676f72726563746c7960c01b60648201526084016106c0565b611f0c8433308a61224e565b505060016006555050505050505050565b60005b8181101561069a576000838383818110611f3c57611f3c613199565b602090810292909201356000818152600a90935260409092208054929350916001600160a01b03169050611fbc5760405162461bcd60e51b815260206004820152602160248201527f507265436c61696d3a20457865637574696f6e20646f65736e277420657869736044820152601d60fa1b60648201526084016106c0565b805460028201546040516331a9108f60e11b8152600481019190915260009130916001600160a01b0390911690636352211e90602401602060405180830381865afa15801561200f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120339190613ccd565b60038401546001600160a01b039190911691909114915060ff1680612056575080155b6120c15760405162461bcd60e51b815260206004820152603660248201527f507265436c61696d3a204e465420686173206e6f74206265656e20736f6c64206044820152753737b91030b9b5903430b9903132b2b7103a30b5b2b760511b60648201526084016106c0565b600382015460ff166120dd5760038201805460ff191660011790555b50505080806120eb906131dd565b915050611f20565b61069a7f0000000000000000000000000000000000000000000000000000000000000000848484612552565b6000828152600a60205260409020600581015485141580612144575083816004015414155b156121585760006007820181905560088201555b6005810194909455600484019290925550600690910155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b8181101561069a57368383838181106121df576121df613199565b6101a00291909101915060019050600860006121fe6020850185612f78565b6001600160a01b03168152602080820192909252604090810160009081206101209590950135815293909152909120805460ff191691151591909117905580612246816131dd565b9150506121c4565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038516906301ffc9a790602401602060405180830381865afa158015612299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122bd9190613cea565b1561233157604051632142170760e11b81526001600160a01b0384811660048301528381166024830152604482018390528516906342842e0e90606401600060405180830381600087803b15801561231457600080fd5b505af1158015612328573d6000803e3d6000fd5b50505050610864565b60405162461bcd60e51b815260206004820152602260248201527f436f6c6c656374696f6e20646f6573206e6f7420737570706f72742045524337604482015261323160f01b60648201526084016106c0565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c0151975160009b6124489b7f72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f9b919a919998979695949392019a8b526001600160a01b03998a1660208c01529790981660408a01526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301919091526101408201526101600190565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b0386166124bd5760405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e657200000060448201526064016106c0565b6040805160208082018790528183018690526001600160f81b031960f889901b1660608301528251808303604101815260618301845261190160f01b60818401526083830186905260a38084018c90528451808503909101815260c3909301909352815191012061252f88828461256d565b9998505050505050505050565b600081831061254b5781610767565b5090919050565b8015610864576108646001600160a01b0385168484846126b9565b600080600061257c8585612713565b90925090506000816004811115612595576125956137f1565b1480156125b35750856001600160a01b0316826001600160a01b0316145b156125c357600192505050610767565b600080876001600160a01b0316631626ba7e60e01b88886040516024016125eb929190613d05565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516126299190613d1e565b600060405180830381855afa9150503d8060008114612664576040519150601f19603f3d011682016040523d82523d6000602084013e612669565b606091505b509150915081801561267c575080516020145b80156126ad57508051630b135d3f60e11b906126a19083016020908101908401613d3a565b6001600160e01b031916145b98975050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610864908590612781565b60008082516041036127495760208301516040840151606085015160001a61273d87828585612853565b9450945050505061277a565b82516040036127725760208301516040840151612767868383612940565b93509350505061277a565b506000905060025b9250929050565b60006127d6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129799092919063ffffffff16565b80519091501561069a57808060200190518101906127f49190613cea565b61069a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106c0565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561288a5750600090506003612937565b8460ff16601b141580156128a257508460ff16601c14155b156128b35750600090506004612937565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612907573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661293057600060019250925050612937565b9150600090505b94509492505050565b6000806001600160ff1b0383168161295d60ff86901c601b6131c5565b905061296b87828885612853565b935093505050935093915050565b60606129888484600085612990565b949350505050565b6060824710156129f15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106c0565b6001600160a01b0385163b612a485760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106c0565b600080866001600160a01b03168587604051612a649190613d1e565b60006040518083038185875af1925050503d8060008114612aa1576040519150601f19603f3d011682016040523d82523d6000602084013e612aa6565b606091505b5091509150612ab6828286612ac1565b979650505050505050565b60608315612ad0575081610767565b825115612ae05782518084602001fd5b8160405162461bcd60e51b81526004016106c09190613d57565b6001600160e01b0319811681146117e857600080fd5b600060208284031215612b2257600080fd5b813561076781612afa565b60008083601f840112612b3f57600080fd5b5081356001600160401b03811115612b5657600080fd5b6020830191508360208260051b850101111561277a57600080fd5b60008060208385031215612b8457600080fd5b82356001600160401b03811115612b9a57600080fd5b612ba685828601612b2d565b90969095509350505050565b6001600160a01b03811681146117e857600080fd5b8035612bd281612bb2565b919050565b634e487b7160e01b600052604160045260246000fd5b6040516102e081016001600160401b0381118282101715612c1057612c10612bd7565b60405290565b60405161020081016001600160401b0381118282101715612c1057612c10612bd7565b6040516101a081016001600160401b0381118282101715612c1057612c10612bd7565b604051601f8201601f191681016001600160401b0381118282101715612c8457612c84612bd7565b604052919050565b60006001600160401b03821115612ca557612ca5612bd7565b50601f01601f191660200190565b600082601f830112612cc457600080fd5b8135612cd7612cd282612c8c565b612c5c565b818152846020838601011115612cec57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612d1f57600080fd5b8435612d2a81612bb2565b93506020850135612d3a81612bb2565b92506040850135915060608501356001600160401b03811115612d5c57600080fd5b612d6887828801612cb3565b91505092959194509250565b600080600060408486031215612d8957600080fd5b8335925060208401356001600160401b0380821115612da757600080fd5b818601915086601f830112612dbb57600080fd5b813581811115612dca57600080fd5b876020828501011115612ddc57600080fd5b6020830194508093505050509250925092565b600060208284031215612e0157600080fd5b5035919050565b600080600060408486031215612e1d57600080fd5b83356001600160401b03811115612e3357600080fd5b612e3f86828701612b2d565b9094509250506020840135612e5381612bb2565b809150509250925092565b60008083601f840112612e7057600080fd5b5081356001600160401b03811115612e8757600080fd5b6020830191508360206101a08302850101111561277a57600080fd5b60008060008060608587031215612eb957600080fd5b84356001600160401b03811115612ecf57600080fd5b612edb87828801612e5e565b90989097506020870135966040013595509350505050565b60008060408385031215612f0657600080fd5b8235612f1181612bb2565b946020939093013593505050565b600080600080600060808688031215612f3757600080fd5b85356001600160401b03811115612f4d57600080fd5b612f5988828901612e5e565b9099909850602088013597604081013597506060013595509350505050565b600060208284031215612f8a57600080fd5b813561076781612bb2565b600080600060408486031215612faa57600080fd5b83356001600160401b03811115612fc057600080fd5b612fcc86828701612e5e565b909790965060209590950135949350505050565b60008060408385031215612ff357600080fd5b82359150602083013561300581612bb2565b809150509250929050565b600082601f83011261302157600080fd5b813560206001600160401b0382111561303c5761303c612bd7565b8160051b61304b828201612c5c565b928352848101820192828101908785111561306557600080fd5b83870192505b84831015612ab65782358252918301919083019061306b565b600080600080600060a0868803121561309c57600080fd5b85356130a781612bb2565b945060208601356130b781612bb2565b935060408601356001600160401b03808211156130d357600080fd5b6130df89838a01613010565b945060608801359150808211156130f557600080fd5b61310189838a01613010565b9350608088013591508082111561311757600080fd5b5061312488828901612cb3565b9150509295509295909350565b600080600080600060a0868803121561314957600080fd5b853561315481612bb2565b9450602086013561316481612bb2565b9350604086013592506060860135915060808601356001600160401b0381111561318d57600080fd5b61312488828901612cb3565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156131d8576131d86131af565b500190565b6000600182016131ef576131ef6131af565b5060010190565b602080825260129082015271048617368206d757374206e6f7420626520360741b604082015260600190565b6000808585111561323257600080fd5b8386111561323f57600080fd5b5050820193919092039150565b8035602083101561060057600019602084900360031b1b1692915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008160001904831182151516156132b9576132b96131af565b500290565b6000826132db57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602f908201527f4c6973744f6e4d61726b6574706c6163653a204d75737420686176652061742060408201526e3632b0b9ba1037b7329037b93232b960891b606082015260800190565b600082821015613378576133786131af565b500390565b60208082526017908201527f457865637574696f6e20646f65736e2774206578697374000000000000000000604082015260600190565b602080825260169082015275115e1958dd5d1a5bdb88185b1c9958591e481cdbdb1960521b604082015260600190565b60ff811681146117e857600080fd5b8035612bd2816133e4565b8183526000602080850194508260005b858110156134d8576134308761342384612bc7565b6001600160a01b03169052565b61343b838301612bc7565b6001600160a01b03168388015260408281013590880152606080830135908801526080808301359088015260a0808301359088015260c0808301359088015260e08083013590880152610100808301359088015261012080830135908801526101406134a88184016133f3565b60ff1690880152610160828101359088015261018080830135908801526101a0968701969091019060010161340e565b509495945050505050565b60006101008b83528a60208401528060408401526135048184018a8c6133fe565b60608401989098525050608081019490945260a084019290925260c083015260e090910152949350505050565b60006020828403121561354357600080fd5b5051919050565b60408152600061355e6040830185876133fe565b9050826020830152949350505050565b8051612bd281612bb2565b805160028110612bd257600080fd5b60005b838110156135a357818101518382015260200161358b565b838111156108645750506000910152565b600082601f8301126135c557600080fd5b81516135d3612cd282612c8c565b8181528460208386010111156135e857600080fd5b612988826020830160208701613588565b60008060006060848603121561360e57600080fd5b835192506020840151915060408401516001600160401b038082111561363357600080fd5b908501906102e0828803121561364857600080fd5b613650612bed565b6136598361356e565b81526136676020840161356e565b60208201526136786040840161356e565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526136b160e0840161356e565b60e08201526101006136c4818501613579565b908201526101206136d6848201613579565b908201526101406136e8848201613579565b908201526101606136fa84820161356e565b9082015261018061370c848201613579565b908201526101a0838101518381111561372457600080fd5b6137308a8287016135b4565b8284015250506101c0808401518381111561374a57600080fd5b6137568a8287016135b4565b8284015250506101e061376a81850161356e565b90820152610200838101518381111561378257600080fd5b61378e8a8287016135b4565b82840152505061022091506137a482840161356e565b918101919091526102408281015190820152610260808301519082015261028080830151908201526102a080830151908201526102c0918201519181019190915292959194509192509050565b634e487b7160e01b600052602160045260246000fd5b6002811061382557634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452613841816020860160208601613588565b601f01601f19169290920160200192915050565b6040815261386f6040820184516001600160a01b03169052565b6000602084015161388b60608401826001600160a01b03169052565b5060408401516001600160a01b038116608084015250606084015160a0830152608084015160c083015260a084015160e083015260c0840151610100818185015260e086015191506101206138ea818601846001600160a01b03169052565b9086015191506101409061390085830184613807565b860151915061016061391485820184613807565b9086015191506101809061392a85830184613807565b86015191506101a0613946858201846001600160a01b03169052565b9086015191506101c09061395c85830184613807565b808701519250506102e06101e0818187015261397c610320870185613829565b9350828801519250603f1961020081888703018189015261399d8686613829565b9550828a0151945061022092506139be838901866001600160a01b03169052565b808a01519450506102408188870301818901526139db8686613829565b9550828a0151945061026092506139fc838901866001600160a01b03169052565b89015161028088810191909152918901516102a080890191909152918901516102c0808901919091529189015192870192909252909601516103008501525060209092019290925292915050565b80518015158114612bd257600080fd5b8051612bd2816133e4565b60008060408385031215613a7857600080fd5b8251915060208301516001600160401b0380821115613a9657600080fd5b908401906102008287031215613aab57600080fd5b613ab3612c16565b613abc83613a4a565b8152613aca6020840161356e565b6020820152613adb6040840161356e565b6040820152606083015160608201526080830151608082015260a083015160a0820152613b0a60c0840161356e565b60c0820152613b1b60e0840161356e565b60e082015261010083810151908201526101208084015190820152610140808401519082015261016080840151908201526101808084015183811115613b6057600080fd5b613b6c898287016135b4565b8284015250506101a09150613b82828401613a5a565b828201526101c0915081830151828201526101e0915081830151828201528093505050509250929050565b60208082526027908201527f43616e63656c3a204d7573742070726f76696465206174206c65617374206f6e60408201526665206e6f6e636560c81b606082015260800190565b60006101a08284031215613c0757600080fd5b613c0f612c39565b613c1883612bc7565b8152613c2660208401612bc7565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140613c8d8185016133f3565b908201526101608381013590820152610180928301359281019290925250919050565b600060208284031215613cc257600080fd5b8135610767816133e4565b600060208284031215613cdf57600080fd5b815161076781612bb2565b600060208284031215613cfc57600080fd5b61076782613a4a565b8281526040602082015260006129886040830184613829565b60008251613d30818460208701613588565b9190910192915050565b600060208284031215613d4c57600080fd5b815161076781612afa565b602081526000610767602083018461382956fea26469706673582212200032af29b1fe8d4c01de75460fd026e88349612507b0f06a5e508e8cdd122cf964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80636dd7a34e1161011a578063c18d89d3116100ad578063e80453841161007c578063e8045384146104a7578063f23a6e61146104d5578063f2fde38b146104f4578063f6f6712514610507578063f76c92291461051a57600080fd5b8063c18d89d314610451578063dab400f31461045a578063dce6b1f914610481578063e711bf1b1461049457600080fd5b8063ac8d590b116100e9578063ac8d590b146103e5578063ad5c4648146103f8578063bc197c811461041f578063bc7517241461043e57600080fd5b80636dd7a34e146103a6578063715018a6146103b95780638da5cb5b146103c15780639f9abd35146103d257600080fd5b8063323d01e5116101925780634bbe7882116101615780634bbe7882146103495780634c8a65761461035c5780635a2aa9d71461038a5780636c1438ca1461039d57600080fd5b8063323d01e5146102d7578063360f4d871461030257806339a51be5146103155780633a0298eb1461034057600080fd5b806318ecca46116101ce57806318ecca46146102875780631a7eeff21461029a5780632eb69403146102ad5780632ec16145146102c057600080fd5b806301ffc9a7146102005780630570490d14610228578063150b7a021461023d5780631626ba7e14610274575b600080fd5b61021361020e366004612b10565b6105cf565b60405190151581526020015b60405180910390f35b61023b610236366004612b71565b610606565b005b61025b61024b366004612d09565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161021f565b61025b610282366004612d74565b61069f565b61023b610295366004612def565b61076e565b61023b6102a8366004612e08565b61079d565b61023b6102bb366004612ea3565b61086a565b6102c960055481565b60405190815260200161021f565b6102c96102e5366004612ef3565b600960209081526000928352604080842090915290825290205481565b61023b610310366004612f1f565b610cbf565b600154610328906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b6102c960025481565b61023b610357366004612f78565b6110ae565b61021361036a366004612ef3565b600860209081526000928352604080842090915290825290205460ff1681565b61023b610398366004612b71565b6110fa565b6102c960035481565b61023b6103b4366004612def565b611185565b61023b6111b4565b6000546001600160a01b0316610328565b61023b6103e0366004612f95565b6111ea565b61023b6103f3366004612fe0565b6114a6565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b61025b61042d366004613084565b63bc197c8160e01b95945050505050565b61023b61044c366004612def565b611667565b6102c960045481565b6102c97f000000000000000000000000000000000000000000000000000000000000000081565b61023b61048f366004612def565b611696565b61023b6104a2366004612b71565b6116c5565b6102136104b5366004612ef3565b600760209081526000928352604080842090915290825290205460ff1681565b61025b6104e3366004613131565b63f23a6e6160e01b95945050505050565b61023b610502366004612f78565b611750565b61023b610515366004612ea3565b6117eb565b610581610528366004612def565b600a602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b03909716979596949560ff909416949293919290919089565b604080516001600160a01b03909a168a5260208a0198909852968801959095529215156060870152608086019190915260a085015260c084015260e08301526101008201526101200161021f565b60006001600160e01b03198216630271189760e51b148061060057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106108282611f1d565b6000805b8281101561068157600084848381811061063057610630613199565b9050602002013590506000600a6000838152602001908152602001600020905080600601548461066091906131c5565b93506000816006018190555050508080610679906131dd565b915050610614565b5060015461069a9030906001600160a01b0316836120f3565b505050565b60008381036106c95760405162461bcd60e51b81526004016106c0906131f6565b60405180910390fd5b60006106d86020828587613222565b6106e19161324c565b905060006106f3604060208688613222565b6106fc9161324c565b90508015801561071c57506000828152600a602052604090206007015486145b80610742575080600114801561074257506000828152600a602052604090206008015486145b156107595750630b135d3f60e11b91506107679050565b506001600160e01b03199150505b9392505050565b6000546001600160a01b031633146107985760405162461bcd60e51b81526004016106c09061326a565b600455565b6107a78383611f1d565b6000805b838110156108585760008585838181106107c7576107c7613199565b602090810292909201356000818152600a8452604080822033835260098652818320848452909552812054600485015460018601549396509093509161080d838561329f565b61081791906132be565b336000908152600960209081526040808320898452909152812055905061083e81886131c5565b965050505050508080610850906131dd565b9150506107ab565b506108643083836120f3565b50505050565b60026006540361088c5760405162461bcd60e51b81526004016106c0906132e0565b6002600655826108ae5760405162461bcd60e51b81526004016106c090613317565b6000612710836003546108c1919061329f565b6108cb91906132be565b905060006108d98285613366565b90506000868660008181106108f0576108f0613199565b6101a002919091016040908101356000818152600a60205291909120805491935091506001600160a01b03166109385760405162461bcd60e51b81526004016106c09061337d565b600381015460ff161561095d5760405162461bcd60e51b81526004016106c0906133b4565b600073__$212d7bd68238178e559b7980cfdcd62a2c$__63b95522d5600860098c8c88888b6004546005546040518a63ffffffff1660e01b81526004016109ac999897969594939291906134e3565b602060405180830381865af41580156109c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ed9190613531565b60405163345a3d9f60e11b815290915073__$212d7bd68238178e559b7980cfdcd62a2c$__906368b47b3e90610a4b908c908c907f00000000000000000000000000000000000000000000000000000000000000009060040161354a565b60006040518083038186803b158015610a6357600080fd5b505af4158015610a77573d6000803e3d6000fd5b5050835460405163f06a206d60e01b81523060048201526001600160a01b0391821660248201527f0000000000000000000000000000000000000000000000000000000000000000909116604482015273__$4f7460c95cee7e5c2f700bdeb3e509d3e9$__925063f06a206d915060640160006040518083038186803b158015610b0057600080fd5b505af4158015610b14573d6000803e3d6000fd5b50508354600285015460009350839250829173__$4f7460c95cee7e5c2f700bdeb3e509d3e9$__9163d7a2b5689130916001600160a01b0390911690610b5c8e612710613366565b8f612710610b6a919061329f565b610b7491906132be565b610b7f9060016131c5565b60405160e086901b6001600160e01b03191681526001600160a01b0394851660048201529284166024840152604483019190915260648201526084810188905260a481018d90527f000000000000000000000000000000000000000000000000000000000000000090911660c482015260e401600060405180830381865af4158015610c0f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3791908101906135f9565b925092509250826000801b03610c5f5760405162461bcd60e51b81526004016106c0906131f6565b610c6b8488888b61211f565b600785018390556040517fd66e0d7ab0776700af7567767b69a1c8f3ebd0efb3632e3055f89fb2b9d2e6b590610ca49083908590613855565b60405180910390a15050600160065550505050505050505050565b600260065403610ce15760405162461bcd60e51b81526004016106c0906132e0565b600260065583610d035760405162461bcd60e51b81526004016106c090613317565b600061271084600354610d16919061329f565b610d2091906132be565b90506000610d2e8286613366565b9050600087876000818110610d4557610d45613199565b6101a002919091016040908101356000818152600a60205291909120805491935091506001600160a01b0316610d8d5760405162461bcd60e51b81526004016106c09061337d565b600381015460ff1615610db25760405162461bcd60e51b81526004016106c0906133b4565b600073__$212d7bd68238178e559b7980cfdcd62a2c$__63b95522d5600860098d8d88888b6004546005546040518a63ffffffff1660e01b8152600401610e01999897969594939291906134e3565b602060405180830381865af4158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190613531565b60405163345a3d9f60e11b815290915073__$212d7bd68238178e559b7980cfdcd62a2c$__906368b47b3e90610ea0908d908d907f00000000000000000000000000000000000000000000000000000000000000009060040161354a565b60006040518083038186803b158015610eb857600080fd5b505af4158015610ecc573d6000803e3d6000fd5b50508354604051633a4691bf60e11b81523060048201526001600160a01b03909116602482015273__$244e3ebe2ec11d6ffb6b7a6c13a445f3ea$__925063748d237e915060440160006040518083038186803b158015610f2c57600080fd5b505af4158015610f40573d6000803e3d6000fd5b5050835460028501546000935073__$244e3ebe2ec11d6ffb6b7a6c13a445f3ea$__9250631221a1ca9130916001600160a01b0390911690610f848d612710613366565b610f908f61271061329f565b610f9a91906132be565b610fa59060016131c5565b60405160e086901b6001600160e01b03191681526001600160a01b0394851660048201529284166024840152604483019190915260648201526084810186905260a481018c90527f000000000000000000000000000000000000000000000000000000000000000090911660c482015260e481018a905261010401600060405180830381865af415801561103d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110659190810190613a65565b50905060008190036110895760405162461bcd60e51b81526004016106c0906131f6565b6110958286868961211f565b6008909201919091555050600160065550505050505050565b6000546001600160a01b031633146110d85760405162461bcd60e51b81526004016106c09061326a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b806111175760405162461bcd60e51b81526004016106c090613bad565b60005b8181101561069a5733600090815260086020526040812060019185858581811061114657611146613199565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061117d906131dd565b91505061111a565b6000546001600160a01b031633146111af5760405162461bcd60e51b81526004016106c09061326a565b600355565b6000546001600160a01b031633146111de5760405162461bcd60e51b81526004016106c09061326a565b6111e86000612171565b565b60026006540361120c5760405162461bcd60e51b81526004016106c0906132e0565b6002600655816112705760405162461bcd60e51b815260206004820152602960248201527f4578656375746553656c6c3a204d7573742068617665206174206c656173742060448201526837b7329037b93232b960b91b60648201526084016106c0565b600061271082600354611283919061329f565b61128d91906132be565b9050600061129b8284613366565b90506000858560008181106112b2576112b2613199565b6101a002919091016040908101356000818152600a60205291909120805491935091506001600160a01b03166112fa5760405162461bcd60e51b81526004016106c09061337d565b600381015460ff161561131f5760405162461bcd60e51b81526004016106c0906133b4565b6004805460055460405163b95522d560e01b815273__$212d7bd68238178e559b7980cfdcd62a2c$__9363b95522d59361136b936008936009938f938f938c938c938f939291016134e3565b602060405180830381865af4158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190613531565b506113b787876121c1565b60038101805460ff19166001179055600480820184905560405163345a3d9f60e11b815273__$212d7bd68238178e559b7980cfdcd62a2c$",
  "libraries": {
    "BuyOrderV1Functions": "0x79E24B4766011FB3461e1C2bf9f82D7a687361e5",
    "OpenSeaUtil": "0x6d50Eb6A27b3FdD297A8EDAdFDe7D5025D9F2b4B",
    "LooksRareUtil": "0x020f20a352BcA41A9334a512c3EeAd28860814D8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeMinConsensusForSellingOverOrEqualBuyPrice(uint256)": {
        "params": {
          "_minConsensusForSellingOverOrEqualBuyPrice": "new min consensus (out of 10_000)"
        }
      },
      "changeMinConsensusForSellingUnderBuyPrice(uint256)": {
        "params": {
          "_minConsensusForSellingUnderBuyPrice": "new min consensus (out of 10_000)"
        }
      },
      "changeProtocolFeeFraction(uint256)": {
        "params": {
          "_protocolFeeFraction": "new fee fraction (out of 10_000)"
        }
      },
      "changeProtocolFeeFractionFromSelling(uint256)": {
        "params": {
          "_protocolFeeFractionFromSelling": "new fee fraction (out of 10_000)"
        }
      },
      "changeProtocolFeeReceiver(address)": {
        "params": {
          "_protocolFeeReceiver": "new receiver"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeMinConsensusForSellingOverOrEqualBuyPrice(uint256)": {
        "notice": "[onlyOwner] Change the min consensus for selling over or equal to buy price"
      },
      "changeMinConsensusForSellingUnderBuyPrice(uint256)": {
        "notice": "[onlyOwner] Change the min consensus for selling under buy price"
      },
      "changeProtocolFeeFraction(uint256)": {
        "notice": "[onlyOwner] Change the protocol fee fraction"
      },
      "changeProtocolFeeFractionFromSelling(uint256)": {
        "notice": "[onlyOwner] Change the protocol fee fraction from selling"
      },
      "changeProtocolFeeReceiver(address)": {
        "notice": "[onlyOwner] Change the protocol fee receiver"
      },
      "executeOnPassiveBuyOrders((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256)": {
        "notice": "Executes on an array of passive buy orders"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 550,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4741,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4744,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeFraction",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4747,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "protocolFeeFractionFromSelling",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4750,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "minConsensusForSellingOverOrEqualBuyPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4753,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "minConsensusForSellingUnderBuyPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 764,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4839,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "isUsedBuyNonce",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4845,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "isUsedSellNonce",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4851,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "realContributions",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4856,
        "contract": "contracts/ClowderMain.sol:ClowderMain",
        "label": "executions",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Execution)6381_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Execution)6381_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Execution)",
        "numberOfBytes": "32",
        "value": "t_struct(Execution)6381_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Execution)6381_storage": {
        "encoding": "inplace",
        "label": "struct Execution",
        "members": [
          {
            "astId": 6364,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "collection",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6366,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "buyPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6368,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6370,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "sold",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 6372,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "sellPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6374,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "listingEndTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6376,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "sellProtocolFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6378,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "openSeaOrderHash",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 6380,
            "contract": "contracts/ClowderMain.sol:ClowderMain",
            "label": "looksRareOrderHash",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}