{
  "address": "0x6d50Eb6A27b3FdD297A8EDAdFDe7D5025D9F2b4B",
  "abi": [
    {
      "inputs": [],
      "name": "WyvernTokenTransferProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feesFraction",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "buildAndGetOpenSeaOrderHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "finalOrderHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "paramsOrderHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makerRelayerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerRelayerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerProtocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerProtocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "enum OpenSeaUtil.FeeMethod",
              "name": "feeMethod",
              "type": "OpenSeaUtil.FeeMethod"
            },
            {
              "internalType": "enum SaleKindInterface.Side",
              "name": "side",
              "type": "SaleKindInterface.Side"
            },
            {
              "internalType": "enum SaleKindInterface.SaleKind",
              "name": "saleKind",
              "type": "SaleKindInterface.SaleKind"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum AuthenticatedProxy.HowToCall",
              "name": "howToCall",
              "type": "AuthenticatedProxy.HowToCall"
            },
            {
              "internalType": "bytes",
              "name": "calldata2",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "replacementPattern",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "staticTarget",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "staticExtradata",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "basePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "extra",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            }
          ],
          "internalType": "struct OpenSeaUtil.OpenSeaOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openSea",
      "outputs": [
        {
          "internalType": "contract OpenSea",
          "name": "",
          "type": "OpenSea"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wyvernProxyRegistry",
      "outputs": [
        {
          "internalType": "contract OpenSeaProxyRegistry",
          "name": "",
          "type": "OpenSeaProxyRegistry"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b399da5da0954f33a76106a37a8e0b1611e742761e094b941e1d89ac56c936d",
  "receipt": {
    "to": null,
    "from": "0xC103d1b071AFA925714eE55b2F4869300C4331C4",
    "contractAddress": "0x6d50Eb6A27b3FdD297A8EDAdFDe7D5025D9F2b4B",
    "transactionIndex": 19,
    "gasUsed": "877100",
    "logsBloom": "0x
    "blockHash": "0x6108066fd44de21be13f723ef6a5c56e1b205509f06be30b667bb4ce477a20a6",
    "transactionHash": "0x5b399da5da0954f33a76106a37a8e0b1611e742761e094b941e1d89ac56c936d",
    "logs": [],
    "blockNumber": 10783042,
    "cumulativeGasUsed": "7762140",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "21dff2ffcfaa64fcc46cfa2256209c04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WyvernTokenTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesFraction\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"buildAndGetOpenSeaOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"finalOrderHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"paramsOrderHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"enum OpenSeaUtil.FeeMethod\",\"name\":\"feeMethod\",\"type\":\"OpenSeaUtil.FeeMethod\"},{\"internalType\":\"enum SaleKindInterface.Side\",\"name\":\"side\",\"type\":\"SaleKindInterface.Side\"},{\"internalType\":\"enum SaleKindInterface.SaleKind\",\"name\":\"saleKind\",\"type\":\"SaleKindInterface.SaleKind\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum AuthenticatedProxy.HowToCall\",\"name\":\"howToCall\",\"type\":\"AuthenticatedProxy.HowToCall\"},{\"internalType\":\"bytes\",\"name\":\"calldata2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"staticTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"internalType\":\"struct OpenSeaUtil.OpenSeaOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSea\",\"outputs\":[{\"internalType\":\"contract OpenSea\",\"name\":\"\",\"type\":\"OpenSea\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wyvernProxyRegistry\",\"outputs\":[{\"internalType\":\"contract OpenSeaProxyRegistry\",\"name\":\"\",\"type\":\"OpenSeaProxyRegistry\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/externalmarketplaces/OpenSeaUtil.sol\":\"OpenSeaUtil\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/libraries/externalmarketplaces/OpenSeaUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface OpenSea {\\r\\n    // mapping(address => uint256) public nonces;\\r\\n    function nonces(address user) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface OpenSeaOwnableDelegateProxy {}\\r\\n\\r\\ninterface OpenSeaProxyRegistry {\\r\\n    // mapping(address => OpenSeaOwnableDelegateProxy) public proxies;\\r\\n    function proxies(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (OpenSeaOwnableDelegateProxy);\\r\\n\\r\\n    function registerProxy() external returns (OpenSeaOwnableDelegateProxy);\\r\\n}\\r\\n\\r\\nlibrary OpenSeaUtil {\\r\\n    // mainnet\\r\\n    // OpenSea public constant openSea =\\r\\n    //     OpenSea(0x7f268357A8c2552623316e2562D90e642bB538E5);\\r\\n    // address public constant WyvernTokenTransferProxy = 0xe5c783ee536cf5e63e792988335c4255169be4e1;\\r\\n    // bytes32 internal constant OPENSEA_DOMAIN_SEPARATOR =\\r\\n    //     0x72982d92449bfb3d338412ce4738761aff47fb975ceb17a1bc3712ec716a5a68;\\r\\n    // bytes32 internal constant _OPENSEA_ORDER_TYPEHASH =\\r\\n    //     0xdba08a88a748f356e8faf8578488343eab21b1741728779c9dcfdc782bc800f8;\\r\\n    // address internal constant openSeaFeeRecipient =\\r\\n    //     0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\\r\\n    // address internal constant openSeaMerkleValidator =\\r\\n    //     0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7;\\r\\n    // address public constant WyvernProxyRegistry =\\r\\n    // 0xa5409ec958c83c3f309868babaca7c86dcb077c1;\\r\\n\\r\\n    // rinkeby\\r\\n    OpenSea public constant openSea =\\r\\n        OpenSea(0xdD54D660178B28f6033a953b0E55073cFA7e3744);\\r\\n    OpenSeaProxyRegistry public constant wyvernProxyRegistry =\\r\\n        OpenSeaProxyRegistry(0x1E525EEAF261cA41b809884CBDE9DD9E1619573A);\\r\\n    address public constant WyvernTokenTransferProxy =\\r\\n        0xCdC9188485316BF6FA416d02B4F680227c50b89e;\\r\\n    bytes32 internal constant OPENSEA_DOMAIN_SEPARATOR =\\r\\n        0xd38471a54d114ee69fbb07d1769a0bbecd4f429ddf5932c7098093908e24bd9d;\\r\\n    bytes32 internal constant _OPENSEA_ORDER_TYPEHASH =\\r\\n        0xdba08a88a748f356e8faf8578488343eab21b1741728779c9dcfdc782bc800f8;\\r\\n    address internal constant openSeaFeeRecipient =\\r\\n        0x5b3256965e7C3cF26E11FCAf296DfC8807C01073;\\r\\n    address internal constant openSeaMerkleValidator =\\r\\n        0x45B594792a5CDc008D0dE1C1d69FAA3D16B3DDc1;\\r\\n\\r\\n    enum FeeMethod {\\r\\n        ProtocolFee,\\r\\n        SplitFee\\r\\n    }\\r\\n\\r\\n    /* An order on the exchange. */\\r\\n    struct OpenSeaOrder {\\r\\n        /* Exchange address, intended as a versioning mechanism. */\\r\\n        address exchange;\\r\\n        /* Order maker address. */\\r\\n        address maker;\\r\\n        /* Order taker address, if specified. */\\r\\n        address taker;\\r\\n        /* Maker relayer fee of the order, unused for taker order. */\\r\\n        uint makerRelayerFee;\\r\\n        /* Taker relayer fee of the order, or maximum taker fee for a taker order. */\\r\\n        uint takerRelayerFee;\\r\\n        /* Maker protocol fee of the order, unused for taker order. */\\r\\n        uint makerProtocolFee;\\r\\n        /* Taker protocol fee of the order, or maximum taker fee for a taker order. */\\r\\n        uint takerProtocolFee;\\r\\n        /* Order fee recipient or zero address for taker order. */\\r\\n        address feeRecipient;\\r\\n        /* Fee method (protocol token or split fee). */\\r\\n        FeeMethod feeMethod;\\r\\n        /* Side (buy/sell). */\\r\\n        SaleKindInterface.Side side;\\r\\n        /* Kind of sale. */\\r\\n        SaleKindInterface.SaleKind saleKind;\\r\\n        /* Target. */\\r\\n        address target;\\r\\n        /* HowToCall. */\\r\\n        AuthenticatedProxy.HowToCall howToCall;\\r\\n        /* Calldata. */\\r\\n        bytes calldata2; // changed 'calldata' name because of compilation error\\r\\n        /* Calldata replacement pattern, or an empty byte array for no replacement. */\\r\\n        bytes replacementPattern;\\r\\n        /* Static call target, zero-address for no static call. */\\r\\n        address staticTarget;\\r\\n        /* Static call extra data. */\\r\\n        bytes staticExtradata;\\r\\n        /* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */\\r\\n        address paymentToken;\\r\\n        /* Base price of the order (in paymentTokens). */\\r\\n        uint basePrice;\\r\\n        /* Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. */\\r\\n        uint extra;\\r\\n        /* Listing timestamp. */\\r\\n        uint listingTime;\\r\\n        /* Expiration timestamp - 0 for no expiry. */\\r\\n        uint expirationTime;\\r\\n        /* Order salt, used to prevent duplicate hashes. */\\r\\n        uint salt;\\r\\n        /* NOTE: uint nonce is an additional component of the order but is read from storage */\\r\\n    }\\r\\n\\r\\n    function hashOpenSeaOrder(OpenSeaOrder memory order, uint nonce)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes32 hash)\\r\\n    {\\r\\n        /* Unfortunately abi.encodePacked doesn't work here, stack size constraints. */\\r\\n        uint size = 800;\\r\\n        bytes memory array = new bytes(size);\\r\\n        uint index;\\r\\n        assembly {\\r\\n            index := add(array, 0x20)\\r\\n        }\\r\\n        index = ArrayUtils.unsafeWriteBytes32(index, _OPENSEA_ORDER_TYPEHASH);\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.exchange);\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.maker);\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.taker);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.makerRelayerFee);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.takerRelayerFee);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.makerProtocolFee);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.takerProtocolFee);\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.feeRecipient);\\r\\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.feeMethod));\\r\\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.side));\\r\\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.saleKind));\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.target);\\r\\n        index = ArrayUtils.unsafeWriteUint8Word(index, uint8(order.howToCall));\\r\\n        index = ArrayUtils.unsafeWriteBytes32(\\r\\n            index,\\r\\n            keccak256(order.calldata2)\\r\\n        );\\r\\n        index = ArrayUtils.unsafeWriteBytes32(\\r\\n            index,\\r\\n            keccak256(order.replacementPattern)\\r\\n        );\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.staticTarget);\\r\\n        index = ArrayUtils.unsafeWriteBytes32(\\r\\n            index,\\r\\n            keccak256(order.staticExtradata)\\r\\n        );\\r\\n        index = ArrayUtils.unsafeWriteAddressWord(index, order.paymentToken);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.basePrice);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.extra);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.listingTime);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.expirationTime);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, order.salt);\\r\\n        index = ArrayUtils.unsafeWriteUint(index, nonce);\\r\\n        assembly {\\r\\n            hash := keccak256(add(array, 0x20), size)\\r\\n        }\\r\\n        return hash;\\r\\n    }\\r\\n\\r\\n    function getOpenSeaAskOrderHash(OpenSeaOrder memory order)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            bytes32 finalOrderHash,\\r\\n            bytes32 openSeaParamsOrderWithNonceHash\\r\\n        )\\r\\n    {\\r\\n        openSeaParamsOrderWithNonceHash = hashOpenSeaOrder(\\r\\n            order,\\r\\n            openSea.nonces(order.maker)\\r\\n        );\\r\\n        finalOrderHash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                OPENSEA_DOMAIN_SEPARATOR,\\r\\n                openSeaParamsOrderWithNonceHash\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function initializationAndPermissions(\\r\\n        address user, \\r\\n        address erc721address, \\r\\n        address WETH\\r\\n    ) public {\\r\\n        // OpenSea initialization and permissions\\r\\n\\r\\n        // Approving OpenSea to move the item (if not approved already) and WETH (yes, OpenSea requires this for the way it works)\\r\\n        // initialize opensea proxy (check opensea-js)\\r\\n        OpenSeaOwnableDelegateProxy myProxy = OpenSeaUtil\\r\\n            .wyvernProxyRegistry\\r\\n            .proxies(user);\\r\\n\\r\\n        if (address(myProxy) == address(0)) {\\r\\n            myProxy = OpenSeaUtil.wyvernProxyRegistry.registerProxy();\\r\\n        }\\r\\n\\r\\n        IERC721 erc721 = IERC721(erc721address);\\r\\n        if (!erc721.isApprovedForAll(user, address(myProxy))) {\\r\\n            erc721.setApprovalForAll(address(myProxy), true);\\r\\n        }\\r\\n\\r\\n        IERC20 erc20 = IERC20(WETH);\\r\\n        if (\\r\\n            erc20.allowance(\\r\\n                user,\\r\\n                OpenSeaUtil.WyvernTokenTransferProxy\\r\\n            ) < type(uint256).max\\r\\n        ) {\\r\\n            erc20.approve(\\r\\n                OpenSeaUtil.WyvernTokenTransferProxy,\\r\\n                type(uint256).max\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buildAndGetOpenSeaOrderHash(\\r\\n        address seller,\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        uint256 listPrice, // to be paid by buyer, the amount the seller receives is affected by feesFraction\\r\\n        uint256 expiration,\\r\\n        uint256 feesFraction, // (royalties + protocol fee fraction) out of 10_000\\r\\n        address paymentToken\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            bytes32 finalOrderHash,\\r\\n            bytes32 paramsOrderHash,\\r\\n            OpenSeaOrder memory order\\r\\n        )\\r\\n    {\\r\\n        order = OpenSeaUtil.OpenSeaOrder({\\r\\n            exchange: address(openSea),\\r\\n            maker: seller,\\r\\n            taker: address(0),\\r\\n            makerRelayerFee: feesFraction,\\r\\n            takerRelayerFee: 0,\\r\\n            makerProtocolFee: 0,\\r\\n            takerProtocolFee: 0,\\r\\n            feeMethod: FeeMethod.SplitFee,\\r\\n            feeRecipient: openSeaFeeRecipient,\\r\\n            side: SaleKindInterface.Side.Sell,\\r\\n            saleKind: SaleKindInterface.SaleKind.FixedPrice,\\r\\n            target: openSeaMerkleValidator,\\r\\n            howToCall: AuthenticatedProxy.HowToCall.DelegateCall,\\r\\n            staticTarget: address(0),\\r\\n            staticExtradata: \\\"\\\",\\r\\n            paymentToken: paymentToken,\\r\\n            basePrice: listPrice,\\r\\n            extra: 0,\\r\\n            calldata2: bytes.concat(\\r\\n                hex\\\"fb16a595000000000000000000000000\\\",\\r\\n                abi.encodePacked(seller),\\r\\n                hex\\\"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\r\\n                abi.encodePacked(collection),\\r\\n                abi.encodePacked(tokenId),\\r\\n                hex\\\"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\n            ),\\r\\n            replacementPattern: hex\\\"000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\r\\n            listingTime: block.timestamp,\\r\\n            expirationTime: expiration,\\r\\n            salt: block.timestamp\\r\\n        });\\r\\n        (finalOrderHash, paramsOrderHash) = getOpenSeaAskOrderHash(order);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary ArrayUtils {\\r\\n    function guardedArrayReplace(\\r\\n        bytes memory array,\\r\\n        bytes memory desired,\\r\\n        bytes memory mask\\r\\n    ) internal pure {\\r\\n        require(array.length == desired.length);\\r\\n        require(array.length == mask.length);\\r\\n\\r\\n        uint words = array.length / 0x20;\\r\\n        uint index = words * 0x20;\\r\\n        assert(index / 0x20 == words);\\r\\n        uint i;\\r\\n\\r\\n        for (i = 0; i < words; i++) {\\r\\n            /* Conceptually: array[i] = (!mask[i] && array[i]) || (mask[i] && desired[i]), bitwise in word chunks. */\\r\\n            assembly {\\r\\n                let commonIndex := mul(0x20, add(1, i))\\r\\n                let maskValue := mload(add(mask, commonIndex))\\r\\n                mstore(\\r\\n                    add(array, commonIndex),\\r\\n                    or(\\r\\n                        and(not(maskValue), mload(add(array, commonIndex))),\\r\\n                        and(maskValue, mload(add(desired, commonIndex)))\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /* Deal with the last section of the byte array. */\\r\\n        if (words > 0) {\\r\\n            /* This overlaps with bytes already set but is still more efficient than iterating through each of the remaining bytes individually. */\\r\\n            i = words;\\r\\n            assembly {\\r\\n                let commonIndex := mul(0x20, add(1, i))\\r\\n                let maskValue := mload(add(mask, commonIndex))\\r\\n                mstore(\\r\\n                    add(array, commonIndex),\\r\\n                    or(\\r\\n                        and(not(maskValue), mload(add(array, commonIndex))),\\r\\n                        and(maskValue, mload(add(desired, commonIndex)))\\r\\n                    )\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            /* If the byte array is shorter than a word, we must unfortunately do the whole thing bytewise.\\r\\n               (bounds checks could still probably be optimized away in assembly, but this is a rare case) */\\r\\n            for (i = index; i < array.length; i++) {\\r\\n                array[i] =\\r\\n                    ((mask[i] ^ 0xff) & array[i]) |\\r\\n                    (mask[i] & desired[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Test if two arrays are equal\\r\\n     * @param a First array\\r\\n     * @param b Second array\\r\\n     * @return Whether or not all bytes in the arrays are equal\\r\\n     */\\r\\n    function arrayEq(bytes memory a, bytes memory b)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return keccak256(a) == keccak256(b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write byte array into a memory location\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source Byte array to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteBytes(uint index, bytes memory source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        if (source.length > 0) {\\r\\n            assembly {\\r\\n                let length := mload(source)\\r\\n                let end := add(source, add(0x20, length))\\r\\n                let arrIndex := add(source, 0x20)\\r\\n                let tempIndex := index\\r\\n                for {\\r\\n\\r\\n                } eq(lt(arrIndex, end), 1) {\\r\\n                    arrIndex := add(arrIndex, 0x20)\\r\\n                    tempIndex := add(tempIndex, 0x20)\\r\\n                } {\\r\\n                    mstore(tempIndex, mload(arrIndex))\\r\\n                }\\r\\n                index := add(index, length)\\r\\n            }\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write address into a memory location\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source Address to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteAddress(uint index, address source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint conv = uint(uint160(source)) << 0x60;\\r\\n        assembly {\\r\\n            mstore(index, conv)\\r\\n            index := add(index, 0x14)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write address into a memory location using entire word\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteAddressWord(uint index, address source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(index, source)\\r\\n            index := add(index, 0x20)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write uint into a memory location\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteUint(uint index, uint source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(index, source)\\r\\n            index := add(index, 0x20)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write uint8 into a memory location\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint8 to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteUint8(uint index, uint8 source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore8(index, source)\\r\\n            index := add(index, 0x1)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write uint8 into a memory location using entire word\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteUint8Word(uint index, uint8 source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(index, source)\\r\\n            index := add(index, 0x20)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unsafe write bytes32 into a memory location using entire word\\r\\n     *\\r\\n     * @param index Memory location\\r\\n     * @param source uint to write\\r\\n     * @return End memory index\\r\\n     */\\r\\n    function unsafeWriteBytes32(uint index, bytes32 source)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint)\\r\\n    {\\r\\n        assembly {\\r\\n            mstore(index, source)\\r\\n            index := add(index, 0x20)\\r\\n        }\\r\\n        return index;\\r\\n    }\\r\\n}\\r\\n\\r\\n//// starts more OPENSEA stuff\\r\\n\\r\\nlibrary SaleKindInterface {\\r\\n    /**\\r\\n     * Side: buy or sell.\\r\\n     */\\r\\n    enum Side {\\r\\n        Buy,\\r\\n        Sell\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Currently supported kinds of sale: fixed price, Dutch auction.\\r\\n     * English auctions cannot be supported without stronger escrow guarantees.\\r\\n     * Future interesting options: Vickrey auction, nonlinear Dutch auctions.\\r\\n     */\\r\\n    enum SaleKind {\\r\\n        FixedPrice,\\r\\n        DutchAuction\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary AuthenticatedProxy {\\r\\n    enum HowToCall {\\r\\n        Call,\\r\\n        DelegateCall\\r\\n    }\\r\\n}\\r\\n\\r\\n//// ends OPENSEA stuff\\r\\n\",\"keccak256\":\"0xca8fefb6b368cf95c06eec8e991d42c5ffd99f96b258d573aae4af6de06911ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610ef161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c8063124654c214610066578063667d09a11461009e578063757aaba9146100b9578063d7a2b568146100d4578063f06a206d146100f6575b600080fd5b61008173dd54d660178b28f6033a953b0e55073cfa7e374481565b6040516001600160a01b0390911681526020015b60405180910390f35b61008173cdc9188485316bf6fa416d02b4f680227c50b89e81565b610081731e525eeaf261ca41b809884cbde9dd9e1619573a81565b6100e76100e23660046109a4565b610118565b60405161009593929190610aaa565b81801561010257600080fd5b50610116610111366004610cab565b6103bd565b005b6000806101e2604080516102e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905290610100820190815260200160008152602001600081526000602082018190526040909101908152602001606081526020016060815260200160006001600160a01b031681526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516102e08101825273dd54d660178b28f6033a953b0e55073cfa7e374481526001600160a01b038c1660208201526000918101829052606081018790526080810182905260a0810182905260c0810191909152735b3256965e7c3cf26e11fcaf296dfc8807c0107360e082015261010081016001815260200160018152602001600081527345b594792a5cdc008d0de1c1d69faa3d16b3ddc16020820152604001600181526020018b6040516020016102b6919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f19818403018152908290526bffffffffffffffffffffffff1960608e901b1660208301529060340160408051601f19818403018152828252602083018e9052910160408051601f198184030181529082905261031c939291602001610cf6565b604051602081830303815290604052815260200160405180610120016040528060e48152602001610dd860e49139815260200160006001600160a01b03168152602001604051806020016040528060008152508152602001856001600160a01b03168152602001888152602001600081526020014281526020018781526020014281525090506103ab816106c3565b909b909a509098509650505050505050565b60405163c455279160e01b81526001600160a01b0384166004820152600090731e525eeaf261ca41b809884cbde9dd9e1619573a9063c455279190602401602060405180830381865afa158015610418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043c9190610d78565b90506001600160a01b0381166104c757731e525eeaf261ca41b809884cbde9dd9e1619573a6001600160a01b031663ddd81f826040518163ffffffff1660e01b81526004016020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610d78565b90505b60405163e985e9c560e01b81526001600160a01b038581166004830152828116602483015284919082169063e985e9c590604401602060405180830381865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c9190610d9c565b6105a35760405163a22cb46560e01b81526001600160a01b0383811660048301526001602483015282169063a22cb46590604401600060405180830381600087803b15801561058a57600080fd5b505af115801561059e573d6000803e3d6000fd5b505050505b604051636eb1769f60e11b81526001600160a01b03868116600483015273cdc9188485316bf6fa416d02b4f680227c50b89e602483015284916000199183169063dd62ed3e90604401602060405180830381865afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190610dbe565b10156106bb5760405163095ea7b360e01b815273cdc9188485316bf6fa416d02b4f680227c50b89e600482015260001960248201526001600160a01b0382169063095ea7b3906044016020604051808303816000875af1158015610695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b99190610d9c565b505b505050505050565b6020810151604051623f675f60e91b81526001600160a01b039091166004820152600090819061075490849073dd54d660178b28f6033a953b0e55073cfa7e374490637ecebe0090602401602060405180830381865afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190610dbe565b6107b2565b60405161190160f01b60208201527fd38471a54d114ee69fbb07d1769a0bbecd4f429ddf5932c7098093908e24bd9d602282015260428101829052909150606201604051602081830303815290604052805190602001209150915091565b604080516103208082526103408201909252600091908290826020820181803683370190505090506020810161080b817fdba08a88a748f356e8faf8578488343eab21b1741728779c9dcfdc782bc800f8815260200190565b865181526020808801519082015260408088015190820152606080880151908201526080808801519082015260a0808801519082015260c0808801519082015260e08088015190820152610100808801519101915061087f908290600181111561087757610877610a16565b815260200190565b905061089c81876101200151600181111561087757610877610a16565b90506108b981876101400151600181111561087757610877610a16565b610160870151815290506020810190506108e481876101800151600181111561087757610877610a16565b90506108ff81876101a0015180519060200120815260200190565b905061091a81876101c0015180519060200120815260200190565b6101e0870151815261020087015180516020918201208183015261022088015160408301526102408801516060830152610260880151608083015261028088015160a08301526102a088015160c08301526102c09097015160e082015261010001949094529093019290922092915050565b6001600160a01b03811681146109a157600080fd5b50565b600080600080600080600060e0888a0312156109bf57600080fd5b87356109ca8161098c565b965060208801356109da8161098c565b955060408801359450606088013593506080880135925060a0880135915060c0880135610a068161098c565b8091505092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b60028110610a4a57634e487b7160e01b600052602160045260246000fd5b9052565b60005b83811015610a69578181015183820152602001610a51565b83811115610a78576000848401525b50505050565b60008151808452610a96816020860160208601610a4e565b601f01601f19169290920160200192915050565b83815282602082015260606040820152610ad06060820183516001600160a01b03169052565b60006020830151610aec60808401826001600160a01b03169052565b5060408301516001600160a01b03811660a084015250606083015160c0830152608083015160e083015260a0830151610100818185015260c08501519150610120828186015260e08601519250610140610b50818701856001600160a01b03169052565b91860151925061016091610b6686840185610a2c565b90860151925061018090610b7c86830185610a2c565b86015192506101a0610b9086820185610a2c565b9186015192506101c091610bae868401856001600160a01b03169052565b9086015192506101e090610bc486830185610a2c565b808701519350506102e06102008181880152610be4610340880186610a7e565b9450838801519350605f196102208189880301818a0152610c058787610a7e565b9650848a015195506102409450610c26858a01876001600160a01b03169052565b828a0151955061026092508189880301838a0152610c448787610a7e565b9650808a015195505050610280610c65818901866001600160a01b03169052565b928801516102a088810191909152908801516102c08089019190915292880151918701919091528601516103008601529094015161032090930192909252509392505050565b600080600060608486031215610cc057600080fd5b8335610ccb8161098c565b92506020840135610cdb8161098c565b91506040840135610ceb8161098c565b809150509250925092565b63fb16a59560e01b81528351600090610d16816010850160208901610a4e565b808301905060006010820152600060308201528451610d3c81603c840160208901610a4e565b8451910190610d5281603c840160208801610a4e565b6000603c9290910191820181905260c0605c830152607c820152609c0195945050505050565b600060208284031215610d8a57600080fd5b8151610d958161098c565b9392505050565b600060208284031215610dae57600080fd5b81518015158114610d9557600080fd5b600060208284031215610dd057600080fd5b505191905056fe000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a2646970667358221220a785cc5cfd6b5e4f821c3df2daed683bcd384497a4f6734c672a193105fad88964736f6c634300080d0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c8063124654c214610066578063667d09a11461009e578063757aaba9146100b9578063d7a2b568146100d4578063f06a206d146100f6575b600080fd5b61008173dd54d660178b28f6033a953b0e55073cfa7e374481565b6040516001600160a01b0390911681526020015b60405180910390f35b61008173cdc9188485316bf6fa416d02b4f680227c50b89e81565b610081731e525eeaf261ca41b809884cbde9dd9e1619573a81565b6100e76100e23660046109a4565b610118565b60405161009593929190610aaa565b81801561010257600080fd5b50610116610111366004610cab565b6103bd565b005b6000806101e2604080516102e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905290610100820190815260200160008152602001600081526000602082018190526040909101908152602001606081526020016060815260200160006001600160a01b031681526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516102e08101825273dd54d660178b28f6033a953b0e55073cfa7e374481526001600160a01b038c1660208201526000918101829052606081018790526080810182905260a0810182905260c0810191909152735b3256965e7c3cf26e11fcaf296dfc8807c0107360e082015261010081016001815260200160018152602001600081527345b594792a5cdc008d0de1c1d69faa3d16b3ddc16020820152604001600181526020018b6040516020016102b6919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f19818403018152908290526bffffffffffffffffffffffff1960608e901b1660208301529060340160408051601f19818403018152828252602083018e9052910160408051601f198184030181529082905261031c939291602001610cf6565b604051602081830303815290604052815260200160405180610120016040528060e48152602001610dd860e49139815260200160006001600160a01b03168152602001604051806020016040528060008152508152602001856001600160a01b03168152602001888152602001600081526020014281526020018781526020014281525090506103ab816106c3565b909b909a509098509650505050505050565b60405163c455279160e01b81526001600160a01b0384166004820152600090731e525eeaf261ca41b809884cbde9dd9e1619573a9063c455279190602401602060405180830381865afa158015610418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043c9190610d78565b90506001600160a01b0381166104c757731e525eeaf261ca41b809884cbde9dd9e1619573a6001600160a01b031663ddd81f826040518163ffffffff1660e01b81526004016020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610d78565b90505b60405163e985e9c560e01b81526001600160a01b038581166004830152828116602483015284919082169063e985e9c590604401602060405180830381865afa158015610518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053c9190610d9c565b6105a35760405163a22cb46560e01b81526001600160a01b0383811660048301526001602483015282169063a22cb46590604401600060405180830381600087803b15801561058a57600080fd5b505af115801561059e573d6000803e3d6000fd5b505050505b604051636eb1769f60e11b81526001600160a01b03868116600483015273cdc9188485316bf6fa416d02b4f680227c50b89e602483015284916000199183169063dd62ed3e90604401602060405180830381865afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190610dbe565b10156106bb5760405163095ea7b360e01b815273cdc9188485316bf6fa416d02b4f680227c50b89e600482015260001960248201526001600160a01b0382169063095ea7b3906044016020604051808303816000875af1158015610695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b99190610d9c565b505b505050505050565b6020810151604051623f675f60e91b81526001600160a01b039091166004820152600090819061075490849073dd54d660178b28f6033a953b0e55073cfa7e374490637ecebe0090602401602060405180830381865afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190610dbe565b6107b2565b60405161190160f01b60208201527fd38471a54d114ee69fbb07d1769a0bbecd4f429ddf5932c7098093908e24bd9d602282015260428101829052909150606201604051602081830303815290604052805190602001209150915091565b604080516103208082526103408201909252600091908290826020820181803683370190505090506020810161080b817fdba08a88a748f356e8faf8578488343eab21b1741728779c9dcfdc782bc800f8815260200190565b865181526020808801519082015260408088015190820152606080880151908201526080808801519082015260a0808801519082015260c0808801519082015260e08088015190820152610100808801519101915061087f908290600181111561087757610877610a16565b815260200190565b905061089c81876101200151600181111561087757610877610a16565b90506108b981876101400151600181111561087757610877610a16565b610160870151815290506020810190506108e481876101800151600181111561087757610877610a16565b90506108ff81876101a0015180519060200120815260200190565b905061091a81876101c0015180519060200120815260200190565b6101e0870151815261020087015180516020918201208183015261022088015160408301526102408801516060830152610260880151608083015261028088015160a08301526102a088015160c08301526102c09097015160e082015261010001949094529093019290922092915050565b6001600160a01b03811681146109a157600080fd5b50565b600080600080600080600060e0888a0312156109bf57600080fd5b87356109ca8161098c565b965060208801356109da8161098c565b955060408801359450606088013593506080880135925060a0880135915060c0880135610a068161098c565b8091505092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b60028110610a4a57634e487b7160e01b600052602160045260246000fd5b9052565b60005b83811015610a69578181015183820152602001610a51565b83811115610a78576000848401525b50505050565b60008151808452610a96816020860160208601610a4e565b601f01601f19169290920160200192915050565b83815282602082015260606040820152610ad06060820183516001600160a01b03169052565b60006020830151610aec60808401826001600160a01b03169052565b5060408301516001600160a01b03811660a084015250606083015160c0830152608083015160e083015260a0830151610100818185015260c08501519150610120828186015260e08601519250610140610b50818701856001600160a01b03169052565b91860151925061016091610b6686840185610a2c565b90860151925061018090610b7c86830185610a2c565b86015192506101a0610b9086820185610a2c565b9186015192506101c091610bae868401856001600160a01b03169052565b9086015192506101e090610bc486830185610a2c565b808701519350506102e06102008181880152610be4610340880186610a7e565b9450838801519350605f196102208189880301818a0152610c058787610a7e565b9650848a015195506102409450610c26858a01876001600160a01b03169052565b828a0151955061026092508189880301838a0152610c448787610a7e565b9650808a015195505050610280610c65818901866001600160a01b03169052565b928801516102a088810191909152908801516102c08089019190915292880151918701919091528601516103008601529094015161032090930192909252509392505050565b600080600060608486031215610cc057600080fd5b8335610ccb8161098c565b92506020840135610cdb8161098c565b91506040840135610ceb8161098c565b809150509250925092565b63fb16a59560e01b81528351600090610d16816010850160208901610a4e565b808301905060006010820152600060308201528451610d3c81603c840160208901610a4e565b8451910190610d5281603c840160208801610a4e565b6000603c9290910191820181905260c0605c830152607c820152609c0195945050505050565b600060208284031215610d8a57600080fd5b8151610d958161098c565b9392505050565b600060208284031215610dae57600080fd5b81518015158114610d9557600080fd5b600060208284031215610dd057600080fd5b505191905056fe000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a2646970667358221220a785cc5cfd6b5e4f821c3df2daed683bcd384497a4f6734c672a193105fad88964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}