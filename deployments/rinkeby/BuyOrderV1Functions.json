{
  "address": "0x4A474aEeC191569aab95A8e5CCB397dbbE20e373",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "executionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellPriceEndTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BuyOrderV1[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        }
      ],
      "name": "validateSignatures",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x49679a0d631b838b83659a3579426b505d6feaa6fa47ec0999dacc6f82b63ecb",
  "receipt": {
    "to": null,
    "from": "0xC103d1b071AFA925714eE55b2F4869300C4331C4",
    "contractAddress": "0x4A474aEeC191569aab95A8e5CCB397dbbE20e373",
    "transactionIndex": 25,
    "gasUsed": "842711",
    "logsBloom": "0x
    "blockHash": "0x7049c7d679b39e0e452ef90a8e91bf5a131506014008146bbc5b34a733455f99",
    "transactionHash": "0x49679a0d631b838b83659a3579426b505d6feaa6fa47ec0999dacc6f82b63ecb",
    "logs": [],
    "blockNumber": 10773761,
    "cumulativeGasUsed": "9299161",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6b99516dd67b3efe2361a785205cc2cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellPriceEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct BuyOrderV1[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"name\":\"validateSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"PassiveTradeOrders\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/passiveorders/BuyOrderV1.sol\":\"BuyOrderV1Functions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/libraries/SignatureUtil.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\r\\nimport {SignatureChecker} from '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\r\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\nlibrary SignatureUtil {\\r\\n    function verify(\\r\\n        bytes32 hash,\\r\\n        address signer,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s,\\r\\n        bytes32 domainSeparator\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"SignatureUtil: Invalid signer\\\");\\r\\n        bytes memory signature = abi.encodePacked(r, s, v);\\r\\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, hash);\\r\\n        return SignatureChecker.isValidSignatureNow(signer, digest, signature);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x095c1792bff277bfc4e529d564b85d3421cdc807f9ad6caec5ceb1793116db93\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/execution/Execution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nstruct Execution {\\r\\n    address collection; // zero to evaluate as non-existant\\r\\n    uint256 buyPrice;\\r\\n    uint256 tokenId;\\r\\n    bool sold;\\r\\n    /* Marketplace listing parameters */\\r\\n    uint256 sellPrice; // if not sold yet, this is the amount we will recieve\\r\\n    // from a marketplace in case it is listed for sale\\r\\n    uint256 listingEndTime; // expiration time of the listing\\r\\n    bytes32 openSeaOrderHash;\\r\\n    uint256 sellProtocolFee; // only has value when a marketplace listing happens\\r\\n    // otherwise it is zero because the protocol fee is transferred immediately\\r\\n}\\r\\n\",\"keccak256\":\"0xfbc2e136ffd8d18eee490c18a9556b2065978cbc06de28ea269eb94c4d15b2fd\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/passiveorders/BuyOrderV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport {SignatureUtil} from \\\"./../SignatureUtil.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {Execution} from \\\"./../execution/Execution.sol\\\";\\r\\n\\r\\nusing BuyOrderV1Functions for BuyOrderV1 global;\\r\\n\\r\\n// DO NOT CHANGE the struct, create a new order file instead.\\r\\n// If chaging the struct is extremely necessary, don't forget to \\r\\n// update the hash constant and hash function below.\\r\\nstruct BuyOrderV1 {\\r\\n    \\r\\n    address signer; // order signer\\r\\n\\r\\n    // general order parameters\\r\\n    address collection; // collection address\\r\\n    uint256 executionId; // buy order execution id\\r\\n    uint256 contribution; // WETH contribution\\r\\n\\r\\n    // buy order parameters\\r\\n    uint256 buyPrice; // buy WETH price\\r\\n    uint256 buyPriceEndTime; // order expiration time (set 0 for omitting)\\r\\n    uint256 buyNonce; // for differentiating orders (it is not possible to re-use the nonce)\\r\\n\\r\\n    // sell order parameters\\r\\n    uint256 sellPrice; // sell WETH price \\r\\n    uint256 sellPriceEndTime; // sell order expiration time (set 0 for omitting)\\r\\n    uint256 sellNonce;\\r\\n\\r\\n    // signature parameters\\r\\n    uint8 v;\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title PassiveTradeOrders\\r\\n * @notice\\r\\n */\\r\\nlibrary BuyOrderV1Functions {\\r\\n    bytes32 internal constant PASSIVE_BUY_ORDER_HASH = 0x72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f;\\r\\n\\r\\n    function hash(BuyOrderV1 memory passiveOrder) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    PASSIVE_BUY_ORDER_HASH,\\r\\n                    passiveOrder.signer,\\r\\n                    passiveOrder.collection,\\r\\n                    passiveOrder.executionId,\\r\\n                    passiveOrder.contribution,\\r\\n                    passiveOrder.buyPrice,\\r\\n                    passiveOrder.buyPriceEndTime,\\r\\n                    passiveOrder.buyNonce,\\r\\n                    passiveOrder.sellPrice,\\r\\n                    passiveOrder.sellPriceEndTime,\\r\\n                    passiveOrder.sellNonce\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function canAcceptBuyPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\r\\n        return passiveOrder.buyPrice >= price;\\r\\n    }\\r\\n    \\r\\n    function canAcceptSellPrice(BuyOrderV1 memory passiveOrder, uint256 price) internal pure returns (bool) {\\r\\n        return passiveOrder.sellPrice <= price;\\r\\n    }\\r\\n\\r\\n    \\r\\n    // Validate signatures (includes interaction with\\r\\n    // other contracts)\\r\\n    // Remember that we give away execution flow\\r\\n    // in case the signer is a contract (isValidSignature)\\r\\n    function validateSignatures(\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        bytes32 domainSeparator\\r\\n    ) public view {\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            BuyOrderV1 calldata order = orders[i];\\r\\n            // Validate order signature\\r\\n            bytes32 orderHash = hash(order);\\r\\n            require(\\r\\n                SignatureUtil.verify(\\r\\n                    orderHash,\\r\\n                    order.signer,\\r\\n                    order.v,\\r\\n                    order.r,\\r\\n                    order.s,\\r\\n                    domainSeparator\\r\\n                ),\\r\\n                \\\"Signature: Invalid\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function validateSellOrdersParameters(\\r\\n        mapping(address => mapping(uint256 => bool)) storage _isUsedSellNonce,\\r\\n        mapping(address => mapping(uint256 => uint256)) storage _realContributions,\\r\\n        BuyOrderV1[] calldata orders,\\r\\n        uint256 executionId,\\r\\n        Execution storage execution,\\r\\n        uint256 price,\\r\\n        uint256 minConsensusForSellingOverOrEqualBuyPrice,\\r\\n        uint256 minConsensusForSellingUnderBuyPrice\\r\\n    ) public view returns (uint256) {\\r\\n        // mapping(address => mapping(uint256 => bool))\\r\\n        //     storage _isUsedSellNonce = isUsedSellNonce;\\r\\n        // mapping(address => mapping(uint256 => uint256))\\r\\n        //     storage _realContributions = realContributions;\\r\\n        // Execution storage execution = executions[executionId];\\r\\n\\r\\n        uint256 minExpirationTime = type(uint256).max;\\r\\n        uint256 realContributionOnBoard = 0;\\r\\n        // Validate orders parameters, no need to access state\\r\\n        for (uint256 i = 0; i < orders.length; i++) {\\r\\n            BuyOrderV1 calldata order = orders[i];\\r\\n\\r\\n            // Validate the order is not expired\\r\\n            require(order.sellPriceEndTime >= block.timestamp, \\\"Order expired\\\");\\r\\n            // Validate collection\\r\\n            require(\\r\\n                order.collection == execution.collection,\\r\\n                \\\"Order collection mismatch\\\"\\r\\n            );\\r\\n            // Validate executionId\\r\\n            require(\\r\\n                order.executionId == executionId,\\r\\n                \\\"Order executionId mismatch\\\"\\r\\n            );\\r\\n            // Validating that the signer has not voted yet\\r\\n            for (uint256 j = 0; j < i; j++) {\\r\\n                if (orders[j].signer == order.signer) {\\r\\n                    require(false, \\\"Signer already voted\\\");\\r\\n                }\\r\\n            }\\r\\n            // Validating price acceptance\\r\\n            require(\\r\\n                canAcceptSellPrice(order, price),\\r\\n                \\\"Order can't accept price\\\"\\r\\n            );\\r\\n            // updating the min expiration time\\r\\n            minExpirationTime = Math.min(\\r\\n                minExpirationTime,\\r\\n                order.sellPriceEndTime\\r\\n            );\\r\\n\\r\\n            /* State required for tne following lines */\\r\\n\\r\\n            // Validate order nonce usability\\r\\n            require(\\r\\n                !_isUsedSellNonce[order.signer][order.sellNonce],\\r\\n                \\\"Order nonce is unusable\\\"\\r\\n            );\\r\\n            // counting the \\\"votes\\\" in favor of this price\\r\\n            realContributionOnBoard += _realContributions[order.signer][\\r\\n                executionId\\r\\n            ];\\r\\n        } // ends the voters for loop\\r\\n\\r\\n        // Validating price consensus\\r\\n        if (price >= execution.buyPrice) {\\r\\n            // we need at least N out of 10_000 consensus\\r\\n            require(\\r\\n                realContributionOnBoard * 10_000 >=\\r\\n                    execution.buyPrice *\\r\\n                        minConsensusForSellingOverOrEqualBuyPrice,\\r\\n                \\\"Selling over or equal buyPrice: consensus not reached\\\"\\r\\n            );\\r\\n        } else {\\r\\n            // we need a different consensus ratio\\r\\n            require(\\r\\n                realContributionOnBoard * 10_000 >=\\r\\n                    execution.buyPrice * minConsensusForSellingUnderBuyPrice,\\r\\n                \\\"Selling under buyPrice: consensus not reached\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return minExpirationTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45dea27e7ce72fe5c6949215972e4f298de769f90bd839bf3933528eb1d111dd\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x610e4961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806368b47b3e14610045578063b95522d51461005a575b600080fd5b610058610053366004610ab2565b61007f565b005b61006d610068366004610afe565b610159565b60405190815260200160405180910390f35b60005b82811015610153573684848381811061009d5761009d610b7e565b90506101a00201905060006100c1828036038101906100bc9190610bf9565b6105bc565b90506100f8816100d46020850185610cb5565b6100e661016086016101408701610cd0565b8561016001358661018001358961069d565b61013e5760405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b60448201526064015b60405180910390fd5b5050808061014b90610d01565b915050610082565b50505050565b600060001981805b8981101561049457368b8b8381811061017c5761017c610b7e565b90506101a0020190504281610100013510156101ca5760405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b6044820152606401610135565b88546001600160a01b03166101e56040830160208401610cb5565b6001600160a01b03161461023b5760405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d61746368000000000000006044820152606401610135565b8981604001351461028e5760405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d617463680000000000006044820152606401610135565b60005b82811015610337576102a66020830183610cb5565b6001600160a01b03168d8d838181106102c1576102c1610b7e565b6102d89260206101a0909202019081019150610cb5565b6001600160a01b0316036103255760405162461bcd60e51b815260206004820152601460248201527314da59db995c88185b1c9958591e481d9bdd195960621b6044820152606401610135565b8061032f81610d01565b915050610291565b5061035461034a36839003830183610bf9565b60e0015189101590565b6103a05760405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e27742061636365707420707269636500000000000000006044820152606401610135565b6103af84826101000135610774565b93508d60006103c16020840184610cb5565b6001600160a01b0316815260208082019290925260409081016000908120610120850135825290925290205460ff161561043d5760405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c650000000000000000006044820152606401610135565b8c600061044d6020840184610cb5565b6001600160a01b03168152602080820192909252604090810160009081208d825290925290205461047e9084610d1a565b925050808061048c90610d01565b915050610161565b508660010154861061052d578487600101546104b09190610d32565b6104bc82612710610d32565b10156105285760405162461bcd60e51b815260206004820152603560248201527f53656c6c696e67206f766572206f7220657175616c2062757950726963653a2060448201527418dbdb9cd95b9cdd5cc81b9bdd081c995858da1959605a1b6064820152608401610135565b6105ad565b83876001015461053d9190610d32565b61054982612710610d32565b10156105ad5760405162461bcd60e51b815260206004820152602d60248201527f53656c6c696e6720756e6465722062757950726963653a20636f6e73656e737560448201526c1cc81b9bdd081c995858da1959609a1b6064820152608401610135565b509a9950505050505050505050565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c0151975160009b6106809b7f72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f9b919a919998979695949392019a8b526001600160a01b03998a1660208c01529790981660408a01526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301919091526101408201526101600190565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b0386166106f55760405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e65720000006044820152606401610135565b6040805160208082018790528183018690526001600160f81b031960f889901b1660608301528251808303604101815260618301845261190160f01b60818401526083830186905260a38084018c90528451808503909101815260c3909301909352815191012061076788828461078c565b9998505050505050505050565b60008183106107835781610785565b825b9392505050565b600080600061079b85856108d8565b909250905060008160048111156107b4576107b4610d51565b1480156107d25750856001600160a01b0316826001600160a01b0316145b156107e257600192505050610785565b600080876001600160a01b0316631626ba7e60e01b888860405160240161080a929190610d93565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516108489190610dcd565b600060405180830381855afa9150503d8060008114610883576040519150601f19603f3d011682016040523d82523d6000602084013e610888565b606091505b509150915081801561089b575080516020145b80156108cc57508051630b135d3f60e11b906108c09083016020908101908401610de9565b6001600160e01b031916145b98975050505050505050565b600080825160410361090e5760208301516040840151606085015160001a61090287828585610946565b9450945050505061093f565b8251604003610937576020830151604084015161092c868383610a33565b93509350505061093f565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561097d5750600090506003610a2a565b8460ff16601b1415801561099557508460ff16601c14155b156109a65750600090506004610a2a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109fa573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a2357600060019250925050610a2a565b9150600090505b94509492505050565b6000806001600160ff1b03831681610a5060ff86901c601b610d1a565b9050610a5e87828885610946565b935093505050935093915050565b60008083601f840112610a7e57600080fd5b50813567ffffffffffffffff811115610a9657600080fd5b6020830191508360206101a08302850101111561093f57600080fd5b600080600060408486031215610ac757600080fd5b833567ffffffffffffffff811115610ade57600080fd5b610aea86828701610a6c565b909790965060209590950135949350505050565b60008060008060008060008060006101008a8c031215610b1d57600080fd5b8935985060208a0135975060408a013567ffffffffffffffff811115610b4257600080fd5b610b4e8c828d01610a6c565b9a9d999c509a6060810135996080820135995060a0820135985060c0820135975060e09091013595509350505050565b634e487b7160e01b600052603260045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715610bc657634e487b7160e01b600052604160045260246000fd5b60405290565b80356001600160a01b0381168114610be357600080fd5b919050565b803560ff81168114610be357600080fd5b60006101a08284031215610c0c57600080fd5b610c14610b94565b610c1d83610bcc565b8152610c2b60208401610bcc565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140610c92818501610be8565b908201526101608381013590820152610180928301359281019290925250919050565b600060208284031215610cc757600080fd5b61078582610bcc565b600060208284031215610ce257600080fd5b61078582610be8565b634e487b7160e01b600052601160045260246000fd5b600060018201610d1357610d13610ceb565b5060010190565b60008219821115610d2d57610d2d610ceb565b500190565b6000816000190483118215151615610d4c57610d4c610ceb565b500290565b634e487b7160e01b600052602160045260246000fd5b60005b83811015610d82578181015183820152602001610d6a565b838111156101535750506000910152565b8281526040602082015260008251806040840152610db8816060850160208701610d67565b601f01601f1916919091016060019392505050565b60008251610ddf818460208701610d67565b9190910192915050565b600060208284031215610dfb57600080fd5b81516001600160e01b03198116811461078557600080fdfea26469706673582212204ec7079c23300fb6b3a133ecbda80bd5a8dd4265ffb5942212ea069cecb87f6b64736f6c634300080d0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806368b47b3e14610045578063b95522d51461005a575b600080fd5b610058610053366004610ab2565b61007f565b005b61006d610068366004610afe565b610159565b60405190815260200160405180910390f35b60005b82811015610153573684848381811061009d5761009d610b7e565b90506101a00201905060006100c1828036038101906100bc9190610bf9565b6105bc565b90506100f8816100d46020850185610cb5565b6100e661016086016101408701610cd0565b8561016001358661018001358961069d565b61013e5760405162461bcd60e51b815260206004820152601260248201527114da59db985d1d5c994e88125b9d985b1a5960721b60448201526064015b60405180910390fd5b5050808061014b90610d01565b915050610082565b50505050565b600060001981805b8981101561049457368b8b8381811061017c5761017c610b7e565b90506101a0020190504281610100013510156101ca5760405162461bcd60e51b815260206004820152600d60248201526c13dc99195c88195e1c1a5c9959609a1b6044820152606401610135565b88546001600160a01b03166101e56040830160208401610cb5565b6001600160a01b03161461023b5760405162461bcd60e51b815260206004820152601960248201527f4f7264657220636f6c6c656374696f6e206d69736d61746368000000000000006044820152606401610135565b8981604001351461028e5760405162461bcd60e51b815260206004820152601a60248201527f4f7264657220657865637574696f6e4964206d69736d617463680000000000006044820152606401610135565b60005b82811015610337576102a66020830183610cb5565b6001600160a01b03168d8d838181106102c1576102c1610b7e565b6102d89260206101a0909202019081019150610cb5565b6001600160a01b0316036103255760405162461bcd60e51b815260206004820152601460248201527314da59db995c88185b1c9958591e481d9bdd195960621b6044820152606401610135565b8061032f81610d01565b915050610291565b5061035461034a36839003830183610bf9565b60e0015189101590565b6103a05760405162461bcd60e51b815260206004820152601860248201527f4f726465722063616e27742061636365707420707269636500000000000000006044820152606401610135565b6103af84826101000135610774565b93508d60006103c16020840184610cb5565b6001600160a01b0316815260208082019290925260409081016000908120610120850135825290925290205460ff161561043d5760405162461bcd60e51b815260206004820152601760248201527f4f72646572206e6f6e636520697320756e757361626c650000000000000000006044820152606401610135565b8c600061044d6020840184610cb5565b6001600160a01b03168152602080820192909252604090810160009081208d825290925290205461047e9084610d1a565b925050808061048c90610d01565b915050610161565b508660010154861061052d578487600101546104b09190610d32565b6104bc82612710610d32565b10156105285760405162461bcd60e51b815260206004820152603560248201527f53656c6c696e67206f766572206f7220657175616c2062757950726963653a2060448201527418dbdb9cd95b9cdd5cc81b9bdd081c995858da1959605a1b6064820152608401610135565b6105ad565b83876001015461053d9190610d32565b61054982612710610d32565b10156105ad5760405162461bcd60e51b815260206004820152602d60248201527f53656c6c696e6720756e6465722062757950726963653a20636f6e73656e737560448201526c1cc81b9bdd081c995858da1959609a1b6064820152608401610135565b509a9950505050505050505050565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c0151975160009b6106809b7f72e794cb40f2ebfd460c7e8f21afeacac61a902963a831638aeff99e28bc690f9b919a919998979695949392019a8b526001600160a01b03998a1660208c01529790981660408a01526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301919091526101408201526101600190565b604051602081830303815290604052805190602001209050919050565b60006001600160a01b0386166106f55760405162461bcd60e51b815260206004820152601d60248201527f5369676e61747572655574696c3a20496e76616c6964207369676e65720000006044820152606401610135565b6040805160208082018790528183018690526001600160f81b031960f889901b1660608301528251808303604101815260618301845261190160f01b60818401526083830186905260a38084018c90528451808503909101815260c3909301909352815191012061076788828461078c565b9998505050505050505050565b60008183106107835781610785565b825b9392505050565b600080600061079b85856108d8565b909250905060008160048111156107b4576107b4610d51565b1480156107d25750856001600160a01b0316826001600160a01b0316145b156107e257600192505050610785565b600080876001600160a01b0316631626ba7e60e01b888860405160240161080a929190610d93565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516108489190610dcd565b600060405180830381855afa9150503d8060008114610883576040519150601f19603f3d011682016040523d82523d6000602084013e610888565b606091505b509150915081801561089b575080516020145b80156108cc57508051630b135d3f60e11b906108c09083016020908101908401610de9565b6001600160e01b031916145b98975050505050505050565b600080825160410361090e5760208301516040840151606085015160001a61090287828585610946565b9450945050505061093f565b8251604003610937576020830151604084015161092c868383610a33565b93509350505061093f565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561097d5750600090506003610a2a565b8460ff16601b1415801561099557508460ff16601c14155b156109a65750600090506004610a2a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109fa573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a2357600060019250925050610a2a565b9150600090505b94509492505050565b6000806001600160ff1b03831681610a5060ff86901c601b610d1a565b9050610a5e87828885610946565b935093505050935093915050565b60008083601f840112610a7e57600080fd5b50813567ffffffffffffffff811115610a9657600080fd5b6020830191508360206101a08302850101111561093f57600080fd5b600080600060408486031215610ac757600080fd5b833567ffffffffffffffff811115610ade57600080fd5b610aea86828701610a6c565b909790965060209590950135949350505050565b60008060008060008060008060006101008a8c031215610b1d57600080fd5b8935985060208a0135975060408a013567ffffffffffffffff811115610b4257600080fd5b610b4e8c828d01610a6c565b9a9d999c509a6060810135996080820135995060a0820135985060c0820135975060e09091013595509350505050565b634e487b7160e01b600052603260045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715610bc657634e487b7160e01b600052604160045260246000fd5b60405290565b80356001600160a01b0381168114610be357600080fd5b919050565b803560ff81168114610be357600080fd5b60006101a08284031215610c0c57600080fd5b610c14610b94565b610c1d83610bcc565b8152610c2b60208401610bcc565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140610c92818501610be8565b908201526101608381013590820152610180928301359281019290925250919050565b600060208284031215610cc757600080fd5b61078582610bcc565b600060208284031215610ce257600080fd5b61078582610be8565b634e487b7160e01b600052601160045260246000fd5b600060018201610d1357610d13610ceb565b5060010190565b60008219821115610d2d57610d2d610ceb565b500190565b6000816000190483118215151615610d4c57610d4c610ceb565b500290565b634e487b7160e01b600052602160045260246000fd5b60005b83811015610d82578181015183820152602001610d6a565b838111156101535750506000910152565b8281526040602082015260008251806040840152610db8816060850160208701610d67565b601f01601f1916919091016060019392505050565b60008251610ddf818460208701610d67565b9190910192915050565b600060208284031215610dfb57600080fd5b81516001600160e01b03198116811461078557600080fdfea26469706673582212204ec7079c23300fb6b3a133ecbda80bd5a8dd4265ffb5942212ea069cecb87f6b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "PassiveTradeOrders",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}